
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003ac4  00003b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080016a  0080016a  00003c62  2**0
                  ALLOC
  3 .stab         000043a4  00000000  00000000  00003c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001da8  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c54d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d8d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000eaac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ef62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 1c 	call	0x3930	; 0x3930 <main>
      8a:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(USART_RXC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e58:	80 91 6a 01 	lds	r24, 0x016A
     e5c:	90 91 6b 01 	lds	r25, 0x016B
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_13+0x40>
	{
		(*g_callBackPtr)();
     e64:	e0 91 6a 01 	lds	r30, 0x016A
     e68:	f0 91 6b 01 	lds	r31, 0x016B
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <UART_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void UART_init(const UART_ConfigType * Configptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <UART_init+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <UART_init+0x8>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value ;
	UCSRA = (1<<U2X); /* Double transmission speed */
     ea4:	eb e2       	ldi	r30, 0x2B	; 43
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN) ;	/* Transmission and receive enable */
     eac:	ea e2       	ldi	r30, 0x2A	; 42
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	88 e1       	ldi	r24, 0x18	; 24
     eb2:	80 83       	st	Z, r24
	UCSRB = (UCSRB & CLEAR_RECEIVE_METHOD_MASK ) | ( (Configptr->RECEVIE_METHOD<<7) ) ; /* To configure the UART with interrupt or polling */
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	2f 77       	andi	r18, 0x7F	; 127
     ec2:	eb 81       	ldd	r30, Y+3	; 0x03
     ec4:	fc 81       	ldd	r31, Y+4	; 0x04
     ec6:	80 85       	ldd	r24, Z+8	; 0x08
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	96 95       	lsr	r25
     ece:	98 2f       	mov	r25, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	97 95       	ror	r25
     ed4:	87 95       	ror	r24
     ed6:	82 2b       	or	r24, r18
     ed8:	8c 93       	st	X, r24

	SET_BIT(UCSRC,URSEL); /* so we can write in UCSRC register */
     eda:	a0 e4       	ldi	r26, 0x40	; 64
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e0 e4       	ldi	r30, 0x40	; 64
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_CHAR_SIZE_MASK ) | ( (Configptr->CHAR_SIZE)<<1) ; /* setting the number of bits in UART frame */
     ee8:	a0 e4       	ldi	r26, 0x40	; 64
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e0 e4       	ldi	r30, 0x40	; 64
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	28 2f       	mov	r18, r24
     ef4:	29 7f       	andi	r18, 0xF9	; 249
     ef6:	eb 81       	ldd	r30, Y+3	; 0x03
     ef8:	fc 81       	ldd	r31, Y+4	; 0x04
     efa:	86 81       	ldd	r24, Z+6	; 0x06
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	82 2b       	or	r24, r18
     f06:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_STOP_BITS_MASK) | ( (Configptr->STOP_BIT)<<3) ; /* set the number of stop bits */
     f08:	a0 e4       	ldi	r26, 0x40	; 64
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e0 e4       	ldi	r30, 0x40	; 64
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	28 2f       	mov	r18, r24
     f14:	27 7f       	andi	r18, 0xF7	; 247
     f16:	eb 81       	ldd	r30, Y+3	; 0x03
     f18:	fc 81       	ldd	r31, Y+4	; 0x04
     f1a:	85 81       	ldd	r24, Z+5	; 0x05
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	82 2b       	or	r24, r18
     f2e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_PARITY_MASK ) | ( (Configptr->PARITY)<<4) ; /* setting the PARITY */
     f30:	a0 e4       	ldi	r26, 0x40	; 64
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e0 e4       	ldi	r30, 0x40	; 64
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	28 2f       	mov	r18, r24
     f3c:	2f 7c       	andi	r18, 0xCF	; 207
     f3e:	eb 81       	ldd	r30, Y+3	; 0x03
     f40:	fc 81       	ldd	r31, Y+4	; 0x04
     f42:	87 81       	ldd	r24, Z+7	; 0x07
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	82 95       	swap	r24
     f4a:	92 95       	swap	r25
     f4c:	90 7f       	andi	r25, 0xF0	; 240
     f4e:	98 27       	eor	r25, r24
     f50:	80 7f       	andi	r24, 0xF0	; 240
     f52:	98 27       	eor	r25, r24
     f54:	82 2b       	or	r24, r18
     f56:	8c 93       	st	X, r24

	CLEAR_BIT(UBRRH,URSEL); /* to access UBRRH not UCSRC */
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e0 e4       	ldi	r30, 0x40	; 64
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Configptr->BAUD_RATE * 8UL))) - 1);
     f66:	eb 81       	ldd	r30, Y+3	; 0x03
     f68:	fc 81       	ldd	r31, Y+4	; 0x04
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	a2 81       	ldd	r26, Z+2	; 0x02
     f70:	b3 81       	ldd	r27, Z+3	; 0x03
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	aa 1f       	adc	r26, r26
     f78:	bb 1f       	adc	r27, r27
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	aa 1f       	adc	r26, r26
     f80:	bb 1f       	adc	r27, r27
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	9c 01       	movw	r18, r24
     f8c:	ad 01       	movw	r20, r26
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	94 e2       	ldi	r25, 0x24	; 36
     f92:	a4 ef       	ldi	r26, 0xF4	; 244
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	89 2f       	mov	r24, r25
     fb2:	99 27       	eor	r25, r25
     fb4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     fb6:	e9 e2       	ldi	r30, 0x29	; 41
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 83       	st	Z, r24

	g_endStringChar = Configptr->END_SRTING;
     fbe:	eb 81       	ldd	r30, Y+3	; 0x03
     fc0:	fc 81       	ldd	r31, Y+4	; 0x04
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	80 93 6c 01 	sts	0x016C, r24
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     fe2:	eb e2       	ldi	r30, 0x2B	; 43
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 72       	andi	r24, 0x20	; 32
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	b9 f3       	breq	.-18     	; 0xfe2 <UART_sendByte+0xc>

	UDR = data;
     ff4:	ec e2       	ldi	r30, 0x2C	; 44
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	80 83       	st	Z, r24
}
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    100c:	eb e2       	ldi	r30, 0x2B	; 43
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	dc f7       	brge	.-10     	; 0x100c <UART_receiveByte+0x8>

	return UDR;
    1016:	ec e2       	ldi	r30, 0x2C	; 44
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <UART_sendString+0x6>
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9b 83       	std	Y+3, r25	; 0x03
    1030:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	0e c0       	rjmp	.+28     	; 0x1052 <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	fc 01       	movw	r30, r24
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	80 81       	ld	r24, Z
    1048:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <UART_sendByte>
}

void UART_sendString(const uint8 *Str)
{
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	39 f7       	brne	.-50     	; 0x1036 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
	}
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <UART_receiveString+0xa>
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9b 83       	std	Y+3, r25	; 0x03
    1086:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1088:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	8c 01       	movw	r16, r24
    1096:	02 0f       	add	r16, r18
    1098:	13 1f       	adc	r17, r19
    109a:	0e 94 02 08 	call	0x1004	; 0x1004 <UART_receiveByte>
    109e:	f8 01       	movw	r30, r16
    10a0:	80 83       	st	Z, r24
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
	{
		i++;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	8c 01       	movw	r16, r24
    10b6:	02 0f       	add	r16, r18
    10b8:	13 1f       	adc	r17, r19
    10ba:	0e 94 02 08 	call	0x1004	; 0x1004 <UART_receiveByte>
    10be:	f8 01       	movw	r30, r16
    10c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	fc 01       	movw	r30, r24
    10ce:	e2 0f       	add	r30, r18
    10d0:	f3 1f       	adc	r31, r19
    10d2:	90 81       	ld	r25, Z
    10d4:	80 91 6c 01 	lds	r24, 0x016C
    10d8:	98 17       	cp	r25, r24
    10da:	21 f7       	brne	.-56     	; 0x10a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	10 82       	st	Z, r1

}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <UART_setCallBack>:

void UART_setCallBack( void(*a_ptr)(void) )
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <UART_setCallBack+0x6>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	90 93 6b 01 	sts	0x016B, r25
    1114:	80 93 6a 01 	sts	0x016A, r24
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <SPI_initMaster>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void SPI_initMaster(void)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN4_ID, PIN_OUTPUT);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	64 e0       	ldi	r22, 0x04	; 4
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN5_ID, PIN_OUTPUT);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	65 e0       	ldi	r22, 0x05	; 5
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN6_ID, PIN_INPUT);
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	66 e0       	ldi	r22, 0x06	; 6
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN7_ID, PIN_OUTPUT);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	67 e0       	ldi	r22, 0x07	; 7
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	SPCR = (1<<SPE) | (1<<MSTR);
    1152:	ed e2       	ldi	r30, 0x2D	; 45
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 e5       	ldi	r24, 0x50	; 80
    1158:	80 83       	st	Z, r24

	SPSR &= ~(1<<SPI2X);
    115a:	ae e2       	ldi	r26, 0x2E	; 46
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ee e2       	ldi	r30, 0x2E	; 46
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8e 7f       	andi	r24, 0xFE	; 254
    1166:	8c 93       	st	X, r24
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <SPI_initSlave>:

void SPI_initSlave(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, PIN4_ID, PIN_INPUT);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN5_ID, PIN_INPUT);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	65 e0       	ldi	r22, 0x05	; 5
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN6_ID, PIN_OUTPUT);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	66 e0       	ldi	r22, 0x06	; 6
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN7_ID, PIN_INPUT);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	67 e0       	ldi	r22, 0x07	; 7
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	SPCR = (1<<SPE) ;
    119e:	ed e2       	ldi	r30, 0x2D	; 45
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 e4       	ldi	r24, 0x40	; 64
    11a4:	80 83       	st	Z, r24

	SPSR &= ~(1<<SPI2X);
    11a6:	ae e2       	ldi	r26, 0x2E	; 46
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ee e2       	ldi	r30, 0x2E	; 46
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8e 7f       	andi	r24, 0xFE	; 254
    11b2:	8c 93       	st	X, r24
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <SPI_sendReceiveByte>:

uint8 SPI_sendReceiveByte(uint8 data)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    11c6:	ef e2       	ldi	r30, 0x2F	; 47
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    11ce:	ee e2       	ldi	r30, 0x2E	; 46
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	dc f7       	brge	.-10     	; 0x11ce <SPI_sendReceiveByte+0x14>

	return SPDR;
    11d8:	ef e2       	ldi	r30, 0x2F	; 47
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
}
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <SPI_sendString>:

void SPI_sendString(const uint8 *str)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <SPI_sendString+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <SPI_sendString+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    11f6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	0f c0       	rjmp	.+30     	; 0x121a <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	fc 01       	movw	r30, r24
    1208:	e2 0f       	add	r30, r18
    120a:	f3 1f       	adc	r31, r19
    120c:	80 81       	ld	r24, Z
    120e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <SPI_sendReceiveByte>
    1212:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	fc 01       	movw	r30, r24
    1226:	e2 0f       	add	r30, r18
    1228:	f3 1f       	adc	r31, r19
    122a:	80 81       	ld	r24, Z
    122c:	88 23       	and	r24, r24
    122e:	31 f7       	brne	.-52     	; 0x11fc <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <SPI_receiveString>:

void SPI_receiveString(uint8 *str)
{
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <SPI_receiveString+0xa>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9b 83       	std	Y+3, r25	; 0x03
    1250:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1252:	19 82       	std	Y+1, r1	; 0x01
	/* as 0xFF considered as garbage value is sent to just receive the string */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	8c 01       	movw	r16, r24
    1260:	02 0f       	add	r16, r18
    1262:	13 1f       	adc	r17, r19
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	0e 94 dd 08 	call	0x11ba	; 0x11ba <SPI_sendReceiveByte>
    126a:	f8 01       	movw	r30, r16
    126c:	80 83       	st	Z, r24
    126e:	10 c0       	rjmp	.+32     	; 0x1290 <SPI_receiveString+0x52>

	while(str[i] != g_endStringChar)
	{
		i++;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	8c 01       	movw	r16, r24
    1282:	02 0f       	add	r16, r18
    1284:	13 1f       	adc	r17, r19
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	0e 94 dd 08 	call	0x11ba	; 0x11ba <SPI_sendReceiveByte>
    128c:	f8 01       	movw	r30, r16
    128e:	80 83       	st	Z, r24
{
	uint8 i = 0;
	/* as 0xFF considered as garbage value is sent to just receive the string */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	while(str[i] != g_endStringChar)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	90 81       	ld	r25, Z
    12a2:	80 91 68 01 	lds	r24, 0x0168
    12a6:	98 17       	cp	r25, r24
    12a8:	19 f7       	brne	.-58     	; 0x1270 <SPI_receiveString+0x32>
	{
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}
	str[i] = '\0' ;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	fc 01       	movw	r30, r24
    12b6:	e2 0f       	add	r30, r18
    12b8:	f3 1f       	adc	r31, r19
    12ba:	10 82       	st	Z, r1
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <SPI_setEndStringChar>:

void SPI_setEndStringChar(uint8 symbol)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
	g_endStringChar = symbol ;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 93 68 01 	sts	0x0168, r24
}
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <PWM_Timer0_Start>:
#include "pwm0.h"
#include "avr/io.h"
#include "../GPIO/gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer with
	 * Non inverting fast PWM Mode
	 * Clock frequency = F_CPU/8
	 */
	TCNT0 = 0;
    12f2:	e2 e5       	ldi	r30, 0x52	; 82
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1
	OCR0 = (uint8)((uint16)(duty_cycle*255)/100) ; /* casting the value so we don't get overflow */
    12f8:	ec e5       	ldi	r30, 0x5C	; 92
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	48 2f       	mov	r20, r24
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	ca 01       	movw	r24, r20
    1304:	9c 01       	movw	r18, r24
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	c9 01       	movw	r24, r18
    130c:	96 95       	lsr	r25
    130e:	98 2f       	mov	r25, r24
    1310:	88 27       	eor	r24, r24
    1312:	97 95       	ror	r25
    1314:	87 95       	ror	r24
    1316:	82 1b       	sub	r24, r18
    1318:	93 0b       	sbc	r25, r19
    131a:	84 0f       	add	r24, r20
    131c:	95 1f       	adc	r25, r21
    131e:	24 e6       	ldi	r18, 0x64	; 100
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	b9 01       	movw	r22, r18
    1324:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__udivmodhi4>
    1328:	cb 01       	movw	r24, r22
    132a:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); /* PWM pin as O/P */
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	63 e0       	ldi	r22, 0x03	; 3
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    1336:	e3 e5       	ldi	r30, 0x53	; 83
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a e6       	ldi	r24, 0x6A	; 106
    133c:	80 83       	st	Z, r24

}
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <__vector_6>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1346:	1f 92       	push	r1
    1348:	0f 92       	push	r0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	0f 92       	push	r0
    134e:	11 24       	eor	r1, r1
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1370:	80 91 6d 01 	lds	r24, 0x016D
    1374:	90 91 6e 01 	lds	r25, 0x016E
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	29 f0       	breq	.+10     	; 0x1386 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    137c:	e0 91 6d 01 	lds	r30, 0x016D
    1380:	f0 91 6e 01 	lds	r31, 0x016E
    1384:	09 95       	icall
	}
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <ICU_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <ICU_init+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	66 e0       	ldi	r22, 0x06	; 6
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    13c4:	ef e4       	ldi	r30, 0x4F	; 79
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8c e0       	ldi	r24, 0x0C	; 12
    13ca:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    13cc:	ae e4       	ldi	r26, 0x4E	; 78
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ee e4       	ldi	r30, 0x4E	; 78
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	98 2f       	mov	r25, r24
    13d8:	98 7f       	andi	r25, 0xF8	; 248
    13da:	e9 81       	ldd	r30, Y+1	; 0x01
    13dc:	fa 81       	ldd	r31, Y+2	; 0x02
    13de:	80 81       	ld	r24, Z
    13e0:	89 2b       	or	r24, r25
    13e2:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    13e4:	ae e4       	ldi	r26, 0x4E	; 78
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	28 2f       	mov	r18, r24
    13f0:	2f 7b       	andi	r18, 0xBF	; 191
    13f2:	e9 81       	ldd	r30, Y+1	; 0x01
    13f4:	fa 81       	ldd	r31, Y+2	; 0x02
    13f6:	81 81       	ldd	r24, Z+1	; 0x01
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	00 24       	eor	r0, r0
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	07 94       	ror	r0
    1404:	96 95       	lsr	r25
    1406:	87 95       	ror	r24
    1408:	07 94       	ror	r0
    140a:	98 2f       	mov	r25, r24
    140c:	80 2d       	mov	r24, r0
    140e:	82 2b       	or	r24, r18
    1410:	8c 93       	st	X, r24
	TCNT1 = 0;
    1412:	ec e4       	ldi	r30, 0x4C	; 76
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	11 82       	std	Z+1, r1	; 0x01
    1418:	10 82       	st	Z, r1
	ICR1 = 0;
    141a:	e6 e4       	ldi	r30, 0x46	; 70
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	11 82       	std	Z+1, r1	; 0x01
    1420:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TICIE1);
    1422:	a9 e5       	ldi	r26, 0x59	; 89
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e9 e5       	ldi	r30, 0x59	; 89
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 62       	ori	r24, 0x20	; 32
    142e:	8c 93       	st	X, r24
}
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <ICU_setCallBack+0x6>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	90 93 6e 01 	sts	0x016E, r25
    1450:	80 93 6d 01 	sts	0x016D, r24
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	0f 92       	push	r0
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((a_edgeType)<<6);
    146a:	ae e4       	ldi	r26, 0x4E	; 78
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ee e4       	ldi	r30, 0x4E	; 78
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	28 2f       	mov	r18, r24
    1476:	2f 7b       	andi	r18, 0xBF	; 191
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	00 24       	eor	r0, r0
    1480:	96 95       	lsr	r25
    1482:	87 95       	ror	r24
    1484:	07 94       	ror	r0
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	07 94       	ror	r0
    148c:	98 2f       	mov	r25, r24
    148e:	80 2d       	mov	r24, r0
    1490:	82 2b       	or	r24, r18
    1492:	8c 93       	st	X, r24
}
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    14a4:	e6 e4       	ldi	r30, 0x46	; 70
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    14ba:	ec e4       	ldi	r30, 0x4C	; 76
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	11 82       	std	Z+1, r1	; 0x01
    14c0:	10 82       	st	Z, r1
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <ICU_DeInit>:

void ICU_DeInit(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    14d0:	ef e4       	ldi	r30, 0x4F	; 79
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	10 82       	st	Z, r1
	TCCR1B = 0;
    14d6:	ee e4       	ldi	r30, 0x4E	; 78
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1
	TCNT1 = 0;
    14dc:	ec e4       	ldi	r30, 0x4C	; 76
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	11 82       	std	Z+1, r1	; 0x01
    14e2:	10 82       	st	Z, r1
	ICR1 = 0;
    14e4:	e6 e4       	ldi	r30, 0x46	; 70
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	11 82       	std	Z+1, r1	; 0x01
    14ea:	10 82       	st	Z, r1

	CLEAR_BIT(TIMSK,TICIE1);
    14ec:	a9 e5       	ldi	r26, 0x59	; 89
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e9 e5       	ldi	r30, 0x59	; 89
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8f 7d       	andi	r24, 0xDF	; 223
    14f8:	8c 93       	st	X, r24
}
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <GPIO_setupPinDirection+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <GPIO_setupPinDirection+0x8>
    1508:	0f 92       	push	r0
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	6a 83       	std	Y+2, r22	; 0x02
    1512:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	88 30       	cpi	r24, 0x08	; 8
    1518:	08 f0       	brcs	.+2      	; 0x151c <GPIO_setupPinDirection+0x1c>
    151a:	d5 c0       	rjmp	.+426    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	84 30       	cpi	r24, 0x04	; 4
    1520:	08 f0       	brcs	.+2      	; 0x1524 <GPIO_setupPinDirection+0x24>
    1522:	d1 c0       	rjmp	.+418    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 83       	std	Y+5, r19	; 0x05
    152c:	2c 83       	std	Y+4, r18	; 0x04
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_setupPinDirection+0x3a>
    1538:	43 c0       	rjmp	.+134    	; 0x15c0 <GPIO_setupPinDirection+0xc0>
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <GPIO_setupPinDirection+0x4e>
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	71 f0       	breq	.+28     	; 0x1568 <GPIO_setupPinDirection+0x68>
    154c:	bc c0       	rjmp	.+376    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	3d 81       	ldd	r19, Y+5	; 0x05
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <GPIO_setupPinDirection+0x5a>
    1558:	5f c0       	rjmp	.+190    	; 0x1618 <GPIO_setupPinDirection+0x118>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_setupPinDirection+0x66>
    1564:	85 c0       	rjmp	.+266    	; 0x1670 <GPIO_setupPinDirection+0x170>
    1566:	af c0       	rjmp	.+350    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	a1 f4       	brne	.+40     	; 0x1596 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    156e:	aa e3       	ldi	r26, 0x3A	; 58
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ea e3       	ldi	r30, 0x3A	; 58
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_setupPinDirection+0x8c>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_setupPinDirection+0x88>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	98 c0       	rjmp	.+304    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1596:	aa e3       	ldi	r26, 0x3A	; 58
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_setupPinDirection+0xb4>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_setupPinDirection+0xb0>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	83 c0       	rjmp	.+262    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	a1 f4       	brne	.+40     	; 0x15ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_setupPinDirection+0xe4>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_setupPinDirection+0xe0>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	6c c0       	rjmp	.+216    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15ee:	a7 e3       	ldi	r26, 0x37	; 55
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e7 e3       	ldi	r30, 0x37	; 55
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_setupPinDirection+0x10c>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_setupPinDirection+0x108>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	57 c0       	rjmp	.+174    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	a1 f4       	brne	.+40     	; 0x1646 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    161e:	a4 e3       	ldi	r26, 0x34	; 52
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e4 e3       	ldi	r30, 0x34	; 52
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_setupPinDirection+0x13c>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_setupPinDirection+0x138>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	40 c0       	rjmp	.+128    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1646:	a4 e3       	ldi	r26, 0x34	; 52
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e4 e3       	ldi	r30, 0x34	; 52
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_setupPinDirection+0x164>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_setupPinDirection+0x160>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	2b c0       	rjmp	.+86     	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	a1 f4       	brne	.+40     	; 0x169e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1676:	a1 e3       	ldi	r26, 0x31	; 49
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_setupPinDirection+0x194>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_setupPinDirection+0x190>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    169e:	a1 e3       	ldi	r26, 0x31	; 49
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e1 e3       	ldi	r30, 0x31	; 49
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <GPIO_setupPinDirection+0x1bc>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <GPIO_setupPinDirection+0x1b8>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <GPIO_writePin+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <GPIO_writePin+0x8>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	6a 83       	std	Y+2, r22	; 0x02
    16e8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	88 30       	cpi	r24, 0x08	; 8
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <GPIO_writePin+0x1c>
    16f0:	d5 c0       	rjmp	.+426    	; 0x189c <GPIO_writePin+0x1c6>
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <GPIO_writePin+0x24>
    16f8:	d1 c0       	rjmp	.+418    	; 0x189c <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3d 83       	std	Y+5, r19	; 0x05
    1702:	2c 83       	std	Y+4, r18	; 0x04
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <GPIO_writePin+0x3a>
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <GPIO_writePin+0xc0>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <GPIO_writePin+0x4e>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	71 f0       	breq	.+28     	; 0x173e <GPIO_writePin+0x68>
    1722:	bc c0       	rjmp	.+376    	; 0x189c <GPIO_writePin+0x1c6>
    1724:	2c 81       	ldd	r18, Y+4	; 0x04
    1726:	3d 81       	ldd	r19, Y+5	; 0x05
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <GPIO_writePin+0x5a>
    172e:	5f c0       	rjmp	.+190    	; 0x17ee <GPIO_writePin+0x118>
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <GPIO_writePin+0x66>
    173a:	85 c0       	rjmp	.+266    	; 0x1846 <GPIO_writePin+0x170>
    173c:	af c0       	rjmp	.+350    	; 0x189c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1744:	ab e3       	ldi	r26, 0x3B	; 59
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	eb e3       	ldi	r30, 0x3B	; 59
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_writePin+0x8c>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_writePin+0x88>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	98 c0       	rjmp	.+304    	; 0x189c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    176c:	ab e3       	ldi	r26, 0x3B	; 59
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_writePin+0xb4>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_writePin+0xb0>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	83 c0       	rjmp	.+262    	; 0x189c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	a1 f4       	brne	.+40     	; 0x17c4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_writePin+0xe4>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_writePin+0xe0>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	6c c0       	rjmp	.+216    	; 0x189c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17c4:	a8 e3       	ldi	r26, 0x38	; 56
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 e3       	ldi	r30, 0x38	; 56
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_writePin+0x10c>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_writePin+0x108>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	57 c0       	rjmp	.+174    	; 0x189c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	a1 f4       	brne	.+40     	; 0x181c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17f4:	a5 e3       	ldi	r26, 0x35	; 53
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_writePin+0x13c>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_writePin+0x138>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	40 c0       	rjmp	.+128    	; 0x189c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    181c:	a5 e3       	ldi	r26, 0x35	; 53
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e5 e3       	ldi	r30, 0x35	; 53
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_writePin+0x164>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_writePin+0x160>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	2b c0       	rjmp	.+86     	; 0x189c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	a1 f4       	brne	.+40     	; 0x1874 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    184c:	a2 e3       	ldi	r26, 0x32	; 50
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e2 e3       	ldi	r30, 0x32	; 50
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_writePin+0x194>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_writePin+0x190>
    186e:	84 2b       	or	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	14 c0       	rjmp	.+40     	; 0x189c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1874:	a2 e3       	ldi	r26, 0x32	; 50
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e2 e3       	ldi	r30, 0x32	; 50
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <GPIO_writePin+0x1bc>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <GPIO_writePin+0x1b8>
    1896:	80 95       	com	r24
    1898:	84 23       	and	r24, r20
    189a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <GPIO_readPin+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <GPIO_readPin+0x8>
    18b4:	0f 92       	push	r0
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    18bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    18be:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <GPIO_readPin+0x1c>
    18c6:	84 c0       	rjmp	.+264    	; 0x19d0 <GPIO_readPin+0x124>
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <GPIO_readPin+0x24>
    18ce:	80 c0       	rjmp	.+256    	; 0x19d0 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	4c 81       	ldd	r20, Y+4	; 0x04
    18dc:	5d 81       	ldd	r21, Y+5	; 0x05
    18de:	41 30       	cpi	r20, 0x01	; 1
    18e0:	51 05       	cpc	r21, r1
    18e2:	79 f1       	breq	.+94     	; 0x1942 <GPIO_readPin+0x96>
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	91 05       	cpc	r25, r1
    18ec:	34 f4       	brge	.+12     	; 0x18fa <GPIO_readPin+0x4e>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	21 15       	cp	r18, r1
    18f4:	31 05       	cpc	r19, r1
    18f6:	69 f0       	breq	.+26     	; 0x1912 <GPIO_readPin+0x66>
    18f8:	6b c0       	rjmp	.+214    	; 0x19d0 <GPIO_readPin+0x124>
    18fa:	4c 81       	ldd	r20, Y+4	; 0x04
    18fc:	5d 81       	ldd	r21, Y+5	; 0x05
    18fe:	42 30       	cpi	r20, 0x02	; 2
    1900:	51 05       	cpc	r21, r1
    1902:	b9 f1       	breq	.+110    	; 0x1972 <GPIO_readPin+0xc6>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	83 30       	cpi	r24, 0x03	; 3
    190a:	91 05       	cpc	r25, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <GPIO_readPin+0x64>
    190e:	49 c0       	rjmp	.+146    	; 0x19a2 <GPIO_readPin+0xf6>
    1910:	5f c0       	rjmp	.+190    	; 0x19d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    1912:	e9 e3       	ldi	r30, 0x39	; 57
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <GPIO_readPin+0x7e>
    1926:	55 95       	asr	r21
    1928:	47 95       	ror	r20
    192a:	8a 95       	dec	r24
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <GPIO_readPin+0x7a>
    192e:	ca 01       	movw	r24, r20
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	90 70       	andi	r25, 0x00	; 0
    1934:	88 23       	and	r24, r24
    1936:	19 f0       	breq	.+6      	; 0x193e <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	49 c0       	rjmp	.+146    	; 0x19d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    193e:	19 82       	std	Y+1, r1	; 0x01
    1940:	47 c0       	rjmp	.+142    	; 0x19d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    1942:	e6 e3       	ldi	r30, 0x36	; 54
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a9 01       	movw	r20, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <GPIO_readPin+0xae>
    1956:	55 95       	asr	r21
    1958:	47 95       	ror	r20
    195a:	8a 95       	dec	r24
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <GPIO_readPin+0xaa>
    195e:	ca 01       	movw	r24, r20
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	90 70       	andi	r25, 0x00	; 0
    1964:	88 23       	and	r24, r24
    1966:	19 f0       	breq	.+6      	; 0x196e <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	31 c0       	rjmp	.+98     	; 0x19d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	2f c0       	rjmp	.+94     	; 0x19d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    1972:	e3 e3       	ldi	r30, 0x33	; 51
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_readPin+0xde>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_readPin+0xda>
    198e:	ca 01       	movw	r24, r20
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	88 23       	and	r24, r24
    1996:	19 f0       	breq	.+6      	; 0x199e <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	19 c0       	rjmp	.+50     	; 0x19d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    199e:	19 82       	std	Y+1, r1	; 0x01
    19a0:	17 c0       	rjmp	.+46     	; 0x19d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    19a2:	e0 e3       	ldi	r30, 0x30	; 48
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a9 01       	movw	r20, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_readPin+0x10e>
    19b6:	55 95       	asr	r21
    19b8:	47 95       	ror	r20
    19ba:	8a 95       	dec	r24
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_readPin+0x10a>
    19be:	ca 01       	movw	r24, r20
    19c0:	81 70       	andi	r24, 0x01	; 1
    19c2:	90 70       	andi	r25, 0x00	; 0
    19c4:	88 23       	and	r24, r24
    19c6:	19 f0       	breq	.+6      	; 0x19ce <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    19ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_setupPortDirection+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <GPIO_setupPortDirection+0x8>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	90 f5       	brcc	.+100    	; 0x1a5c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3c 83       	std	Y+4, r19	; 0x04
    1a00:	2b 83       	std	Y+3, r18	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	d1 f0       	breq	.+52     	; 0x1a40 <GPIO_setupPortDirection+0x5e>
    1a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <GPIO_setupPortDirection+0x3e>
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <GPIO_setupPortDirection+0x54>
    1a1e:	1e c0       	rjmp	.+60     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
    1a20:	2b 81       	ldd	r18, Y+3	; 0x03
    1a22:	3c 81       	ldd	r19, Y+4	; 0x04
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	81 f0       	breq	.+32     	; 0x1a4a <GPIO_setupPortDirection+0x68>
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <GPIO_setupPortDirection+0x72>
    1a34:	13 c0       	rjmp	.+38     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a36:	ea e3       	ldi	r30, 0x3A	; 58
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a40:	e7 e3       	ldi	r30, 0x37	; 55
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
    1a48:	09 c0       	rjmp	.+18     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a4a:	e4 e3       	ldi	r30, 0x34	; 52
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a54:	e1 e3       	ldi	r30, 0x31	; 49
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_writePort+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_writePort+0x8>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	84 30       	cpi	r24, 0x04	; 4
    1a7e:	90 f5       	brcc	.+100    	; 0x1ae4 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3c 83       	std	Y+4, r19	; 0x04
    1a88:	2b 83       	std	Y+3, r18	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <GPIO_writePort+0x5e>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <GPIO_writePort+0x3e>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <GPIO_writePort+0x54>
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <GPIO_writePort+0x7a>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <GPIO_writePort+0x68>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <GPIO_writePort+0x72>
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    1abe:	eb e3       	ldi	r30, 0x3B	; 59
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    1ac8:	e8 e3       	ldi	r30, 0x38	; 56
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    1ad2:	e5 e3       	ldi	r30, 0x35	; 53
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    1adc:	e2 e3       	ldi	r30, 0x32	; 50
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <GPIO_readPort+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <GPIO_readPort+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    1b00:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	84 30       	cpi	r24, 0x04	; 4
    1b06:	90 f5       	brcc	.+100    	; 0x1b6c <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3c 83       	std	Y+4, r19	; 0x04
    1b10:	2b 83       	std	Y+3, r18	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	91 05       	cpc	r25, r1
    1b1a:	d1 f0       	breq	.+52     	; 0x1b50 <GPIO_readPort+0x5e>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <GPIO_readPort+0x3e>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <GPIO_readPort+0x54>
    1b2e:	1e c0       	rjmp	.+60     	; 0x1b6c <GPIO_readPort+0x7a>
    1b30:	2b 81       	ldd	r18, Y+3	; 0x03
    1b32:	3c 81       	ldd	r19, Y+4	; 0x04
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	81 f0       	breq	.+32     	; 0x1b5a <GPIO_readPort+0x68>
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	91 05       	cpc	r25, r1
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <GPIO_readPort+0x72>
    1b44:	13 c0       	rjmp	.+38     	; 0x1b6c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    1b46:	e9 e3       	ldi	r30, 0x39	; 57
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	0e c0       	rjmp	.+28     	; 0x1b6c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    1b50:	e6 e3       	ldi	r30, 0x36	; 54
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    1b5a:	e3 e3       	ldi	r30, 0x33	; 51
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    1b64:	e0 e3       	ldi	r30, 0x30	; 48
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <GLI_Enable>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void GLI_Enable(void)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1b84:	af e5       	ldi	r26, 0x5F	; 95
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e5       	ldi	r30, 0x5F	; 95
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 68       	ori	r24, 0x80	; 128
    1b90:	8c 93       	st	X, r24
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <GLI_Disable>:

void GLI_Disable(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,7);
    1ba0:	af e5       	ldi	r26, 0x5F	; 95
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	ef e5       	ldi	r30, 0x5F	; 95
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8f 77       	andi	r24, 0x7F	; 127
    1bac:	8c 93       	st	X, r24
}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <ADC_init>:
#include "adc.h"
#include "avr/io.h"
#include "../../LIB/common_macros.h"

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <ADC_init+0x6>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	/* Initially set the registers with zeros so we can insert their values as we want */
	ADMUX = 0;
    1bc2:	e7 e2       	ldi	r30, 0x27	; 39
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	10 82       	st	Z, r1
	ADCSRA = 0;
    1bc8:	e6 e2       	ldi	r30, 0x26	; 38
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	10 82       	st	Z, r1

	 /* left shift the value by 6 so we can insert it in the right place at REFS0 and REFS1 */
	ADMUX |= ( (Config_Ptr->ref_volt) << 6 ) ;
    1bce:	a7 e2       	ldi	r26, 0x27	; 39
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e7 e2       	ldi	r30, 0x27	; 39
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	80 81       	ld	r24, Z
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	00 24       	eor	r0, r0
    1be6:	96 95       	lsr	r25
    1be8:	87 95       	ror	r24
    1bea:	07 94       	ror	r0
    1bec:	96 95       	lsr	r25
    1bee:	87 95       	ror	r24
    1bf0:	07 94       	ror	r0
    1bf2:	98 2f       	mov	r25, r24
    1bf4:	80 2d       	mov	r24, r0
    1bf6:	82 2b       	or	r24, r18
    1bf8:	8c 93       	st	X, r24

	/* same as the last step but this time ADPSX bits are the first 3 bits so no need to shift */
	ADCSRA |= (Config_Ptr->prescaler) ;
    1bfa:	a6 e2       	ldi	r26, 0x26	; 38
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e6 e2       	ldi	r30, 0x26	; 38
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	90 81       	ld	r25, Z
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	81 81       	ldd	r24, Z+1	; 0x01
    1c0a:	89 2b       	or	r24, r25
    1c0c:	8c 93       	st	X, r24

	/* Enable the ADC */
	SET_BIT(ADCSRA,ADEN);
    1c0e:	a6 e2       	ldi	r26, 0x26	; 38
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e6 e2       	ldi	r30, 0x26	; 38
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	8c 93       	st	X, r24
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	89 83       	std	Y+1, r24	; 0x01
	/* clear the previous channel and insert the new one in only 3 bits ( 8 channels ) " */
	ADMUX = (ADMUX & ADC_CHANNEL_CLEAR_MASK) | (channel & 0x07) ;
    1c32:	a7 e2       	ldi	r26, 0x27	; 39
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e7 e2       	ldi	r30, 0x27	; 39
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	90 7e       	andi	r25, 0xE0	; 224
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	87 70       	andi	r24, 0x07	; 7
    1c44:	89 2b       	or	r24, r25
    1c46:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA,ADSC);
    1c48:	a6 e2       	ldi	r26, 0x26	; 38
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e6 e2       	ldi	r30, 0x26	; 38
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	8c 93       	st	X, r24

	/* wait the ADC o/p with polling method */
	while(BIT_IS_CLEAR(ADCSRA,ADIF)){}
    1c56:	e6 e2       	ldi	r30, 0x26	; 38
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	80 71       	andi	r24, 0x10	; 16
    1c62:	90 70       	andi	r25, 0x00	; 0
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	b9 f3       	breq	.-18     	; 0x1c56 <ADC_readChannel+0x30>

	/* clearing ADC flag */
	SET_BIT(ADCSRA,ADIF);
    1c68:	a6 e2       	ldi	r26, 0x26	; 38
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e6 e2       	ldi	r30, 0x26	; 38
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	80 61       	ori	r24, 0x10	; 16
    1c74:	8c 93       	st	X, r24

	return ADC;
    1c76:	e4 e2       	ldi	r30, 0x24	; 36
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <SEVEN_SEGMENT_init>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

void SEVEN_SEGMENT_init(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	/* Enable bit is output */
	GPIO_setupPinDirection(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, PIN_OUTPUT);
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	66 e0       	ldi	r22, 0x06	; 6
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	/* Seven segment pins is output */
	for(uint8 counter = 0 ; counter < SEVEN_SEGMENT_DECODER ; counter++)
    1c9a:	19 82       	std	Y+1, r1	; 0x01
    1c9c:	0b c0       	rjmp	.+22     	; 0x1cb4 <SEVEN_SEGMENT_init+0x2e>
	{
		GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID, SEVEN_SEGMENT_FIRST_PIN_ID+counter, PIN_OUTPUT);
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	9f 5f       	subi	r25, 0xFF	; 255
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	69 2f       	mov	r22, r25
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
{
	/* Enable bit is output */
	GPIO_setupPinDirection(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, PIN_OUTPUT);

	/* Seven segment pins is output */
	for(uint8 counter = 0 ; counter < SEVEN_SEGMENT_DECODER ; counter++)
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	8f 5f       	subi	r24, 0xFF	; 255
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	87 30       	cpi	r24, 0x07	; 7
    1cb8:	90 f3       	brcs	.-28     	; 0x1c9e <SEVEN_SEGMENT_init+0x18>
	{
		GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID, SEVEN_SEGMENT_FIRST_PIN_ID+counter, PIN_OUTPUT);
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <SEVEN_SEGMENT_enable>:

void SEVEN_SEGMENT_enable(void)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	#if (SEVEN_SEGMENT_TYPE == ANODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_HIGH);
	#elif (SEVEN_SEGMENT_TYPE == CATHODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_LOW);
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	66 e0       	ldi	r22, 0x06	; 6
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	#endif
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <SEVEN_SEGMENT_disable>:

void SEVEN_SEGMENT_disable(void)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	#if (SEVEN_SEGMENT_TYPE == ANODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_LOW);
	#elif (SEVEN_SEGMENT_TYPE == CATHODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_HIGH);
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	66 e0       	ldi	r22, 0x06	; 6
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	#endif
}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <SEVEN_SEGMENT_displayNumber>:

void SEVEN_SEGMENT_displayNumber(uint8 number)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	89 83       	std	Y+1, r24	; 0x01
		#if (SEVEN_SEGMENT_TYPE == ANODE)
			SEVEN_SEGMENT_ANODE(number);

		/* No decoder --> Cathode 7 Segment */
		#elif (SEVEN_SEGMENT_TYPE == CATHODE)
			SEVEN_SEGMENT_CATHODE(number);
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <SEVEN_SEGMENT_CATHODE>

		#endif /* ANODE or CATHODE condition */

	#endif /* With Decoder or Without condition */
}
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <SEVEN_SEGMENT_CATHODE>:
#if (SEVEN_SEGMENT_DECODER == WITHOUT_BCD_DECODER)

#if (SEVEN_SEGMENT_TYPE == CATHODE)

static void SEVEN_SEGMENT_CATHODE(uint8 number)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <SEVEN_SEGMENT_CATHODE+0x6>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	89 83       	std	Y+1, r24	; 0x01

	switch(number)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3b 83       	std	Y+3, r19	; 0x03
    1d22:	2a 83       	std	Y+2, r18	; 0x02
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <SEVEN_SEGMENT_CATHODE+0x24>
    1d2e:	0f c1       	rjmp	.+542    	; 0x1f4e <SEVEN_SEGMENT_CATHODE+0x242>
    1d30:	2a 81       	ldd	r18, Y+2	; 0x02
    1d32:	3b 81       	ldd	r19, Y+3	; 0x03
    1d34:	25 30       	cpi	r18, 0x05	; 5
    1d36:	31 05       	cpc	r19, r1
    1d38:	ec f4       	brge	.+58     	; 0x1d74 <SEVEN_SEGMENT_CATHODE+0x68>
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <SEVEN_SEGMENT_CATHODE+0x3a>
    1d44:	6e c0       	rjmp	.+220    	; 0x1e22 <SEVEN_SEGMENT_CATHODE+0x116>
    1d46:	2a 81       	ldd	r18, Y+2	; 0x02
    1d48:	3b 81       	ldd	r19, Y+3	; 0x03
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <SEVEN_SEGMENT_CATHODE+0x4e>
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	99 f1       	breq	.+102    	; 0x1dbe <SEVEN_SEGMENT_CATHODE+0xb2>
    1d58:	25 c2       	rjmp	.+1098   	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
    1d5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <SEVEN_SEGMENT_CATHODE+0x5a>
    1d64:	90 c0       	rjmp	.+288    	; 0x1e86 <SEVEN_SEGMENT_CATHODE+0x17a>
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <SEVEN_SEGMENT_CATHODE+0x66>
    1d70:	bc c0       	rjmp	.+376    	; 0x1eea <SEVEN_SEGMENT_CATHODE+0x1de>
    1d72:	18 c2       	rjmp	.+1072   	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
    1d74:	2a 81       	ldd	r18, Y+2	; 0x02
    1d76:	3b 81       	ldd	r19, Y+3	; 0x03
    1d78:	27 30       	cpi	r18, 0x07	; 7
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <SEVEN_SEGMENT_CATHODE+0x74>
    1d7e:	7d c1       	rjmp	.+762    	; 0x207a <SEVEN_SEGMENT_CATHODE+0x36e>
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	88 30       	cpi	r24, 0x08	; 8
    1d86:	91 05       	cpc	r25, r1
    1d88:	6c f4       	brge	.+26     	; 0x1da4 <SEVEN_SEGMENT_CATHODE+0x98>
    1d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8e:	25 30       	cpi	r18, 0x05	; 5
    1d90:	31 05       	cpc	r19, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <SEVEN_SEGMENT_CATHODE+0x8a>
    1d94:	0e c1       	rjmp	.+540    	; 0x1fb2 <SEVEN_SEGMENT_CATHODE+0x2a6>
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	86 30       	cpi	r24, 0x06	; 6
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <SEVEN_SEGMENT_CATHODE+0x96>
    1da0:	3a c1       	rjmp	.+628    	; 0x2016 <SEVEN_SEGMENT_CATHODE+0x30a>
    1da2:	00 c2       	rjmp	.+1024   	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
    1da4:	2a 81       	ldd	r18, Y+2	; 0x02
    1da6:	3b 81       	ldd	r19, Y+3	; 0x03
    1da8:	28 30       	cpi	r18, 0x08	; 8
    1daa:	31 05       	cpc	r19, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <SEVEN_SEGMENT_CATHODE+0xa4>
    1dae:	97 c1       	rjmp	.+814    	; 0x20de <SEVEN_SEGMENT_CATHODE+0x3d2>
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	89 30       	cpi	r24, 0x09	; 9
    1db6:	91 05       	cpc	r25, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <SEVEN_SEGMENT_CATHODE+0xb0>
    1dba:	c3 c1       	rjmp	.+902    	; 0x2142 <SEVEN_SEGMENT_CATHODE+0x436>
    1dbc:	f3 c1       	rjmp	.+998    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
	{
	case 0:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1dbe:	ab e3       	ldi	r26, 0x3B	; 59
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	eb e3       	ldi	r30, 0x3B	; 59
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	82 60       	ori	r24, 0x02	; 2
    1dca:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	84 60       	ori	r24, 0x04	; 4
    1dd8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1dda:	ab e3       	ldi	r26, 0x3B	; 59
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	eb e3       	ldi	r30, 0x3B	; 59
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	88 60       	ori	r24, 0x08	; 8
    1de6:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1de8:	ab e3       	ldi	r26, 0x3B	; 59
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	eb e3       	ldi	r30, 0x3B	; 59
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	80 61       	ori	r24, 0x10	; 16
    1df4:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1df6:	ab e3       	ldi	r26, 0x3B	; 59
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	eb e3       	ldi	r30, 0x3B	; 59
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	80 62       	ori	r24, 0x20	; 32
    1e02:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1e04:	ab e3       	ldi	r26, 0x3B	; 59
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	eb e3       	ldi	r30, 0x3B	; 59
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 64       	ori	r24, 0x40	; 64
    1e10:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1e12:	ab e3       	ldi	r26, 0x3B	; 59
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	eb e3       	ldi	r30, 0x3B	; 59
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 77       	andi	r24, 0x7F	; 127
    1e1e:	8c 93       	st	X, r24
    1e20:	c1 c1       	rjmp	.+898    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 1:
		MYPORT &= ~(1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1e22:	ab e3       	ldi	r26, 0x3B	; 59
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	eb e3       	ldi	r30, 0x3B	; 59
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8d 7f       	andi	r24, 0xFD	; 253
    1e2e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1e30:	ab e3       	ldi	r26, 0x3B	; 59
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	eb e3       	ldi	r30, 0x3B	; 59
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	84 60       	ori	r24, 0x04	; 4
    1e3c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1e3e:	ab e3       	ldi	r26, 0x3B	; 59
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	eb e3       	ldi	r30, 0x3B	; 59
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	88 60       	ori	r24, 0x08	; 8
    1e4a:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1e4c:	ab e3       	ldi	r26, 0x3B	; 59
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e3       	ldi	r30, 0x3B	; 59
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8f 7e       	andi	r24, 0xEF	; 239
    1e58:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1e5a:	ab e3       	ldi	r26, 0x3B	; 59
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	eb e3       	ldi	r30, 0x3B	; 59
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7d       	andi	r24, 0xDF	; 223
    1e66:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1e68:	ab e3       	ldi	r26, 0x3B	; 59
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	eb e3       	ldi	r30, 0x3B	; 59
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8f 7b       	andi	r24, 0xBF	; 191
    1e74:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1e76:	ab e3       	ldi	r26, 0x3B	; 59
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	eb e3       	ldi	r30, 0x3B	; 59
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 77       	andi	r24, 0x7F	; 127
    1e82:	8c 93       	st	X, r24
    1e84:	8f c1       	rjmp	.+798    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 2:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1e86:	ab e3       	ldi	r26, 0x3B	; 59
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	eb e3       	ldi	r30, 0x3B	; 59
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	82 60       	ori	r24, 0x02	; 2
    1e92:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1e94:	ab e3       	ldi	r26, 0x3B	; 59
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	eb e3       	ldi	r30, 0x3B	; 59
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	84 60       	ori	r24, 0x04	; 4
    1ea0:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1ea2:	ab e3       	ldi	r26, 0x3B	; 59
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	eb e3       	ldi	r30, 0x3B	; 59
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	87 7f       	andi	r24, 0xF7	; 247
    1eae:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1eb0:	ab e3       	ldi	r26, 0x3B	; 59
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	eb e3       	ldi	r30, 0x3B	; 59
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 61       	ori	r24, 0x10	; 16
    1ebc:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1ebe:	ab e3       	ldi	r26, 0x3B	; 59
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	eb e3       	ldi	r30, 0x3B	; 59
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 62       	ori	r24, 0x20	; 32
    1eca:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1ecc:	ab e3       	ldi	r26, 0x3B	; 59
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8f 7b       	andi	r24, 0xBF	; 191
    1ed8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1eda:	ab e3       	ldi	r26, 0x3B	; 59
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	eb e3       	ldi	r30, 0x3B	; 59
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 68       	ori	r24, 0x80	; 128
    1ee6:	8c 93       	st	X, r24
    1ee8:	5d c1       	rjmp	.+698    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 3:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1eea:	ab e3       	ldi	r26, 0x3B	; 59
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e3       	ldi	r30, 0x3B	; 59
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1ef8:	ab e3       	ldi	r26, 0x3B	; 59
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	eb e3       	ldi	r30, 0x3B	; 59
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	84 60       	ori	r24, 0x04	; 4
    1f04:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1f06:	ab e3       	ldi	r26, 0x3B	; 59
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	eb e3       	ldi	r30, 0x3B	; 59
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	88 60       	ori	r24, 0x08	; 8
    1f12:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1f14:	ab e3       	ldi	r26, 0x3B	; 59
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	eb e3       	ldi	r30, 0x3B	; 59
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 61       	ori	r24, 0x10	; 16
    1f20:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1f22:	ab e3       	ldi	r26, 0x3B	; 59
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	eb e3       	ldi	r30, 0x3B	; 59
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8f 7d       	andi	r24, 0xDF	; 223
    1f2e:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1f30:	ab e3       	ldi	r26, 0x3B	; 59
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	eb e3       	ldi	r30, 0x3B	; 59
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 7b       	andi	r24, 0xBF	; 191
    1f3c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1f3e:	ab e3       	ldi	r26, 0x3B	; 59
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	eb e3       	ldi	r30, 0x3B	; 59
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	80 68       	ori	r24, 0x80	; 128
    1f4a:	8c 93       	st	X, r24
    1f4c:	2b c1       	rjmp	.+598    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 4:
		MYPORT &= ~(1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1f4e:	ab e3       	ldi	r26, 0x3B	; 59
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	eb e3       	ldi	r30, 0x3B	; 59
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8d 7f       	andi	r24, 0xFD	; 253
    1f5a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1f5c:	ab e3       	ldi	r26, 0x3B	; 59
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	eb e3       	ldi	r30, 0x3B	; 59
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	84 60       	ori	r24, 0x04	; 4
    1f68:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1f6a:	ab e3       	ldi	r26, 0x3B	; 59
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	eb e3       	ldi	r30, 0x3B	; 59
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	88 60       	ori	r24, 0x08	; 8
    1f76:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1f78:	ab e3       	ldi	r26, 0x3B	; 59
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	eb e3       	ldi	r30, 0x3B	; 59
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8f 7e       	andi	r24, 0xEF	; 239
    1f84:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1f86:	ab e3       	ldi	r26, 0x3B	; 59
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	eb e3       	ldi	r30, 0x3B	; 59
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	8f 7d       	andi	r24, 0xDF	; 223
    1f92:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1f94:	ab e3       	ldi	r26, 0x3B	; 59
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	eb e3       	ldi	r30, 0x3B	; 59
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	80 64       	ori	r24, 0x40	; 64
    1fa0:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1fa2:	ab e3       	ldi	r26, 0x3B	; 59
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	eb e3       	ldi	r30, 0x3B	; 59
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	8c 93       	st	X, r24
    1fb0:	f9 c0       	rjmp	.+498    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 5:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1fb2:	ab e3       	ldi	r26, 0x3B	; 59
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	eb e3       	ldi	r30, 0x3B	; 59
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	82 60       	ori	r24, 0x02	; 2
    1fbe:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1fc0:	ab e3       	ldi	r26, 0x3B	; 59
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	eb e3       	ldi	r30, 0x3B	; 59
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8b 7f       	andi	r24, 0xFB	; 251
    1fcc:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1fce:	ab e3       	ldi	r26, 0x3B	; 59
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	eb e3       	ldi	r30, 0x3B	; 59
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	88 60       	ori	r24, 0x08	; 8
    1fda:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1fdc:	ab e3       	ldi	r26, 0x3B	; 59
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	eb e3       	ldi	r30, 0x3B	; 59
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 61       	ori	r24, 0x10	; 16
    1fe8:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1fea:	ab e3       	ldi	r26, 0x3B	; 59
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	eb e3       	ldi	r30, 0x3B	; 59
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 7d       	andi	r24, 0xDF	; 223
    1ff6:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1ff8:	ab e3       	ldi	r26, 0x3B	; 59
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	eb e3       	ldi	r30, 0x3B	; 59
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	80 64       	ori	r24, 0x40	; 64
    2004:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	8c 93       	st	X, r24
    2014:	c7 c0       	rjmp	.+398    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 6:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    2016:	ab e3       	ldi	r26, 0x3B	; 59
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	eb e3       	ldi	r30, 0x3B	; 59
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	82 60       	ori	r24, 0x02	; 2
    2022:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    2024:	ab e3       	ldi	r26, 0x3B	; 59
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	eb e3       	ldi	r30, 0x3B	; 59
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8b 7f       	andi	r24, 0xFB	; 251
    2030:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    2032:	ab e3       	ldi	r26, 0x3B	; 59
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	eb e3       	ldi	r30, 0x3B	; 59
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	88 60       	ori	r24, 0x08	; 8
    203e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    2040:	ab e3       	ldi	r26, 0x3B	; 59
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 61       	ori	r24, 0x10	; 16
    204c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    204e:	ab e3       	ldi	r26, 0x3B	; 59
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	eb e3       	ldi	r30, 0x3B	; 59
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	80 62       	ori	r24, 0x20	; 32
    205a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    205c:	ab e3       	ldi	r26, 0x3B	; 59
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e3       	ldi	r30, 0x3B	; 59
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 64       	ori	r24, 0x40	; 64
    2068:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    206a:	ab e3       	ldi	r26, 0x3B	; 59
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb e3       	ldi	r30, 0x3B	; 59
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 68       	ori	r24, 0x80	; 128
    2076:	8c 93       	st	X, r24
    2078:	95 c0       	rjmp	.+298    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 7:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    207a:	ab e3       	ldi	r26, 0x3B	; 59
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	eb e3       	ldi	r30, 0x3B	; 59
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	82 60       	ori	r24, 0x02	; 2
    2086:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    2088:	ab e3       	ldi	r26, 0x3B	; 59
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	eb e3       	ldi	r30, 0x3B	; 59
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	84 60       	ori	r24, 0x04	; 4
    2094:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    2096:	ab e3       	ldi	r26, 0x3B	; 59
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	eb e3       	ldi	r30, 0x3B	; 59
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	88 60       	ori	r24, 0x08	; 8
    20a2:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    20a4:	ab e3       	ldi	r26, 0x3B	; 59
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	eb e3       	ldi	r30, 0x3B	; 59
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8f 7e       	andi	r24, 0xEF	; 239
    20b0:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    20b2:	ab e3       	ldi	r26, 0x3B	; 59
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e3       	ldi	r30, 0x3B	; 59
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8f 7d       	andi	r24, 0xDF	; 223
    20be:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    20c0:	ab e3       	ldi	r26, 0x3B	; 59
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7b       	andi	r24, 0xBF	; 191
    20cc:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    20ce:	ab e3       	ldi	r26, 0x3B	; 59
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	eb e3       	ldi	r30, 0x3B	; 59
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8f 77       	andi	r24, 0x7F	; 127
    20da:	8c 93       	st	X, r24
    20dc:	63 c0       	rjmp	.+198    	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 8:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    20de:	ab e3       	ldi	r26, 0x3B	; 59
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	eb e3       	ldi	r30, 0x3B	; 59
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	82 60       	ori	r24, 0x02	; 2
    20ea:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    20ec:	ab e3       	ldi	r26, 0x3B	; 59
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	eb e3       	ldi	r30, 0x3B	; 59
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	84 60       	ori	r24, 0x04	; 4
    20f8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    20fa:	ab e3       	ldi	r26, 0x3B	; 59
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e3       	ldi	r30, 0x3B	; 59
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 60       	ori	r24, 0x08	; 8
    2106:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    2108:	ab e3       	ldi	r26, 0x3B	; 59
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	eb e3       	ldi	r30, 0x3B	; 59
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 61       	ori	r24, 0x10	; 16
    2114:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    2116:	ab e3       	ldi	r26, 0x3B	; 59
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	eb e3       	ldi	r30, 0x3B	; 59
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    2124:	ab e3       	ldi	r26, 0x3B	; 59
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	eb e3       	ldi	r30, 0x3B	; 59
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 64       	ori	r24, 0x40	; 64
    2130:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    2132:	ab e3       	ldi	r26, 0x3B	; 59
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	eb e3       	ldi	r30, 0x3B	; 59
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	80 68       	ori	r24, 0x80	; 128
    213e:	8c 93       	st	X, r24
    2140:	31 c0       	rjmp	.+98     	; 0x21a4 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 9:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    2142:	ab e3       	ldi	r26, 0x3B	; 59
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	eb e3       	ldi	r30, 0x3B	; 59
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	82 60       	ori	r24, 0x02	; 2
    214e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    2150:	ab e3       	ldi	r26, 0x3B	; 59
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	eb e3       	ldi	r30, 0x3B	; 59
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	84 60       	ori	r24, 0x04	; 4
    215c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    215e:	ab e3       	ldi	r26, 0x3B	; 59
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e3       	ldi	r30, 0x3B	; 59
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	88 60       	ori	r24, 0x08	; 8
    216a:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    216c:	ab e3       	ldi	r26, 0x3B	; 59
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	eb e3       	ldi	r30, 0x3B	; 59
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	8f 7e       	andi	r24, 0xEF	; 239
    2178:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    217a:	ab e3       	ldi	r26, 0x3B	; 59
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	eb e3       	ldi	r30, 0x3B	; 59
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	8f 7d       	andi	r24, 0xDF	; 223
    2186:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    2188:	ab e3       	ldi	r26, 0x3B	; 59
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	eb e3       	ldi	r30, 0x3B	; 59
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 64       	ori	r24, 0x40	; 64
    2194:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    2196:	ab e3       	ldi	r26, 0x3B	; 59
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	eb e3       	ldi	r30, 0x3B	; 59
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 68       	ori	r24, 0x80	; 128
    21a2:	8c 93       	st	X, r24
		break;
	}
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <DcMotor_Init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/PWM0/pwm0.h"


void DcMotor_Init(void)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, PIN_OUTPUT); /* Input1 */
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, PIN_OUTPUT); /* Inupt2 */
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <DcMotor_Rotate+0x6>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	6a 83       	std	Y+2, r22	; 0x02
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, GET_BIT(state,0));
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	98 2f       	mov	r25, r24
    220c:	91 70       	andi	r25, 0x01	; 1
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	49 2f       	mov	r20, r25
    2214:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, GET_BIT(state,1));
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	86 95       	lsr	r24
    221c:	98 2f       	mov	r25, r24
    221e:	91 70       	andi	r25, 0x01	; 1
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	49 2f       	mov	r20, r25
    2226:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>

	PWM_Timer0_Start(speed);
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <PWM_Timer0_Start>
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <LM35_getTemperature>:
#include "lm35_sensor.h"
#include "../../MCAL/ADC/adc.h"


uint8 LM35_getTemperature(void)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	00 d0       	rcall	.+0      	; 0x2240 <LM35_getTemperature+0x6>
    2240:	0f 92       	push	r0
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	uint8 lm35_value;

	uint16 adc_value;

	adc_value = ADC_readChannel(LM35_CHANNEL_ID);
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <ADC_readChannel>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01

	lm35_value = (uint8)(((uint32)adc_value*ADC_REF_VOLT_VALUE*LM35_MAX_TEMPERATURE)/(ADC_MAXIMUM_VALUE*LM35_MAX_VOLT_VALUE));
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	cc 01       	movw	r24, r24
    2256:	a0 e0       	ldi	r26, 0x00	; 0
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	2e ee       	ldi	r18, 0xEE	; 238
    225c:	32 e0       	ldi	r19, 0x02	; 2
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__mulsi3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 ed       	ldi	r19, 0xD0	; 208
    2282:	4f eb       	ldi	r20, 0xBF	; 191
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8b 83       	std	Y+3, r24	; 0x03

	return lm35_value;
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	2e 97       	sbiw	r28, 0x0e	; 14
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	61 e0       	ldi	r22, 0x01	; 1
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 ea       	ldi	r26, 0xA0	; 160
    22d8:	b1 e4       	ldi	r27, 0x41	; 65
    22da:	8b 87       	std	Y+11, r24	; 0x0b
    22dc:	9c 87       	std	Y+12, r25	; 0x0c
    22de:	ad 87       	std	Y+13, r26	; 0x0d
    22e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a e7       	ldi	r20, 0x7A	; 122
    22f0:	55 e4       	ldi	r21, 0x45	; 69
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	8f 83       	std	Y+7, r24	; 0x07
    22fc:	98 87       	std	Y+8, r25	; 0x08
    22fe:	a9 87       	std	Y+9, r26	; 0x09
    2300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2302:	6f 81       	ldd	r22, Y+7	; 0x07
    2304:	78 85       	ldd	r23, Y+8	; 0x08
    2306:	89 85       	ldd	r24, Y+9	; 0x09
    2308:	9a 85       	ldd	r25, Y+10	; 0x0a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	2c f4       	brge	.+10     	; 0x2324 <LCD_init+0x7a>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	3f c0       	rjmp	.+126    	; 0x23a2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2324:	6f 81       	ldd	r22, Y+7	; 0x07
    2326:	78 85       	ldd	r23, Y+8	; 0x08
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	3f ef       	ldi	r19, 0xFF	; 255
    2330:	4f e7       	ldi	r20, 0x7F	; 127
    2332:	57 e4       	ldi	r21, 0x47	; 71
    2334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2338:	18 16       	cp	r1, r24
    233a:	4c f5       	brge	.+82     	; 0x238e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	0f c0       	rjmp	.+30     	; 0x2384 <LCD_init+0xda>
    2366:	80 e9       	ldi	r24, 0x90	; 144
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	9c 83       	std	Y+4, r25	; 0x04
    236c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <LCD_init+0xc8>
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	69 f7       	brne	.-38     	; 0x2366 <LCD_init+0xbc>
    238c:	14 c0       	rjmp	.+40     	; 0x23b6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_init+0x104>
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	63 e0       	ldi	r22, 0x03	; 3
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	65 e0       	ldi	r22, 0x05	; 5
    23ce:	41 e0       	ldi	r20, 0x01	; 1
    23d0:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	66 e0       	ldi	r22, 0x06	; 6
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    23de:	83 e3       	ldi	r24, 0x33	; 51
    23e0:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    23e4:	82 e3       	ldi	r24, 0x32	; 50
    23e6:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    23ea:	88 e2       	ldi	r24, 0x28	; 40
    23ec:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    23f0:	8c e0       	ldi	r24, 0x0C	; 12
    23f2:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>
}
    23fc:	2e 96       	adiw	r28, 0x0e	; 14
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	c3 56       	subi	r28, 0x63	; 99
    241c:	d0 40       	sbci	r29, 0x00	; 0
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	fe 01       	movw	r30, r28
    242a:	ed 59       	subi	r30, 0x9D	; 157
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    243a:	fe 01       	movw	r30, r28
    243c:	e1 5a       	subi	r30, 0xA1	; 161
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 e8       	ldi	r26, 0x80	; 128
    2446:	bf e3       	ldi	r27, 0x3F	; 63
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	8e 01       	movw	r16, r28
    2452:	05 5a       	subi	r16, 0xA5	; 165
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	e1 5a       	subi	r30, 0xA1	; 161
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	55 e4       	ldi	r21, 0x45	; 69
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	f8 01       	movw	r30, r16
    2476:	80 83       	st	Z, r24
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	a2 83       	std	Z+2, r26	; 0x02
    247c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247e:	fe 01       	movw	r30, r28
    2480:	e5 5a       	subi	r30, 0xA5	; 165
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	44 f4       	brge	.+16     	; 0x24ac <LCD_sendCommand+0x9e>
		__ticks = 1;
    249c:	fe 01       	movw	r30, r28
    249e:	e7 5a       	subi	r30, 0xA7	; 167
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	64 c0       	rjmp	.+200    	; 0x2574 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e5 5a       	subi	r30, 0xA5	; 165
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <LCD_sendCommand+0xbe>
    24ca:	43 c0       	rjmp	.+134    	; 0x2552 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	fe 01       	movw	r30, r28
    24ce:	e1 5a       	subi	r30, 0xA1	; 161
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8e 01       	movw	r16, r28
    24ec:	07 5a       	subi	r16, 0xA7	; 167
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	1f c0       	rjmp	.+62     	; 0x2542 <LCD_sendCommand+0x134>
    2504:	fe 01       	movw	r30, r28
    2506:	e9 5a       	subi	r30, 0xA9	; 169
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 e9       	ldi	r24, 0x90	; 144
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	fe 01       	movw	r30, r28
    2514:	e9 5a       	subi	r30, 0xA9	; 169
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_sendCommand+0x10e>
    2520:	fe 01       	movw	r30, r28
    2522:	e9 5a       	subi	r30, 0xA9	; 169
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	de 01       	movw	r26, r28
    252c:	a7 5a       	subi	r26, 0xA7	; 167
    252e:	bf 4f       	sbci	r27, 0xFF	; 255
    2530:	fe 01       	movw	r30, r28
    2532:	e7 5a       	subi	r30, 0xA7	; 167
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	9c 93       	st	X, r25
    2540:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	fe 01       	movw	r30, r28
    2544:	e7 5a       	subi	r30, 0xA7	; 167
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	d1 f6       	brne	.-76     	; 0x2504 <LCD_sendCommand+0xf6>
    2550:	27 c0       	rjmp	.+78     	; 0x25a0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	8e 01       	movw	r16, r28
    2554:	07 5a       	subi	r16, 0xA7	; 167
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	e5 5a       	subi	r30, 0xA5	; 165
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	f8 01       	movw	r30, r16
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	de 01       	movw	r26, r28
    2576:	ab 5a       	subi	r26, 0xAB	; 171
    2578:	bf 4f       	sbci	r27, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	e7 5a       	subi	r30, 0xA7	; 167
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	8d 93       	st	X+, r24
    2586:	9c 93       	st	X, r25
    2588:	fe 01       	movw	r30, r28
    258a:	eb 5a       	subi	r30, 0xAB	; 171
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_sendCommand+0x184>
    2596:	fe 01       	movw	r30, r28
    2598:	eb 5a       	subi	r30, 0xAB	; 171
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 5a       	subi	r30, 0xAF	; 175
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e8       	ldi	r26, 0x80	; 128
    25b6:	bf e3       	ldi	r27, 0x3F	; 63
    25b8:	80 83       	st	Z, r24
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	a2 83       	std	Z+2, r26	; 0x02
    25be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	8e 01       	movw	r16, r28
    25c2:	03 5b       	subi	r16, 0xB3	; 179
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 5a       	subi	r30, 0xAF	; 175
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a e7       	ldi	r20, 0x7A	; 122
    25da:	55 e4       	ldi	r21, 0x45	; 69
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	f8 01       	movw	r30, r16
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ee:	fe 01       	movw	r30, r28
    25f0:	e3 5b       	subi	r30, 0xB3	; 179
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	44 f4       	brge	.+16     	; 0x261c <LCD_sendCommand+0x20e>
		__ticks = 1;
    260c:	fe 01       	movw	r30, r28
    260e:	e5 5b       	subi	r30, 0xB5	; 181
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    261a:	64 c0       	rjmp	.+200    	; 0x26e4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    261c:	fe 01       	movw	r30, r28
    261e:	e3 5b       	subi	r30, 0xB3	; 179
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	0c f0       	brlt	.+2      	; 0x263c <LCD_sendCommand+0x22e>
    263a:	43 c0       	rjmp	.+134    	; 0x26c2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	fe 01       	movw	r30, r28
    263e:	ef 5a       	subi	r30, 0xAF	; 175
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8e 01       	movw	r16, r28
    265c:	05 5b       	subi	r16, 0xB5	; 181
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	f8 01       	movw	r30, r16
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	1f c0       	rjmp	.+62     	; 0x26b2 <LCD_sendCommand+0x2a4>
    2674:	fe 01       	movw	r30, r28
    2676:	e7 5b       	subi	r30, 0xB7	; 183
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 e9       	ldi	r24, 0x90	; 144
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	80 83       	st	Z, r24
    2682:	fe 01       	movw	r30, r28
    2684:	e7 5b       	subi	r30, 0xB7	; 183
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_sendCommand+0x27e>
    2690:	fe 01       	movw	r30, r28
    2692:	e7 5b       	subi	r30, 0xB7	; 183
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	de 01       	movw	r26, r28
    269c:	a5 5b       	subi	r26, 0xB5	; 181
    269e:	bf 4f       	sbci	r27, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e5 5b       	subi	r30, 0xB5	; 181
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	11 96       	adiw	r26, 0x01	; 1
    26ae:	9c 93       	st	X, r25
    26b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	fe 01       	movw	r30, r28
    26b4:	e5 5b       	subi	r30, 0xB5	; 181
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	d1 f6       	brne	.-76     	; 0x2674 <LCD_sendCommand+0x266>
    26c0:	27 c0       	rjmp	.+78     	; 0x2710 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	8e 01       	movw	r16, r28
    26c4:	05 5b       	subi	r16, 0xB5	; 181
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	e3 5b       	subi	r30, 0xB3	; 179
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	de 01       	movw	r26, r28
    26e6:	a9 5b       	subi	r26, 0xB9	; 185
    26e8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e5 5b       	subi	r30, 0xB5	; 181
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	8d 93       	st	X+, r24
    26f6:	9c 93       	st	X, r25
    26f8:	fe 01       	movw	r30, r28
    26fa:	e9 5b       	subi	r30, 0xB9	; 185
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_sendCommand+0x2f4>
    2706:	fe 01       	movw	r30, r28
    2708:	e9 5b       	subi	r30, 0xB9	; 185
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,4));
    2710:	fe 01       	movw	r30, r28
    2712:	ed 59       	subi	r30, 0x9D	; 157
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	82 95       	swap	r24
    271a:	8f 70       	andi	r24, 0x0F	; 15
    271c:	98 2f       	mov	r25, r24
    271e:	91 70       	andi	r25, 0x01	; 1
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	63 e0       	ldi	r22, 0x03	; 3
    2724:	49 2f       	mov	r20, r25
    2726:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,5));
    272a:	fe 01       	movw	r30, r28
    272c:	ed 59       	subi	r30, 0x9D	; 157
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	82 95       	swap	r24
    2734:	86 95       	lsr	r24
    2736:	87 70       	andi	r24, 0x07	; 7
    2738:	98 2f       	mov	r25, r24
    273a:	91 70       	andi	r25, 0x01	; 1
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	64 e0       	ldi	r22, 0x04	; 4
    2740:	49 2f       	mov	r20, r25
    2742:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,6));
    2746:	fe 01       	movw	r30, r28
    2748:	ed 59       	subi	r30, 0x9D	; 157
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	82 95       	swap	r24
    2750:	86 95       	lsr	r24
    2752:	86 95       	lsr	r24
    2754:	83 70       	andi	r24, 0x03	; 3
    2756:	98 2f       	mov	r25, r24
    2758:	91 70       	andi	r25, 0x01	; 1
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	65 e0       	ldi	r22, 0x05	; 5
    275e:	49 2f       	mov	r20, r25
    2760:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,7));
    2764:	fe 01       	movw	r30, r28
    2766:	ed 59       	subi	r30, 0x9D	; 157
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	98 2f       	mov	r25, r24
    276e:	99 1f       	adc	r25, r25
    2770:	99 27       	eor	r25, r25
    2772:	99 1f       	adc	r25, r25
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	66 e0       	ldi	r22, 0x06	; 6
    2778:	49 2f       	mov	r20, r25
    277a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    277e:	fe 01       	movw	r30, r28
    2780:	ed 5b       	subi	r30, 0xBD	; 189
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 e8       	ldi	r26, 0x80	; 128
    278a:	bf e3       	ldi	r27, 0x3F	; 63
    278c:	80 83       	st	Z, r24
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	a2 83       	std	Z+2, r26	; 0x02
    2792:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2794:	8e 01       	movw	r16, r28
    2796:	01 5c       	subi	r16, 0xC1	; 193
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	fe 01       	movw	r30, r28
    279c:	ed 5b       	subi	r30, 0xBD	; 189
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a e7       	ldi	r20, 0x7A	; 122
    27ae:	55 e4       	ldi	r21, 0x45	; 69
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	f8 01       	movw	r30, r16
    27ba:	80 83       	st	Z, r24
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	a2 83       	std	Z+2, r26	; 0x02
    27c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27c2:	fe 01       	movw	r30, r28
    27c4:	ff 96       	adiw	r30, 0x3f	; 63
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <LCD_sendCommand+0x3da>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e af       	std	Y+62, r25	; 0x3e
    27e4:	8d af       	std	Y+61, r24	; 0x3d
    27e6:	46 c0       	rjmp	.+140    	; 0x2874 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    27e8:	fe 01       	movw	r30, r28
    27ea:	ff 96       	adiw	r30, 0x3f	; 63
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	64 f5       	brge	.+88     	; 0x285c <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	fe 01       	movw	r30, r28
    2806:	ed 5b       	subi	r30, 0xBD	; 189
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e af       	std	Y+62, r25	; 0x3e
    2830:	8d af       	std	Y+61, r24	; 0x3d
    2832:	0f c0       	rjmp	.+30     	; 0x2852 <LCD_sendCommand+0x444>
    2834:	80 e9       	ldi	r24, 0x90	; 144
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	9c af       	std	Y+60, r25	; 0x3c
    283a:	8b af       	std	Y+59, r24	; 0x3b
    283c:	8b ad       	ldd	r24, Y+59	; 0x3b
    283e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_sendCommand+0x432>
    2844:	9c af       	std	Y+60, r25	; 0x3c
    2846:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2848:	8d ad       	ldd	r24, Y+61	; 0x3d
    284a:	9e ad       	ldd	r25, Y+62	; 0x3e
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	9e af       	std	Y+62, r25	; 0x3e
    2850:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2852:	8d ad       	ldd	r24, Y+61	; 0x3d
    2854:	9e ad       	ldd	r25, Y+62	; 0x3e
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	69 f7       	brne	.-38     	; 0x2834 <LCD_sendCommand+0x426>
    285a:	16 c0       	rjmp	.+44     	; 0x2888 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	fe 01       	movw	r30, r28
    285e:	ff 96       	adiw	r30, 0x3f	; 63
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9e af       	std	Y+62, r25	; 0x3e
    2872:	8d af       	std	Y+61, r24	; 0x3d
    2874:	8d ad       	ldd	r24, Y+61	; 0x3d
    2876:	9e ad       	ldd	r25, Y+62	; 0x3e
    2878:	9a af       	std	Y+58, r25	; 0x3a
    287a:	89 af       	std	Y+57, r24	; 0x39
    287c:	89 ad       	ldd	r24, Y+57	; 0x39
    287e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_sendCommand+0x472>
    2884:	9a af       	std	Y+58, r25	; 0x3a
    2886:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	62 e0       	ldi	r22, 0x02	; 2
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a0 e8       	ldi	r26, 0x80	; 128
    2898:	bf e3       	ldi	r27, 0x3F	; 63
    289a:	8d ab       	std	Y+53, r24	; 0x35
    289c:	9e ab       	std	Y+54, r25	; 0x36
    289e:	af ab       	std	Y+55, r26	; 0x37
    28a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a2:	6d a9       	ldd	r22, Y+53	; 0x35
    28a4:	7e a9       	ldd	r23, Y+54	; 0x36
    28a6:	8f a9       	ldd	r24, Y+55	; 0x37
    28a8:	98 ad       	ldd	r25, Y+56	; 0x38
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4a e7       	ldi	r20, 0x7A	; 122
    28b0:	55 e4       	ldi	r21, 0x45	; 69
    28b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	89 ab       	std	Y+49, r24	; 0x31
    28bc:	9a ab       	std	Y+50, r25	; 0x32
    28be:	ab ab       	std	Y+51, r26	; 0x33
    28c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28c2:	69 a9       	ldd	r22, Y+49	; 0x31
    28c4:	7a a9       	ldd	r23, Y+50	; 0x32
    28c6:	8b a9       	ldd	r24, Y+51	; 0x33
    28c8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e8       	ldi	r20, 0x80	; 128
    28d0:	5f e3       	ldi	r21, 0x3F	; 63
    28d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	2c f4       	brge	.+10     	; 0x28e4 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	98 ab       	std	Y+48, r25	; 0x30
    28e0:	8f a7       	std	Y+47, r24	; 0x2f
    28e2:	3f c0       	rjmp	.+126    	; 0x2962 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    28e4:	69 a9       	ldd	r22, Y+49	; 0x31
    28e6:	7a a9       	ldd	r23, Y+50	; 0x32
    28e8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ea:	9c a9       	ldd	r25, Y+52	; 0x34
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	3f ef       	ldi	r19, 0xFF	; 255
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	57 e4       	ldi	r21, 0x47	; 71
    28f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	4c f5       	brge	.+82     	; 0x294e <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fc:	6d a9       	ldd	r22, Y+53	; 0x35
    28fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2900:	8f a9       	ldd	r24, Y+55	; 0x37
    2902:	98 ad       	ldd	r25, Y+56	; 0x38
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e2       	ldi	r20, 0x20	; 32
    290a:	51 e4       	ldi	r21, 0x41	; 65
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	98 ab       	std	Y+48, r25	; 0x30
    2922:	8f a7       	std	Y+47, r24	; 0x2f
    2924:	0f c0       	rjmp	.+30     	; 0x2944 <LCD_sendCommand+0x536>
    2926:	80 e9       	ldi	r24, 0x90	; 144
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	9e a7       	std	Y+46, r25	; 0x2e
    292c:	8d a7       	std	Y+45, r24	; 0x2d
    292e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2930:	9e a5       	ldd	r25, Y+46	; 0x2e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_sendCommand+0x524>
    2936:	9e a7       	std	Y+46, r25	; 0x2e
    2938:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	98 ab       	std	Y+48, r25	; 0x30
    2942:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2944:	8f a5       	ldd	r24, Y+47	; 0x2f
    2946:	98 a9       	ldd	r25, Y+48	; 0x30
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	69 f7       	brne	.-38     	; 0x2926 <LCD_sendCommand+0x518>
    294c:	14 c0       	rjmp	.+40     	; 0x2976 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	98 ab       	std	Y+48, r25	; 0x30
    2960:	8f a7       	std	Y+47, r24	; 0x2f
    2962:	8f a5       	ldd	r24, Y+47	; 0x2f
    2964:	98 a9       	ldd	r25, Y+48	; 0x30
    2966:	9c a7       	std	Y+44, r25	; 0x2c
    2968:	8b a7       	std	Y+43, r24	; 0x2b
    296a:	8b a5       	ldd	r24, Y+43	; 0x2b
    296c:	9c a5       	ldd	r25, Y+44	; 0x2c
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_sendCommand+0x560>
    2972:	9c a7       	std	Y+44, r25	; 0x2c
    2974:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	62 e0       	ldi	r22, 0x02	; 2
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a0 e8       	ldi	r26, 0x80	; 128
    2986:	bf e3       	ldi	r27, 0x3F	; 63
    2988:	8f a3       	std	Y+39, r24	; 0x27
    298a:	98 a7       	std	Y+40, r25	; 0x28
    298c:	a9 a7       	std	Y+41, r26	; 0x29
    298e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	6f a1       	ldd	r22, Y+39	; 0x27
    2992:	78 a5       	ldd	r23, Y+40	; 0x28
    2994:	89 a5       	ldd	r24, Y+41	; 0x29
    2996:	9a a5       	ldd	r25, Y+42	; 0x2a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a e7       	ldi	r20, 0x7A	; 122
    299e:	55 e4       	ldi	r21, 0x45	; 69
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8b a3       	std	Y+35, r24	; 0x23
    29aa:	9c a3       	std	Y+36, r25	; 0x24
    29ac:	ad a3       	std	Y+37, r26	; 0x25
    29ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29b0:	6b a1       	ldd	r22, Y+35	; 0x23
    29b2:	7c a1       	ldd	r23, Y+36	; 0x24
    29b4:	8d a1       	ldd	r24, Y+37	; 0x25
    29b6:	9e a1       	ldd	r25, Y+38	; 0x26
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e8       	ldi	r20, 0x80	; 128
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9a a3       	std	Y+34, r25	; 0x22
    29ce:	89 a3       	std	Y+33, r24	; 0x21
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    29d2:	6b a1       	ldd	r22, Y+35	; 0x23
    29d4:	7c a1       	ldd	r23, Y+36	; 0x24
    29d6:	8d a1       	ldd	r24, Y+37	; 0x25
    29d8:	9e a1       	ldd	r25, Y+38	; 0x26
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	4f e7       	ldi	r20, 0x7F	; 127
    29e0:	57 e4       	ldi	r21, 0x47	; 71
    29e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	4c f5       	brge	.+82     	; 0x2a3c <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	6f a1       	ldd	r22, Y+39	; 0x27
    29ec:	78 a5       	ldd	r23, Y+40	; 0x28
    29ee:	89 a5       	ldd	r24, Y+41	; 0x29
    29f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9a a3       	std	Y+34, r25	; 0x22
    2a10:	89 a3       	std	Y+33, r24	; 0x21
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <LCD_sendCommand+0x624>
    2a14:	80 e9       	ldi	r24, 0x90	; 144
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	98 a3       	std	Y+32, r25	; 0x20
    2a1a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_sendCommand+0x612>
    2a24:	98 a3       	std	Y+32, r25	; 0x20
    2a26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	9a a3       	std	Y+34, r25	; 0x22
    2a30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	89 a1       	ldd	r24, Y+33	; 0x21
    2a34:	9a a1       	ldd	r25, Y+34	; 0x22
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <LCD_sendCommand+0x606>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a40:	8d a1       	ldd	r24, Y+37	; 0x25
    2a42:	9e a1       	ldd	r25, Y+38	; 0x26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
    2a50:	89 a1       	ldd	r24, Y+33	; 0x21
    2a52:	9a a1       	ldd	r25, Y+34	; 0x22
    2a54:	9e 8f       	std	Y+30, r25	; 0x1e
    2a56:	8d 8f       	std	Y+29, r24	; 0x1d
    2a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <LCD_sendCommand+0x64e>
    2a60:	9e 8f       	std	Y+30, r25	; 0x1e
    2a62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,0));
    2a64:	fe 01       	movw	r30, r28
    2a66:	ed 59       	subi	r30, 0x9D	; 157
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	91 70       	andi	r25, 0x01	; 1
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	63 e0       	ldi	r22, 0x03	; 3
    2a74:	49 2f       	mov	r20, r25
    2a76:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ed 59       	subi	r30, 0x9D	; 157
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	86 95       	lsr	r24
    2a84:	98 2f       	mov	r25, r24
    2a86:	91 70       	andi	r25, 0x01	; 1
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	64 e0       	ldi	r22, 0x04	; 4
    2a8c:	49 2f       	mov	r20, r25
    2a8e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
    2a92:	fe 01       	movw	r30, r28
    2a94:	ed 59       	subi	r30, 0x9D	; 157
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	86 95       	lsr	r24
    2a9c:	86 95       	lsr	r24
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	91 70       	andi	r25, 0x01	; 1
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	65 e0       	ldi	r22, 0x05	; 5
    2aa6:	49 2f       	mov	r20, r25
    2aa8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 59       	subi	r30, 0x9D	; 157
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	86 95       	lsr	r24
    2ab6:	86 95       	lsr	r24
    2ab8:	86 95       	lsr	r24
    2aba:	98 2f       	mov	r25, r24
    2abc:	91 70       	andi	r25, 0x01	; 1
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	66 e0       	ldi	r22, 0x06	; 6
    2ac2:	49 2f       	mov	r20, r25
    2ac4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e8       	ldi	r26, 0x80	; 128
    2ace:	bf e3       	ldi	r27, 0x3F	; 63
    2ad0:	89 8f       	std	Y+25, r24	; 0x19
    2ad2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a e7       	ldi	r20, 0x7A	; 122
    2ae6:	55 e4       	ldi	r21, 0x45	; 69
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	8d 8b       	std	Y+21, r24	; 0x15
    2af2:	9e 8b       	std	Y+22, r25	; 0x16
    2af4:	af 8b       	std	Y+23, r26	; 0x17
    2af6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <LCD_sendCommand+0x70c>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    2b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b20:	98 8d       	ldd	r25, Y+24	; 0x18
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	69 8d       	ldd	r22, Y+25	; 0x19
    2b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9c 8b       	std	Y+20, r25	; 0x14
    2b58:	8b 8b       	std	Y+19, r24	; 0x13
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <LCD_sendCommand+0x76c>
    2b5c:	80 e9       	ldi	r24, 0x90	; 144
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
    2b64:	89 89       	ldd	r24, Y+17	; 0x11
    2b66:	9a 89       	ldd	r25, Y+18	; 0x12
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_sendCommand+0x75a>
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
    2b6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	8b 89       	ldd	r24, Y+19	; 0x13
    2b72:	9c 89       	ldd	r25, Y+20	; 0x14
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <LCD_sendCommand+0x74e>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9c 8b       	std	Y+20, r25	; 0x14
    2b96:	8b 8b       	std	Y+19, r24	; 0x13
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba2:	98 89       	ldd	r25, Y+16	; 0x10
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_sendCommand+0x796>
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e8       	ldi	r26, 0x80	; 128
    2bbc:	bf e3       	ldi	r27, 0x3F	; 63
    2bbe:	8b 87       	std	Y+11, r24	; 0x0b
    2bc0:	9c 87       	std	Y+12, r25	; 0x0c
    2bc2:	ad 87       	std	Y+13, r26	; 0x0d
    2bc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a e7       	ldi	r20, 0x7A	; 122
    2bd4:	55 e4       	ldi	r21, 0x45	; 69
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8f 83       	std	Y+7, r24	; 0x07
    2be0:	98 87       	std	Y+8, r25	; 0x08
    2be2:	a9 87       	std	Y+9, r26	; 0x09
    2be4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <LCD_sendCommand+0x85a>
    2c4a:	80 e9       	ldi	r24, 0x90	; 144
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_sendCommand+0x848>
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <LCD_sendCommand+0x83c>
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LCD_sendCommand+0x884>
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    2c9a:	cd 59       	subi	r28, 0x9D	; 157
    2c9c:	df 4f       	sbci	r29, 0xFF	; 255
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	08 95       	ret

00002cb2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	c3 56       	subi	r28, 0x63	; 99
    2cc0:	d0 40       	sbci	r29, 0x00	; 0
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 59       	subi	r30, 0x9D	; 157
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e1 5a       	subi	r30, 0xA1	; 161
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a0 e8       	ldi	r26, 0x80	; 128
    2cea:	bf e3       	ldi	r27, 0x3F	; 63
    2cec:	80 83       	st	Z, r24
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	a2 83       	std	Z+2, r26	; 0x02
    2cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	05 5a       	subi	r16, 0xA5	; 165
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e1 5a       	subi	r30, 0xA1	; 161
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	4a e7       	ldi	r20, 0x7A	; 122
    2d0e:	55 e4       	ldi	r21, 0x45	; 69
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f8 01       	movw	r30, r16
    2d1a:	80 83       	st	Z, r24
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d22:	fe 01       	movw	r30, r28
    2d24:	e5 5a       	subi	r30, 0xA5	; 165
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	44 f4       	brge	.+16     	; 0x2d50 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2d40:	fe 01       	movw	r30, r28
    2d42:	e7 5a       	subi	r30, 0xA7	; 167
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	64 c0       	rjmp	.+200    	; 0x2e18 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2d50:	fe 01       	movw	r30, r28
    2d52:	e5 5a       	subi	r30, 0xA5	; 165
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	3f ef       	ldi	r19, 0xFF	; 255
    2d62:	4f e7       	ldi	r20, 0x7F	; 127
    2d64:	57 e4       	ldi	r21, 0x47	; 71
    2d66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <LCD_displayCharacter+0xbe>
    2d6e:	43 c0       	rjmp	.+134    	; 0x2df6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d70:	fe 01       	movw	r30, r28
    2d72:	e1 5a       	subi	r30, 0xA1	; 161
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8e 01       	movw	r16, r28
    2d90:	07 5a       	subi	r16, 0xA7	; 167
    2d92:	1f 4f       	sbci	r17, 0xFF	; 255
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	f8 01       	movw	r30, r16
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
    2da6:	1f c0       	rjmp	.+62     	; 0x2de6 <LCD_displayCharacter+0x134>
    2da8:	fe 01       	movw	r30, r28
    2daa:	e9 5a       	subi	r30, 0xA9	; 169
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 e9       	ldi	r24, 0x90	; 144
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    2db6:	fe 01       	movw	r30, r28
    2db8:	e9 5a       	subi	r30, 0xA9	; 169
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <LCD_displayCharacter+0x10e>
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e9 5a       	subi	r30, 0xA9	; 169
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dce:	de 01       	movw	r26, r28
    2dd0:	a7 5a       	subi	r26, 0xA7	; 167
    2dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e7 5a       	subi	r30, 0xA7	; 167
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	11 96       	adiw	r26, 0x01	; 1
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de6:	fe 01       	movw	r30, r28
    2de8:	e7 5a       	subi	r30, 0xA7	; 167
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	d1 f6       	brne	.-76     	; 0x2da8 <LCD_displayCharacter+0xf6>
    2df4:	27 c0       	rjmp	.+78     	; 0x2e44 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df6:	8e 01       	movw	r16, r28
    2df8:	07 5a       	subi	r16, 0xA7	; 167
    2dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e5 5a       	subi	r30, 0xA5	; 165
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	f8 01       	movw	r30, r16
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    2e18:	de 01       	movw	r26, r28
    2e1a:	ab 5a       	subi	r26, 0xAB	; 171
    2e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e7 5a       	subi	r30, 0xA7	; 167
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	8d 93       	st	X+, r24
    2e2a:	9c 93       	st	X, r25
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	eb 5a       	subi	r30, 0xAB	; 171
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 81       	ld	r24, Z
    2e34:	91 81       	ldd	r25, Z+1	; 0x01
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_displayCharacter+0x184>
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	eb 5a       	subi	r30, 0xAB	; 171
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	62 e0       	ldi	r22, 0x02	; 2
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ef 5a       	subi	r30, 0xAF	; 175
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	a0 e8       	ldi	r26, 0x80	; 128
    2e5a:	bf e3       	ldi	r27, 0x3F	; 63
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	a2 83       	std	Z+2, r26	; 0x02
    2e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e64:	8e 01       	movw	r16, r28
    2e66:	03 5b       	subi	r16, 0xB3	; 179
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ef 5a       	subi	r30, 0xAF	; 175
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a e7       	ldi	r20, 0x7A	; 122
    2e7e:	55 e4       	ldi	r21, 0x45	; 69
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	f8 01       	movw	r30, r16
    2e8a:	80 83       	st	Z, r24
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	a2 83       	std	Z+2, r26	; 0x02
    2e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e92:	fe 01       	movw	r30, r28
    2e94:	e3 5b       	subi	r30, 0xB3	; 179
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	44 f4       	brge	.+16     	; 0x2ec0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e5 5b       	subi	r30, 0xB5	; 181
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	80 83       	st	Z, r24
    2ebe:	64 c0       	rjmp	.+200    	; 0x2f88 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e3 5b       	subi	r30, 0xB3	; 179
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	60 81       	ld	r22, Z
    2ec8:	71 81       	ldd	r23, Z+1	; 0x01
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	93 81       	ldd	r25, Z+3	; 0x03
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	4f e7       	ldi	r20, 0x7F	; 127
    2ed4:	57 e4       	ldi	r21, 0x47	; 71
    2ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eda:	18 16       	cp	r1, r24
    2edc:	0c f0       	brlt	.+2      	; 0x2ee0 <LCD_displayCharacter+0x22e>
    2ede:	43 c0       	rjmp	.+134    	; 0x2f66 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ef 5a       	subi	r30, 0xAF	; 175
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	60 81       	ld	r22, Z
    2ee8:	71 81       	ldd	r23, Z+1	; 0x01
    2eea:	82 81       	ldd	r24, Z+2	; 0x02
    2eec:	93 81       	ldd	r25, Z+3	; 0x03
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	8e 01       	movw	r16, r28
    2f00:	05 5b       	subi	r16, 0xB5	; 181
    2f02:	1f 4f       	sbci	r17, 0xFF	; 255
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	f8 01       	movw	r30, r16
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	1f c0       	rjmp	.+62     	; 0x2f56 <LCD_displayCharacter+0x2a4>
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e7 5b       	subi	r30, 0xB7	; 183
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 e9       	ldi	r24, 0x90	; 144
    2f20:	91 e0       	ldi	r25, 0x01	; 1
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	80 83       	st	Z, r24
    2f26:	fe 01       	movw	r30, r28
    2f28:	e7 5b       	subi	r30, 0xB7	; 183
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <LCD_displayCharacter+0x27e>
    2f34:	fe 01       	movw	r30, r28
    2f36:	e7 5b       	subi	r30, 0xB7	; 183
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3e:	de 01       	movw	r26, r28
    2f40:	a5 5b       	subi	r26, 0xB5	; 181
    2f42:	bf 4f       	sbci	r27, 0xFF	; 255
    2f44:	fe 01       	movw	r30, r28
    2f46:	e5 5b       	subi	r30, 0xB5	; 181
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	11 96       	adiw	r26, 0x01	; 1
    2f52:	9c 93       	st	X, r25
    2f54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f56:	fe 01       	movw	r30, r28
    2f58:	e5 5b       	subi	r30, 0xB5	; 181
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	80 81       	ld	r24, Z
    2f5e:	91 81       	ldd	r25, Z+1	; 0x01
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	d1 f6       	brne	.-76     	; 0x2f18 <LCD_displayCharacter+0x266>
    2f64:	27 c0       	rjmp	.+78     	; 0x2fb4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f66:	8e 01       	movw	r16, r28
    2f68:	05 5b       	subi	r16, 0xB5	; 181
    2f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e3 5b       	subi	r30, 0xB3	; 179
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	f8 01       	movw	r30, r16
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
    2f88:	de 01       	movw	r26, r28
    2f8a:	a9 5b       	subi	r26, 0xB9	; 185
    2f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e5 5b       	subi	r30, 0xB5	; 181
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	8d 93       	st	X+, r24
    2f9a:	9c 93       	st	X, r25
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e9 5b       	subi	r30, 0xB9	; 185
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <LCD_displayCharacter+0x2f4>
    2faa:	fe 01       	movw	r30, r28
    2fac:	e9 5b       	subi	r30, 0xB9	; 185
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,4));
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ed 59       	subi	r30, 0x9D	; 157
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 81       	ld	r24, Z
    2fbc:	82 95       	swap	r24
    2fbe:	8f 70       	andi	r24, 0x0F	; 15
    2fc0:	98 2f       	mov	r25, r24
    2fc2:	91 70       	andi	r25, 0x01	; 1
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	63 e0       	ldi	r22, 0x03	; 3
    2fc8:	49 2f       	mov	r20, r25
    2fca:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,5));
    2fce:	fe 01       	movw	r30, r28
    2fd0:	ed 59       	subi	r30, 0x9D	; 157
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 81       	ld	r24, Z
    2fd6:	82 95       	swap	r24
    2fd8:	86 95       	lsr	r24
    2fda:	87 70       	andi	r24, 0x07	; 7
    2fdc:	98 2f       	mov	r25, r24
    2fde:	91 70       	andi	r25, 0x01	; 1
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	64 e0       	ldi	r22, 0x04	; 4
    2fe4:	49 2f       	mov	r20, r25
    2fe6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,6));
    2fea:	fe 01       	movw	r30, r28
    2fec:	ed 59       	subi	r30, 0x9D	; 157
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	82 95       	swap	r24
    2ff4:	86 95       	lsr	r24
    2ff6:	86 95       	lsr	r24
    2ff8:	83 70       	andi	r24, 0x03	; 3
    2ffa:	98 2f       	mov	r25, r24
    2ffc:	91 70       	andi	r25, 0x01	; 1
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	65 e0       	ldi	r22, 0x05	; 5
    3002:	49 2f       	mov	r20, r25
    3004:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,7));
    3008:	fe 01       	movw	r30, r28
    300a:	ed 59       	subi	r30, 0x9D	; 157
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	98 2f       	mov	r25, r24
    3012:	99 1f       	adc	r25, r25
    3014:	99 27       	eor	r25, r25
    3016:	99 1f       	adc	r25, r25
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	66 e0       	ldi	r22, 0x06	; 6
    301c:	49 2f       	mov	r20, r25
    301e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    3022:	fe 01       	movw	r30, r28
    3024:	ed 5b       	subi	r30, 0xBD	; 189
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	a0 e8       	ldi	r26, 0x80	; 128
    302e:	bf e3       	ldi	r27, 0x3F	; 63
    3030:	80 83       	st	Z, r24
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	a2 83       	std	Z+2, r26	; 0x02
    3036:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3038:	8e 01       	movw	r16, r28
    303a:	01 5c       	subi	r16, 0xC1	; 193
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	fe 01       	movw	r30, r28
    3040:	ed 5b       	subi	r30, 0xBD	; 189
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a e7       	ldi	r20, 0x7A	; 122
    3052:	55 e4       	ldi	r21, 0x45	; 69
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	f8 01       	movw	r30, r16
    305e:	80 83       	st	Z, r24
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	a2 83       	std	Z+2, r26	; 0x02
    3064:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3066:	fe 01       	movw	r30, r28
    3068:	ff 96       	adiw	r30, 0x3f	; 63
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307e:	88 23       	and	r24, r24
    3080:	2c f4       	brge	.+10     	; 0x308c <LCD_displayCharacter+0x3da>
		__ticks = 1;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	9e af       	std	Y+62, r25	; 0x3e
    3088:	8d af       	std	Y+61, r24	; 0x3d
    308a:	46 c0       	rjmp	.+140    	; 0x3118 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    308c:	fe 01       	movw	r30, r28
    308e:	ff 96       	adiw	r30, 0x3f	; 63
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	64 f5       	brge	.+88     	; 0x3100 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	fe 01       	movw	r30, r28
    30aa:	ed 5b       	subi	r30, 0xBD	; 189
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e af       	std	Y+62, r25	; 0x3e
    30d4:	8d af       	std	Y+61, r24	; 0x3d
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <LCD_displayCharacter+0x444>
    30d8:	80 e9       	ldi	r24, 0x90	; 144
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	9c af       	std	Y+60, r25	; 0x3c
    30de:	8b af       	std	Y+59, r24	; 0x3b
    30e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    30e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <LCD_displayCharacter+0x432>
    30e8:	9c af       	std	Y+60, r25	; 0x3c
    30ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    30ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9e af       	std	Y+62, r25	; 0x3e
    30f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <LCD_displayCharacter+0x426>
    30fe:	16 c0       	rjmp	.+44     	; 0x312c <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	fe 01       	movw	r30, r28
    3102:	ff 96       	adiw	r30, 0x3f	; 63
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	9e af       	std	Y+62, r25	; 0x3e
    3116:	8d af       	std	Y+61, r24	; 0x3d
    3118:	8d ad       	ldd	r24, Y+61	; 0x3d
    311a:	9e ad       	ldd	r25, Y+62	; 0x3e
    311c:	9a af       	std	Y+58, r25	; 0x3a
    311e:	89 af       	std	Y+57, r24	; 0x39
    3120:	89 ad       	ldd	r24, Y+57	; 0x39
    3122:	9a ad       	ldd	r25, Y+58	; 0x3a
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <LCD_displayCharacter+0x472>
    3128:	9a af       	std	Y+58, r25	; 0x3a
    312a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	62 e0       	ldi	r22, 0x02	; 2
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e8       	ldi	r26, 0x80	; 128
    313c:	bf e3       	ldi	r27, 0x3F	; 63
    313e:	8d ab       	std	Y+53, r24	; 0x35
    3140:	9e ab       	std	Y+54, r25	; 0x36
    3142:	af ab       	std	Y+55, r26	; 0x37
    3144:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3146:	6d a9       	ldd	r22, Y+53	; 0x35
    3148:	7e a9       	ldd	r23, Y+54	; 0x36
    314a:	8f a9       	ldd	r24, Y+55	; 0x37
    314c:	98 ad       	ldd	r25, Y+56	; 0x38
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a e7       	ldi	r20, 0x7A	; 122
    3154:	55 e4       	ldi	r21, 0x45	; 69
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	89 ab       	std	Y+49, r24	; 0x31
    3160:	9a ab       	std	Y+50, r25	; 0x32
    3162:	ab ab       	std	Y+51, r26	; 0x33
    3164:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3166:	69 a9       	ldd	r22, Y+49	; 0x31
    3168:	7a a9       	ldd	r23, Y+50	; 0x32
    316a:	8b a9       	ldd	r24, Y+51	; 0x33
    316c:	9c a9       	ldd	r25, Y+52	; 0x34
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	2c f4       	brge	.+10     	; 0x3188 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	98 ab       	std	Y+48, r25	; 0x30
    3184:	8f a7       	std	Y+47, r24	; 0x2f
    3186:	3f c0       	rjmp	.+126    	; 0x3206 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    3188:	69 a9       	ldd	r22, Y+49	; 0x31
    318a:	7a a9       	ldd	r23, Y+50	; 0x32
    318c:	8b a9       	ldd	r24, Y+51	; 0x33
    318e:	9c a9       	ldd	r25, Y+52	; 0x34
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	3f ef       	ldi	r19, 0xFF	; 255
    3194:	4f e7       	ldi	r20, 0x7F	; 127
    3196:	57 e4       	ldi	r21, 0x47	; 71
    3198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319c:	18 16       	cp	r1, r24
    319e:	4c f5       	brge	.+82     	; 0x31f2 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a0:	6d a9       	ldd	r22, Y+53	; 0x35
    31a2:	7e a9       	ldd	r23, Y+54	; 0x36
    31a4:	8f a9       	ldd	r24, Y+55	; 0x37
    31a6:	98 ad       	ldd	r25, Y+56	; 0x38
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e2       	ldi	r20, 0x20	; 32
    31ae:	51 e4       	ldi	r21, 0x41	; 65
    31b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	98 ab       	std	Y+48, r25	; 0x30
    31c6:	8f a7       	std	Y+47, r24	; 0x2f
    31c8:	0f c0       	rjmp	.+30     	; 0x31e8 <LCD_displayCharacter+0x536>
    31ca:	80 e9       	ldi	r24, 0x90	; 144
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	9e a7       	std	Y+46, r25	; 0x2e
    31d0:	8d a7       	std	Y+45, r24	; 0x2d
    31d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <LCD_displayCharacter+0x524>
    31da:	9e a7       	std	Y+46, r25	; 0x2e
    31dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31de:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e0:	98 a9       	ldd	r25, Y+48	; 0x30
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	98 ab       	std	Y+48, r25	; 0x30
    31e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ea:	98 a9       	ldd	r25, Y+48	; 0x30
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	69 f7       	brne	.-38     	; 0x31ca <LCD_displayCharacter+0x518>
    31f0:	14 c0       	rjmp	.+40     	; 0x321a <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f2:	69 a9       	ldd	r22, Y+49	; 0x31
    31f4:	7a a9       	ldd	r23, Y+50	; 0x32
    31f6:	8b a9       	ldd	r24, Y+51	; 0x33
    31f8:	9c a9       	ldd	r25, Y+52	; 0x34
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	98 ab       	std	Y+48, r25	; 0x30
    3204:	8f a7       	std	Y+47, r24	; 0x2f
    3206:	8f a5       	ldd	r24, Y+47	; 0x2f
    3208:	98 a9       	ldd	r25, Y+48	; 0x30
    320a:	9c a7       	std	Y+44, r25	; 0x2c
    320c:	8b a7       	std	Y+43, r24	; 0x2b
    320e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3210:	9c a5       	ldd	r25, Y+44	; 0x2c
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <LCD_displayCharacter+0x560>
    3216:	9c a7       	std	Y+44, r25	; 0x2c
    3218:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	62 e0       	ldi	r22, 0x02	; 2
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	a0 e8       	ldi	r26, 0x80	; 128
    322a:	bf e3       	ldi	r27, 0x3F	; 63
    322c:	8f a3       	std	Y+39, r24	; 0x27
    322e:	98 a7       	std	Y+40, r25	; 0x28
    3230:	a9 a7       	std	Y+41, r26	; 0x29
    3232:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	6f a1       	ldd	r22, Y+39	; 0x27
    3236:	78 a5       	ldd	r23, Y+40	; 0x28
    3238:	89 a5       	ldd	r24, Y+41	; 0x29
    323a:	9a a5       	ldd	r25, Y+42	; 0x2a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a e7       	ldi	r20, 0x7A	; 122
    3242:	55 e4       	ldi	r21, 0x45	; 69
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	8b a3       	std	Y+35, r24	; 0x23
    324e:	9c a3       	std	Y+36, r25	; 0x24
    3250:	ad a3       	std	Y+37, r26	; 0x25
    3252:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3254:	6b a1       	ldd	r22, Y+35	; 0x23
    3256:	7c a1       	ldd	r23, Y+36	; 0x24
    3258:	8d a1       	ldd	r24, Y+37	; 0x25
    325a:	9e a1       	ldd	r25, Y+38	; 0x26
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9a a3       	std	Y+34, r25	; 0x22
    3272:	89 a3       	std	Y+33, r24	; 0x21
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    3276:	6b a1       	ldd	r22, Y+35	; 0x23
    3278:	7c a1       	ldd	r23, Y+36	; 0x24
    327a:	8d a1       	ldd	r24, Y+37	; 0x25
    327c:	9e a1       	ldd	r25, Y+38	; 0x26
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	4c f5       	brge	.+82     	; 0x32e0 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	6f a1       	ldd	r22, Y+39	; 0x27
    3290:	78 a5       	ldd	r23, Y+40	; 0x28
    3292:	89 a5       	ldd	r24, Y+41	; 0x29
    3294:	9a a5       	ldd	r25, Y+42	; 0x2a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <LCD_displayCharacter+0x624>
    32b8:	80 e9       	ldi	r24, 0x90	; 144
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	98 a3       	std	Y+32, r25	; 0x20
    32be:	8f 8f       	std	Y+31, r24	; 0x1f
    32c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c2:	98 a1       	ldd	r25, Y+32	; 0x20
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <LCD_displayCharacter+0x612>
    32c8:	98 a3       	std	Y+32, r25	; 0x20
    32ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	89 a1       	ldd	r24, Y+33	; 0x21
    32ce:	9a a1       	ldd	r25, Y+34	; 0x22
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	9a a3       	std	Y+34, r25	; 0x22
    32d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	89 a1       	ldd	r24, Y+33	; 0x21
    32d8:	9a a1       	ldd	r25, Y+34	; 0x22
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <LCD_displayCharacter+0x606>
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	6b a1       	ldd	r22, Y+35	; 0x23
    32e2:	7c a1       	ldd	r23, Y+36	; 0x24
    32e4:	8d a1       	ldd	r24, Y+37	; 0x25
    32e6:	9e a1       	ldd	r25, Y+38	; 0x26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9a a3       	std	Y+34, r25	; 0x22
    32f2:	89 a3       	std	Y+33, r24	; 0x21
    32f4:	89 a1       	ldd	r24, Y+33	; 0x21
    32f6:	9a a1       	ldd	r25, Y+34	; 0x22
    32f8:	9e 8f       	std	Y+30, r25	; 0x1e
    32fa:	8d 8f       	std	Y+29, r24	; 0x1d
    32fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <LCD_displayCharacter+0x64e>
    3304:	9e 8f       	std	Y+30, r25	; 0x1e
    3306:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,0));
    3308:	fe 01       	movw	r30, r28
    330a:	ed 59       	subi	r30, 0x9D	; 157
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	98 2f       	mov	r25, r24
    3312:	91 70       	andi	r25, 0x01	; 1
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	63 e0       	ldi	r22, 0x03	; 3
    3318:	49 2f       	mov	r20, r25
    331a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
    331e:	fe 01       	movw	r30, r28
    3320:	ed 59       	subi	r30, 0x9D	; 157
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	80 81       	ld	r24, Z
    3326:	86 95       	lsr	r24
    3328:	98 2f       	mov	r25, r24
    332a:	91 70       	andi	r25, 0x01	; 1
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	64 e0       	ldi	r22, 0x04	; 4
    3330:	49 2f       	mov	r20, r25
    3332:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
    3336:	fe 01       	movw	r30, r28
    3338:	ed 59       	subi	r30, 0x9D	; 157
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 81       	ld	r24, Z
    333e:	86 95       	lsr	r24
    3340:	86 95       	lsr	r24
    3342:	98 2f       	mov	r25, r24
    3344:	91 70       	andi	r25, 0x01	; 1
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	65 e0       	ldi	r22, 0x05	; 5
    334a:	49 2f       	mov	r20, r25
    334c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));
    3350:	fe 01       	movw	r30, r28
    3352:	ed 59       	subi	r30, 0x9D	; 157
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	86 95       	lsr	r24
    335a:	86 95       	lsr	r24
    335c:	86 95       	lsr	r24
    335e:	98 2f       	mov	r25, r24
    3360:	91 70       	andi	r25, 0x01	; 1
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	66 e0       	ldi	r22, 0x06	; 6
    3366:	49 2f       	mov	r20, r25
    3368:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a0 e8       	ldi	r26, 0x80	; 128
    3372:	bf e3       	ldi	r27, 0x3F	; 63
    3374:	89 8f       	std	Y+25, r24	; 0x19
    3376:	9a 8f       	std	Y+26, r25	; 0x1a
    3378:	ab 8f       	std	Y+27, r26	; 0x1b
    337a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	69 8d       	ldd	r22, Y+25	; 0x19
    337e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4a e7       	ldi	r20, 0x7A	; 122
    338a:	55 e4       	ldi	r21, 0x45	; 69
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8d 8b       	std	Y+21, r24	; 0x15
    3396:	9e 8b       	std	Y+22, r25	; 0x16
    3398:	af 8b       	std	Y+23, r26	; 0x17
    339a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    339c:	6d 89       	ldd	r22, Y+21	; 0x15
    339e:	7e 89       	ldd	r23, Y+22	; 0x16
    33a0:	8f 89       	ldd	r24, Y+23	; 0x17
    33a2:	98 8d       	ldd	r25, Y+24	; 0x18
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	2c f4       	brge	.+10     	; 0x33be <LCD_displayCharacter+0x70c>
		__ticks = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9c 8b       	std	Y+20, r25	; 0x14
    33ba:	8b 8b       	std	Y+19, r24	; 0x13
    33bc:	3f c0       	rjmp	.+126    	; 0x343c <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    33be:	6d 89       	ldd	r22, Y+21	; 0x15
    33c0:	7e 89       	ldd	r23, Y+22	; 0x16
    33c2:	8f 89       	ldd	r24, Y+23	; 0x17
    33c4:	98 8d       	ldd	r25, Y+24	; 0x18
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	4c f5       	brge	.+82     	; 0x3428 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	69 8d       	ldd	r22, Y+25	; 0x19
    33d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e2       	ldi	r20, 0x20	; 32
    33e4:	51 e4       	ldi	r21, 0x41	; 65
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9c 8b       	std	Y+20, r25	; 0x14
    33fc:	8b 8b       	std	Y+19, r24	; 0x13
    33fe:	0f c0       	rjmp	.+30     	; 0x341e <LCD_displayCharacter+0x76c>
    3400:	80 e9       	ldi	r24, 0x90	; 144
    3402:	91 e0       	ldi	r25, 0x01	; 1
    3404:	9a 8b       	std	Y+18, r25	; 0x12
    3406:	89 8b       	std	Y+17, r24	; 0x11
    3408:	89 89       	ldd	r24, Y+17	; 0x11
    340a:	9a 89       	ldd	r25, Y+18	; 0x12
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <LCD_displayCharacter+0x75a>
    3410:	9a 8b       	std	Y+18, r25	; 0x12
    3412:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3414:	8b 89       	ldd	r24, Y+19	; 0x13
    3416:	9c 89       	ldd	r25, Y+20	; 0x14
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	8b 89       	ldd	r24, Y+19	; 0x13
    3420:	9c 89       	ldd	r25, Y+20	; 0x14
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f7       	brne	.-38     	; 0x3400 <LCD_displayCharacter+0x74e>
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	6d 89       	ldd	r22, Y+21	; 0x15
    342a:	7e 89       	ldd	r23, Y+22	; 0x16
    342c:	8f 89       	ldd	r24, Y+23	; 0x17
    342e:	98 8d       	ldd	r25, Y+24	; 0x18
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9c 8b       	std	Y+20, r25	; 0x14
    343a:	8b 8b       	std	Y+19, r24	; 0x13
    343c:	8b 89       	ldd	r24, Y+19	; 0x13
    343e:	9c 89       	ldd	r25, Y+20	; 0x14
    3440:	98 8b       	std	Y+16, r25	; 0x10
    3442:	8f 87       	std	Y+15, r24	; 0x0f
    3444:	8f 85       	ldd	r24, Y+15	; 0x0f
    3446:	98 89       	ldd	r25, Y+16	; 0x10
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <LCD_displayCharacter+0x796>
    344c:	98 8b       	std	Y+16, r25	; 0x10
    344e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	62 e0       	ldi	r22, 0x02	; 2
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	a0 e8       	ldi	r26, 0x80	; 128
    3460:	bf e3       	ldi	r27, 0x3F	; 63
    3462:	8b 87       	std	Y+11, r24	; 0x0b
    3464:	9c 87       	std	Y+12, r25	; 0x0c
    3466:	ad 87       	std	Y+13, r26	; 0x0d
    3468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346a:	6b 85       	ldd	r22, Y+11	; 0x0b
    346c:	7c 85       	ldd	r23, Y+12	; 0x0c
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	4a e7       	ldi	r20, 0x7A	; 122
    3478:	55 e4       	ldi	r21, 0x45	; 69
    347a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	8f 83       	std	Y+7, r24	; 0x07
    3484:	98 87       	std	Y+8, r25	; 0x08
    3486:	a9 87       	std	Y+9, r26	; 0x09
    3488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    348a:	6f 81       	ldd	r22, Y+7	; 0x07
    348c:	78 85       	ldd	r23, Y+8	; 0x08
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	40 e8       	ldi	r20, 0x80	; 128
    3498:	5f e3       	ldi	r21, 0x3F	; 63
    349a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    349e:	88 23       	and	r24, r24
    34a0:	2c f4       	brge	.+10     	; 0x34ac <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	3f c0       	rjmp	.+126    	; 0x352a <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	3f ef       	ldi	r19, 0xFF	; 255
    34b8:	4f e7       	ldi	r20, 0x7F	; 127
    34ba:	57 e4       	ldi	r21, 0x47	; 71
    34bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c0:	18 16       	cp	r1, r24
    34c2:	4c f5       	brge	.+82     	; 0x3516 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e2       	ldi	r20, 0x20	; 32
    34d2:	51 e4       	ldi	r21, 0x41	; 65
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	9e 83       	std	Y+6, r25	; 0x06
    34ea:	8d 83       	std	Y+5, r24	; 0x05
    34ec:	0f c0       	rjmp	.+30     	; 0x350c <LCD_displayCharacter+0x85a>
    34ee:	80 e9       	ldi	r24, 0x90	; 144
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	f1 f7       	brne	.-4      	; 0x34fa <LCD_displayCharacter+0x848>
    34fe:	9c 83       	std	Y+4, r25	; 0x04
    3500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3502:	8d 81       	ldd	r24, Y+5	; 0x05
    3504:	9e 81       	ldd	r25, Y+6	; 0x06
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	9e 83       	std	Y+6, r25	; 0x06
    350a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	69 f7       	brne	.-38     	; 0x34ee <LCD_displayCharacter+0x83c>
    3514:	14 c0       	rjmp	.+40     	; 0x353e <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3516:	6f 81       	ldd	r22, Y+7	; 0x07
    3518:	78 85       	ldd	r23, Y+8	; 0x08
    351a:	89 85       	ldd	r24, Y+9	; 0x09
    351c:	9a 85       	ldd	r25, Y+10	; 0x0a
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	8d 81       	ldd	r24, Y+5	; 0x05
    352c:	9e 81       	ldd	r25, Y+6	; 0x06
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	9a 81       	ldd	r25, Y+2	; 0x02
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <LCD_displayCharacter+0x884>
    353a:	9a 83       	std	Y+2, r25	; 0x02
    353c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    353e:	cd 59       	subi	r28, 0x9D	; 157
    3540:	df 4f       	sbci	r29, 0xFF	; 255
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	08 95       	ret

00003556 <LCD_displayString>:

void LCD_displayString(char * string)
{
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	00 d0       	rcall	.+0      	; 0x355c <LCD_displayString+0x6>
    355c:	0f 92       	push	r0
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	9b 83       	std	Y+3, r25	; 0x03
    3564:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    3566:	19 82       	std	Y+1, r1	; 0x01
    3568:	0e c0       	rjmp	.+28     	; 0x3586 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	28 2f       	mov	r18, r24
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	9b 81       	ldd	r25, Y+3	; 0x03
    3574:	fc 01       	movw	r30, r24
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	80 81       	ld	r24, Z
    357c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	28 2f       	mov	r18, r24
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	8a 81       	ldd	r24, Y+2	; 0x02
    358e:	9b 81       	ldd	r25, Y+3	; 0x03
    3590:	fc 01       	movw	r30, r24
    3592:	e2 0f       	add	r30, r18
    3594:	f3 1f       	adc	r31, r19
    3596:	80 81       	ld	r24, Z
    3598:	88 23       	and	r24, r24
    359a:	39 f7       	brne	.-50     	; 0x356a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <LCD_clearScreen>:

void LCD_clearScreen()
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>
}
    35b6:	cf 91       	pop	r28
    35b8:	df 91       	pop	r29
    35ba:	08 95       	ret

000035bc <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    35bc:	df 93       	push	r29
    35be:	cf 93       	push	r28
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <LCD_moveCursor+0x6>
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <LCD_moveCursor+0x8>
    35c4:	0f 92       	push	r0
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	8a 83       	std	Y+2, r24	; 0x02
    35cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	3d 83       	std	Y+5, r19	; 0x05
    35d6:	2c 83       	std	Y+4, r18	; 0x04
    35d8:	8c 81       	ldd	r24, Y+4	; 0x04
    35da:	9d 81       	ldd	r25, Y+5	; 0x05
    35dc:	81 30       	cpi	r24, 0x01	; 1
    35de:	91 05       	cpc	r25, r1
    35e0:	c1 f0       	breq	.+48     	; 0x3612 <LCD_moveCursor+0x56>
    35e2:	2c 81       	ldd	r18, Y+4	; 0x04
    35e4:	3d 81       	ldd	r19, Y+5	; 0x05
    35e6:	22 30       	cpi	r18, 0x02	; 2
    35e8:	31 05       	cpc	r19, r1
    35ea:	2c f4       	brge	.+10     	; 0x35f6 <LCD_moveCursor+0x3a>
    35ec:	8c 81       	ldd	r24, Y+4	; 0x04
    35ee:	9d 81       	ldd	r25, Y+5	; 0x05
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	61 f0       	breq	.+24     	; 0x360c <LCD_moveCursor+0x50>
    35f4:	19 c0       	rjmp	.+50     	; 0x3628 <LCD_moveCursor+0x6c>
    35f6:	2c 81       	ldd	r18, Y+4	; 0x04
    35f8:	3d 81       	ldd	r19, Y+5	; 0x05
    35fa:	22 30       	cpi	r18, 0x02	; 2
    35fc:	31 05       	cpc	r19, r1
    35fe:	69 f0       	breq	.+26     	; 0x361a <LCD_moveCursor+0x5e>
    3600:	8c 81       	ldd	r24, Y+4	; 0x04
    3602:	9d 81       	ldd	r25, Y+5	; 0x05
    3604:	83 30       	cpi	r24, 0x03	; 3
    3606:	91 05       	cpc	r25, r1
    3608:	61 f0       	breq	.+24     	; 0x3622 <LCD_moveCursor+0x66>
    360a:	0e c0       	rjmp	.+28     	; 0x3628 <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	0b c0       	rjmp	.+22     	; 0x3628 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    3612:	8b 81       	ldd	r24, Y+3	; 0x03
    3614:	80 5c       	subi	r24, 0xC0	; 192
    3616:	89 83       	std	Y+1, r24	; 0x01
    3618:	07 c0       	rjmp	.+14     	; 0x3628 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	80 5f       	subi	r24, 0xF0	; 240
    361e:	89 83       	std	Y+1, r24	; 0x01
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	80 5b       	subi	r24, 0xB0	; 176
    3626:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	80 68       	ori	r24, 0x80	; 128
    362c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_sendCommand>
}
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	00 d0       	rcall	.+0      	; 0x364a <LCD_displayStringRowColumn+0x6>
    364a:	00 d0       	rcall	.+0      	; 0x364c <LCD_displayStringRowColumn+0x8>
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	6a 83       	std	Y+2, r22	; 0x02
    3654:	5c 83       	std	Y+4, r21	; 0x04
    3656:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	6a 81       	ldd	r22, Y+2	; 0x02
    365c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <LCD_moveCursor>
	LCD_displayString(string);
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	9c 81       	ldd	r25, Y+4	; 0x04
    3664:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LCD_displayString>
}
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	08 95       	ret

00003676 <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	62 97       	sbiw	r28, 0x12	; 18
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	de bf       	out	0x3e, r29	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	9a 8b       	std	Y+18, r25	; 0x12
    368c:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    368e:	89 89       	ldd	r24, Y+17	; 0x11
    3690:	9a 89       	ldd	r25, Y+18	; 0x12
    3692:	9e 01       	movw	r18, r28
    3694:	2f 5f       	subi	r18, 0xFF	; 255
    3696:	3f 4f       	sbci	r19, 0xFF	; 255
    3698:	b9 01       	movw	r22, r18
    369a:	4a e0       	ldi	r20, 0x0A	; 10
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <itoa>
	LCD_displayString(buffer);
    36a2:	ce 01       	movw	r24, r28
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LCD_displayString>
}
    36aa:	62 96       	adiw	r28, 0x12	; 18
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <KEYPAD_getPressedKey>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

uint8 KEYPAD_getPressedKey()
{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <KEYPAD_getPressedKey+0x6>
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	61 e0       	ldi	r22, 0x01	; 1
    36d4:	40 e0       	ldi	r20, 0x00	; 0
    36d6:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	62 e0       	ldi	r22, 0x02	; 2
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	63 e0       	ldi	r22, 0x03	; 3
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	64 e0       	ldi	r22, 0x04	; 4
    36f2:	40 e0       	ldi	r20, 0x00	; 0
    36f4:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	65 e0       	ldi	r22, 0x05	; 5
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	66 e0       	ldi	r22, 0x06	; 6
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	67 e0       	ldi	r22, 0x07	; 7
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    3716:	19 82       	std	Y+1, r1	; 0x01
    3718:	35 c0       	rjmp	.+106    	; 0x3784 <KEYPAD_getPressedKey+0xc8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	69 81       	ldd	r22, Y+1	; 0x01
    371e:	41 e0       	ldi	r20, 0x01	; 1
    3720:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	69 81       	ldd	r22, Y+1	; 0x01
    3728:	40 e0       	ldi	r20, 0x00	; 0
    372a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    372e:	1a 82       	std	Y+2, r1	; 0x02
    3730:	1e c0       	rjmp	.+60     	; 0x376e <KEYPAD_getPressedKey+0xb2>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	98 2f       	mov	r25, r24
    3736:	9c 5f       	subi	r25, 0xFC	; 252
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	69 2f       	mov	r22, r25
    373c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <GPIO_readPin>
    3740:	88 23       	and	r24, r24
    3742:	91 f4       	brne	.+36     	; 0x3768 <KEYPAD_getPressedKey+0xac>
				{
					#if (STANDARD_KEYPAD == FALSE)
						#if (KEYPAD_NUM_COLS == 3)
							return KEYPAD_4x3_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
						#elif (KEYPAD_NUM_COLS == 4)
							return KEYPAD_4x4_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	88 2f       	mov	r24, r24
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	98 2f       	mov	r25, r24
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	89 0f       	add	r24, r25
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	0e 94 c6 1b 	call	0x378c	; 0x378c <KEYPAD_4x4_adjustKeyNumber>
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
		}
	}
}
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	08 95       	ret
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	8f 5f       	subi	r24, 0xFF	; 255
    376c:	8a 83       	std	Y+2, r24	; 0x02
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	84 30       	cpi	r24, 0x04	; 4
    3772:	f8 f2       	brcs	.-66     	; 0x3732 <KEYPAD_getPressedKey+0x76>
						return ((row*KEYPAD_NUM_COLS)+col+1);
					#endif /* ---> STANDARD_KEYPAD */
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	69 81       	ldd	r22, Y+1	; 0x01
    3778:	40 e0       	ldi	r20, 0x00	; 0
    377a:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	8f 5f       	subi	r24, 0xFF	; 255
    3782:	89 83       	std	Y+1, r24	; 0x01
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	84 30       	cpi	r24, 0x04	; 4
    3788:	40 f2       	brcs	.-112    	; 0x371a <KEYPAD_getPressedKey+0x5e>
    378a:	c5 cf       	rjmp	.-118    	; 0x3716 <KEYPAD_getPressedKey+0x5a>

0000378c <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	00 d0       	rcall	.+0      	; 0x3792 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3792:	00 d0       	rcall	.+0      	; 0x3794 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    379a:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	3c 83       	std	Y+4, r19	; 0x04
    37a4:	2b 83       	std	Y+3, r18	; 0x03
    37a6:	8b 81       	ldd	r24, Y+3	; 0x03
    37a8:	9c 81       	ldd	r25, Y+4	; 0x04
    37aa:	88 30       	cpi	r24, 0x08	; 8
    37ac:	91 05       	cpc	r25, r1
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    37b0:	70 c0       	rjmp	.+224    	; 0x3892 <KEYPAD_4x4_adjustKeyNumber+0x106>
    37b2:	2b 81       	ldd	r18, Y+3	; 0x03
    37b4:	3c 81       	ldd	r19, Y+4	; 0x04
    37b6:	29 30       	cpi	r18, 0x09	; 9
    37b8:	31 05       	cpc	r19, r1
    37ba:	5c f5       	brge	.+86     	; 0x3812 <KEYPAD_4x4_adjustKeyNumber+0x86>
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	9c 81       	ldd	r25, Y+4	; 0x04
    37c0:	84 30       	cpi	r24, 0x04	; 4
    37c2:	91 05       	cpc	r25, r1
    37c4:	09 f4       	brne	.+2      	; 0x37c8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    37c6:	59 c0       	rjmp	.+178    	; 0x387a <KEYPAD_4x4_adjustKeyNumber+0xee>
    37c8:	2b 81       	ldd	r18, Y+3	; 0x03
    37ca:	3c 81       	ldd	r19, Y+4	; 0x04
    37cc:	25 30       	cpi	r18, 0x05	; 5
    37ce:	31 05       	cpc	r19, r1
    37d0:	9c f4       	brge	.+38     	; 0x37f8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	82 30       	cpi	r24, 0x02	; 2
    37d8:	91 05       	cpc	r25, r1
    37da:	09 f4       	brne	.+2      	; 0x37de <KEYPAD_4x4_adjustKeyNumber+0x52>
    37dc:	48 c0       	rjmp	.+144    	; 0x386e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    37de:	2b 81       	ldd	r18, Y+3	; 0x03
    37e0:	3c 81       	ldd	r19, Y+4	; 0x04
    37e2:	23 30       	cpi	r18, 0x03	; 3
    37e4:	31 05       	cpc	r19, r1
    37e6:	0c f0       	brlt	.+2      	; 0x37ea <KEYPAD_4x4_adjustKeyNumber+0x5e>
    37e8:	45 c0       	rjmp	.+138    	; 0x3874 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	81 30       	cpi	r24, 0x01	; 1
    37f0:	91 05       	cpc	r25, r1
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    37f4:	39 c0       	rjmp	.+114    	; 0x3868 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    37f6:	67 c0       	rjmp	.+206    	; 0x38c6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    37f8:	2b 81       	ldd	r18, Y+3	; 0x03
    37fa:	3c 81       	ldd	r19, Y+4	; 0x04
    37fc:	26 30       	cpi	r18, 0x06	; 6
    37fe:	31 05       	cpc	r19, r1
    3800:	09 f4       	brne	.+2      	; 0x3804 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3802:	41 c0       	rjmp	.+130    	; 0x3886 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3804:	8b 81       	ldd	r24, Y+3	; 0x03
    3806:	9c 81       	ldd	r25, Y+4	; 0x04
    3808:	87 30       	cpi	r24, 0x07	; 7
    380a:	91 05       	cpc	r25, r1
    380c:	0c f0       	brlt	.+2      	; 0x3810 <KEYPAD_4x4_adjustKeyNumber+0x84>
    380e:	3e c0       	rjmp	.+124    	; 0x388c <KEYPAD_4x4_adjustKeyNumber+0x100>
    3810:	37 c0       	rjmp	.+110    	; 0x3880 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3812:	2b 81       	ldd	r18, Y+3	; 0x03
    3814:	3c 81       	ldd	r19, Y+4	; 0x04
    3816:	2c 30       	cpi	r18, 0x0C	; 12
    3818:	31 05       	cpc	r19, r1
    381a:	09 f4       	brne	.+2      	; 0x381e <KEYPAD_4x4_adjustKeyNumber+0x92>
    381c:	46 c0       	rjmp	.+140    	; 0x38aa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    381e:	8b 81       	ldd	r24, Y+3	; 0x03
    3820:	9c 81       	ldd	r25, Y+4	; 0x04
    3822:	8d 30       	cpi	r24, 0x0D	; 13
    3824:	91 05       	cpc	r25, r1
    3826:	5c f4       	brge	.+22     	; 0x383e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3828:	2b 81       	ldd	r18, Y+3	; 0x03
    382a:	3c 81       	ldd	r19, Y+4	; 0x04
    382c:	2a 30       	cpi	r18, 0x0A	; 10
    382e:	31 05       	cpc	r19, r1
    3830:	b1 f1       	breq	.+108    	; 0x389e <KEYPAD_4x4_adjustKeyNumber+0x112>
    3832:	8b 81       	ldd	r24, Y+3	; 0x03
    3834:	9c 81       	ldd	r25, Y+4	; 0x04
    3836:	8b 30       	cpi	r24, 0x0B	; 11
    3838:	91 05       	cpc	r25, r1
    383a:	a4 f5       	brge	.+104    	; 0x38a4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    383c:	2d c0       	rjmp	.+90     	; 0x3898 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    383e:	2b 81       	ldd	r18, Y+3	; 0x03
    3840:	3c 81       	ldd	r19, Y+4	; 0x04
    3842:	2e 30       	cpi	r18, 0x0E	; 14
    3844:	31 05       	cpc	r19, r1
    3846:	b9 f1       	breq	.+110    	; 0x38b6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
    384a:	9c 81       	ldd	r25, Y+4	; 0x04
    384c:	8e 30       	cpi	r24, 0x0E	; 14
    384e:	91 05       	cpc	r25, r1
    3850:	7c f1       	brlt	.+94     	; 0x38b0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3852:	2b 81       	ldd	r18, Y+3	; 0x03
    3854:	3c 81       	ldd	r19, Y+4	; 0x04
    3856:	2f 30       	cpi	r18, 0x0F	; 15
    3858:	31 05       	cpc	r19, r1
    385a:	79 f1       	breq	.+94     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x12e>
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	9c 81       	ldd	r25, Y+4	; 0x04
    3860:	80 31       	cpi	r24, 0x10	; 16
    3862:	91 05       	cpc	r25, r1
    3864:	69 f1       	breq	.+90     	; 0x38c0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    3866:	2f c0       	rjmp	.+94     	; 0x38c6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    3868:	87 e0       	ldi	r24, 0x07	; 7
    386a:	89 83       	std	Y+1, r24	; 0x01
    386c:	2e c0       	rjmp	.+92     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    386e:	88 e0       	ldi	r24, 0x08	; 8
    3870:	89 83       	std	Y+1, r24	; 0x01
    3872:	2b c0       	rjmp	.+86     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    3874:	89 e0       	ldi	r24, 0x09	; 9
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	28 c0       	rjmp	.+80     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';
    387a:	85 e2       	ldi	r24, 0x25	; 37
    387c:	89 83       	std	Y+1, r24	; 0x01
    387e:	25 c0       	rjmp	.+74     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    3880:	84 e0       	ldi	r24, 0x04	; 4
    3882:	89 83       	std	Y+1, r24	; 0x01
    3884:	22 c0       	rjmp	.+68     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    3886:	85 e0       	ldi	r24, 0x05	; 5
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	1f c0       	rjmp	.+62     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    388c:	86 e0       	ldi	r24, 0x06	; 6
    388e:	89 83       	std	Y+1, r24	; 0x01
    3890:	1c c0       	rjmp	.+56     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';
    3892:	8a e2       	ldi	r24, 0x2A	; 42
    3894:	89 83       	std	Y+1, r24	; 0x01
    3896:	19 c0       	rjmp	.+50     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	89 83       	std	Y+1, r24	; 0x01
    389c:	16 c0       	rjmp	.+44     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    389e:	82 e0       	ldi	r24, 0x02	; 2
    38a0:	89 83       	std	Y+1, r24	; 0x01
    38a2:	13 c0       	rjmp	.+38     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    38a4:	83 e0       	ldi	r24, 0x03	; 3
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	10 c0       	rjmp	.+32     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    38aa:	8d e2       	ldi	r24, 0x2D	; 45
    38ac:	89 83       	std	Y+1, r24	; 0x01
    38ae:	0d c0       	rjmp	.+26     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;
    38b0:	8d e0       	ldi	r24, 0x0D	; 13
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	0a c0       	rjmp	.+20     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    38b6:	19 82       	std	Y+1, r1	; 0x01
    38b8:	08 c0       	rjmp	.+16     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';
    38ba:	8d e3       	ldi	r24, 0x3D	; 61
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	05 c0       	rjmp	.+10     	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';
    38c0:	8b e2       	ldi	r24, 0x2B	; 43
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	02 c0       	rjmp	.+4      	; 0x38ca <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    38c6:	8a 81       	ldd	r24, Y+2	; 0x02
    38c8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <BUZZER_init>:

#include "buzzer.h"
#include "../../MCAL/GPIO/gpio.h"

void BUZZER_init(void)
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
}
    38ec:	cf 91       	pop	r28
    38ee:	df 91       	pop	r29
    38f0:	08 95       	ret

000038f2 <BUZZER_on>:

void BUZZER_on(void)
{
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	41 e0       	ldi	r20, 0x01	; 1
    3900:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <BUZZER_off>:

void BUZZER_off(void)
{
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <appStart>:

#include "app.h"


void appStart(void)
{
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62

}
    392a:	cf 91       	pop	r28
    392c:	df 91       	pop	r29
    392e:	08 95       	ret

00003930 <main>:
*******************************************************************************/

#include "APP/app.h"

int main(void)
{
    3930:	df 93       	push	r29
    3932:	cf 93       	push	r28
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
	appStart();
    3938:	0e 94 91 1c 	call	0x3922	; 0x3922 <appStart>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
}
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <__mulsi3>:
    3946:	62 9f       	mul	r22, r18
    3948:	d0 01       	movw	r26, r0
    394a:	73 9f       	mul	r23, r19
    394c:	f0 01       	movw	r30, r0
    394e:	82 9f       	mul	r24, r18
    3950:	e0 0d       	add	r30, r0
    3952:	f1 1d       	adc	r31, r1
    3954:	64 9f       	mul	r22, r20
    3956:	e0 0d       	add	r30, r0
    3958:	f1 1d       	adc	r31, r1
    395a:	92 9f       	mul	r25, r18
    395c:	f0 0d       	add	r31, r0
    395e:	83 9f       	mul	r24, r19
    3960:	f0 0d       	add	r31, r0
    3962:	74 9f       	mul	r23, r20
    3964:	f0 0d       	add	r31, r0
    3966:	65 9f       	mul	r22, r21
    3968:	f0 0d       	add	r31, r0
    396a:	99 27       	eor	r25, r25
    396c:	72 9f       	mul	r23, r18
    396e:	b0 0d       	add	r27, r0
    3970:	e1 1d       	adc	r30, r1
    3972:	f9 1f       	adc	r31, r25
    3974:	63 9f       	mul	r22, r19
    3976:	b0 0d       	add	r27, r0
    3978:	e1 1d       	adc	r30, r1
    397a:	f9 1f       	adc	r31, r25
    397c:	bd 01       	movw	r22, r26
    397e:	cf 01       	movw	r24, r30
    3980:	11 24       	eor	r1, r1
    3982:	08 95       	ret

00003984 <__udivmodhi4>:
    3984:	aa 1b       	sub	r26, r26
    3986:	bb 1b       	sub	r27, r27
    3988:	51 e1       	ldi	r21, 0x11	; 17
    398a:	07 c0       	rjmp	.+14     	; 0x399a <__udivmodhi4_ep>

0000398c <__udivmodhi4_loop>:
    398c:	aa 1f       	adc	r26, r26
    398e:	bb 1f       	adc	r27, r27
    3990:	a6 17       	cp	r26, r22
    3992:	b7 07       	cpc	r27, r23
    3994:	10 f0       	brcs	.+4      	; 0x399a <__udivmodhi4_ep>
    3996:	a6 1b       	sub	r26, r22
    3998:	b7 0b       	sbc	r27, r23

0000399a <__udivmodhi4_ep>:
    399a:	88 1f       	adc	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	5a 95       	dec	r21
    39a0:	a9 f7       	brne	.-22     	; 0x398c <__udivmodhi4_loop>
    39a2:	80 95       	com	r24
    39a4:	90 95       	com	r25
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	08 95       	ret

000039ac <__udivmodsi4>:
    39ac:	a1 e2       	ldi	r26, 0x21	; 33
    39ae:	1a 2e       	mov	r1, r26
    39b0:	aa 1b       	sub	r26, r26
    39b2:	bb 1b       	sub	r27, r27
    39b4:	fd 01       	movw	r30, r26
    39b6:	0d c0       	rjmp	.+26     	; 0x39d2 <__udivmodsi4_ep>

000039b8 <__udivmodsi4_loop>:
    39b8:	aa 1f       	adc	r26, r26
    39ba:	bb 1f       	adc	r27, r27
    39bc:	ee 1f       	adc	r30, r30
    39be:	ff 1f       	adc	r31, r31
    39c0:	a2 17       	cp	r26, r18
    39c2:	b3 07       	cpc	r27, r19
    39c4:	e4 07       	cpc	r30, r20
    39c6:	f5 07       	cpc	r31, r21
    39c8:	20 f0       	brcs	.+8      	; 0x39d2 <__udivmodsi4_ep>
    39ca:	a2 1b       	sub	r26, r18
    39cc:	b3 0b       	sbc	r27, r19
    39ce:	e4 0b       	sbc	r30, r20
    39d0:	f5 0b       	sbc	r31, r21

000039d2 <__udivmodsi4_ep>:
    39d2:	66 1f       	adc	r22, r22
    39d4:	77 1f       	adc	r23, r23
    39d6:	88 1f       	adc	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	1a 94       	dec	r1
    39dc:	69 f7       	brne	.-38     	; 0x39b8 <__udivmodsi4_loop>
    39de:	60 95       	com	r22
    39e0:	70 95       	com	r23
    39e2:	80 95       	com	r24
    39e4:	90 95       	com	r25
    39e6:	9b 01       	movw	r18, r22
    39e8:	ac 01       	movw	r20, r24
    39ea:	bd 01       	movw	r22, r26
    39ec:	cf 01       	movw	r24, r30
    39ee:	08 95       	ret

000039f0 <__prologue_saves__>:
    39f0:	2f 92       	push	r2
    39f2:	3f 92       	push	r3
    39f4:	4f 92       	push	r4
    39f6:	5f 92       	push	r5
    39f8:	6f 92       	push	r6
    39fa:	7f 92       	push	r7
    39fc:	8f 92       	push	r8
    39fe:	9f 92       	push	r9
    3a00:	af 92       	push	r10
    3a02:	bf 92       	push	r11
    3a04:	cf 92       	push	r12
    3a06:	df 92       	push	r13
    3a08:	ef 92       	push	r14
    3a0a:	ff 92       	push	r15
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	ca 1b       	sub	r28, r26
    3a1a:	db 0b       	sbc	r29, r27
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	09 94       	ijmp

00003a28 <__epilogue_restores__>:
    3a28:	2a 88       	ldd	r2, Y+18	; 0x12
    3a2a:	39 88       	ldd	r3, Y+17	; 0x11
    3a2c:	48 88       	ldd	r4, Y+16	; 0x10
    3a2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a30:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a32:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a34:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a36:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a38:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a3a:	b9 84       	ldd	r11, Y+9	; 0x09
    3a3c:	c8 84       	ldd	r12, Y+8	; 0x08
    3a3e:	df 80       	ldd	r13, Y+7	; 0x07
    3a40:	ee 80       	ldd	r14, Y+6	; 0x06
    3a42:	fd 80       	ldd	r15, Y+5	; 0x05
    3a44:	0c 81       	ldd	r16, Y+4	; 0x04
    3a46:	1b 81       	ldd	r17, Y+3	; 0x03
    3a48:	aa 81       	ldd	r26, Y+2	; 0x02
    3a4a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a4c:	ce 0f       	add	r28, r30
    3a4e:	d1 1d       	adc	r29, r1
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	f8 94       	cli
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	0f be       	out	0x3f, r0	; 63
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	ed 01       	movw	r28, r26
    3a5c:	08 95       	ret

00003a5e <itoa>:
    3a5e:	fb 01       	movw	r30, r22
    3a60:	9f 01       	movw	r18, r30
    3a62:	e8 94       	clt
    3a64:	42 30       	cpi	r20, 0x02	; 2
    3a66:	c4 f0       	brlt	.+48     	; 0x3a98 <itoa+0x3a>
    3a68:	45 32       	cpi	r20, 0x25	; 37
    3a6a:	b4 f4       	brge	.+44     	; 0x3a98 <itoa+0x3a>
    3a6c:	4a 30       	cpi	r20, 0x0A	; 10
    3a6e:	29 f4       	brne	.+10     	; 0x3a7a <itoa+0x1c>
    3a70:	97 fb       	bst	r25, 7
    3a72:	1e f4       	brtc	.+6      	; 0x3a7a <itoa+0x1c>
    3a74:	90 95       	com	r25
    3a76:	81 95       	neg	r24
    3a78:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7a:	64 2f       	mov	r22, r20
    3a7c:	77 27       	eor	r23, r23
    3a7e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__udivmodhi4>
    3a82:	80 5d       	subi	r24, 0xD0	; 208
    3a84:	8a 33       	cpi	r24, 0x3A	; 58
    3a86:	0c f0       	brlt	.+2      	; 0x3a8a <itoa+0x2c>
    3a88:	89 5d       	subi	r24, 0xD9	; 217
    3a8a:	81 93       	st	Z+, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	a1 f7       	brne	.-24     	; 0x3a7a <itoa+0x1c>
    3a92:	16 f4       	brtc	.+4      	; 0x3a98 <itoa+0x3a>
    3a94:	5d e2       	ldi	r21, 0x2D	; 45
    3a96:	51 93       	st	Z+, r21
    3a98:	10 82       	st	Z, r1
    3a9a:	c9 01       	movw	r24, r18
    3a9c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <strrev>

00003aa0 <strrev>:
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	67 2f       	mov	r22, r23
    3aa6:	71 91       	ld	r23, Z+
    3aa8:	77 23       	and	r23, r23
    3aaa:	e1 f7       	brne	.-8      	; 0x3aa4 <strrev+0x4>
    3aac:	32 97       	sbiw	r30, 0x02	; 2
    3aae:	04 c0       	rjmp	.+8      	; 0x3ab8 <strrev+0x18>
    3ab0:	7c 91       	ld	r23, X
    3ab2:	6d 93       	st	X+, r22
    3ab4:	70 83       	st	Z, r23
    3ab6:	62 91       	ld	r22, -Z
    3ab8:	ae 17       	cp	r26, r30
    3aba:	bf 07       	cpc	r27, r31
    3abc:	c8 f3       	brcs	.-14     	; 0x3ab0 <strrev+0x10>
    3abe:	08 95       	ret

00003ac0 <_exit>:
    3ac0:	f8 94       	cli

00003ac2 <__stop_program>:
    3ac2:	ff cf       	rjmp	.-2      	; 0x3ac2 <__stop_program>
