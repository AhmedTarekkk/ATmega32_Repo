
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000038c6  0000395a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800168  00800168  00003a62  2**0
                  ALLOC
  3 .stab         00003d98  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b2a  00000000  00000000  000077fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009326  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000094c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000096b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ce49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e020  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ec       	ldi	r30, 0xC6	; 198
      78:	f8 e3       	ldi	r31, 0x38	; 56
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 99 1b 	call	0x3732	; 0x3732 <main>
      8a:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(USART_RXC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e58:	80 91 68 01 	lds	r24, 0x0168
     e5c:	90 91 69 01 	lds	r25, 0x0169
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_13+0x40>
	{
		(*g_callBackPtr)();
     e64:	e0 91 68 01 	lds	r30, 0x0168
     e68:	f0 91 69 01 	lds	r31, 0x0169
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <UART_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void UART_init(const UART_ConfigType * Configptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <UART_init+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <UART_init+0x8>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value ;
	UCSRA = (1<<U2X); /* Double transmission speed */
     ea4:	eb e2       	ldi	r30, 0x2B	; 43
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN) ;	/* Transmission and receive enable */
     eac:	ea e2       	ldi	r30, 0x2A	; 42
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	88 e1       	ldi	r24, 0x18	; 24
     eb2:	80 83       	st	Z, r24
	UCSRB = (UCSRB & CLEAR_RECEIVE_METHOD_MASK ) | ( (Configptr->RECEVIE_METHOD<<7) ) ; /* To configure the UART with interrupt or polling */
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	28 2f       	mov	r18, r24
     ec0:	2f 77       	andi	r18, 0x7F	; 127
     ec2:	eb 81       	ldd	r30, Y+3	; 0x03
     ec4:	fc 81       	ldd	r31, Y+4	; 0x04
     ec6:	80 85       	ldd	r24, Z+8	; 0x08
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	96 95       	lsr	r25
     ece:	98 2f       	mov	r25, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	97 95       	ror	r25
     ed4:	87 95       	ror	r24
     ed6:	82 2b       	or	r24, r18
     ed8:	8c 93       	st	X, r24

	SET_BIT(UCSRC,URSEL); /* so we can write in UCSRC register */
     eda:	a0 e4       	ldi	r26, 0x40	; 64
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e0 e4       	ldi	r30, 0x40	; 64
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_CHAR_SIZE_MASK ) | ( (Configptr->CHAR_SIZE)<<1) ; /* setting the number of bits in UART frame */
     ee8:	a0 e4       	ldi	r26, 0x40	; 64
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e0 e4       	ldi	r30, 0x40	; 64
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	28 2f       	mov	r18, r24
     ef4:	29 7f       	andi	r18, 0xF9	; 249
     ef6:	eb 81       	ldd	r30, Y+3	; 0x03
     ef8:	fc 81       	ldd	r31, Y+4	; 0x04
     efa:	86 81       	ldd	r24, Z+6	; 0x06
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	82 2b       	or	r24, r18
     f06:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_STOP_BITS_MASK) | ( (Configptr->STOP_BIT)<<3) ; /* set the number of stop bits */
     f08:	a0 e4       	ldi	r26, 0x40	; 64
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e0 e4       	ldi	r30, 0x40	; 64
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	28 2f       	mov	r18, r24
     f14:	27 7f       	andi	r18, 0xF7	; 247
     f16:	eb 81       	ldd	r30, Y+3	; 0x03
     f18:	fc 81       	ldd	r31, Y+4	; 0x04
     f1a:	85 81       	ldd	r24, Z+5	; 0x05
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	82 2b       	or	r24, r18
     f2e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & CLEAR_PARITY_MASK ) | ( (Configptr->PARITY)<<4) ; /* setting the PARITY */
     f30:	a0 e4       	ldi	r26, 0x40	; 64
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e0 e4       	ldi	r30, 0x40	; 64
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	28 2f       	mov	r18, r24
     f3c:	2f 7c       	andi	r18, 0xCF	; 207
     f3e:	eb 81       	ldd	r30, Y+3	; 0x03
     f40:	fc 81       	ldd	r31, Y+4	; 0x04
     f42:	87 81       	ldd	r24, Z+7	; 0x07
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	82 95       	swap	r24
     f4a:	92 95       	swap	r25
     f4c:	90 7f       	andi	r25, 0xF0	; 240
     f4e:	98 27       	eor	r25, r24
     f50:	80 7f       	andi	r24, 0xF0	; 240
     f52:	98 27       	eor	r25, r24
     f54:	82 2b       	or	r24, r18
     f56:	8c 93       	st	X, r24

	CLEAR_BIT(UBRRH,URSEL); /* to access UBRRH not UCSRC */
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e0 e4       	ldi	r30, 0x40	; 64
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Configptr->BAUD_RATE * 8UL))) - 1);
     f66:	eb 81       	ldd	r30, Y+3	; 0x03
     f68:	fc 81       	ldd	r31, Y+4	; 0x04
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	a2 81       	ldd	r26, Z+2	; 0x02
     f70:	b3 81       	ldd	r27, Z+3	; 0x03
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	aa 1f       	adc	r26, r26
     f78:	bb 1f       	adc	r27, r27
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	aa 1f       	adc	r26, r26
     f80:	bb 1f       	adc	r27, r27
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	9c 01       	movw	r18, r24
     f8c:	ad 01       	movw	r20, r26
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	94 e2       	ldi	r25, 0x24	; 36
     f92:	a4 ef       	ldi	r26, 0xF4	; 244
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__udivmodsi4>
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	89 2f       	mov	r24, r25
     fb2:	99 27       	eor	r25, r25
     fb4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     fb6:	e9 e2       	ldi	r30, 0x29	; 41
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 83       	st	Z, r24

	g_endStringChar = Configptr->END_SRTING;
     fbe:	eb 81       	ldd	r30, Y+3	; 0x03
     fc0:	fc 81       	ldd	r31, Y+4	; 0x04
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	80 93 6a 01 	sts	0x016A, r24
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     fe2:	eb e2       	ldi	r30, 0x2B	; 43
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 72       	andi	r24, 0x20	; 32
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	b9 f3       	breq	.-18     	; 0xfe2 <UART_sendByte+0xc>

	UDR = data;
     ff4:	ec e2       	ldi	r30, 0x2C	; 44
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	80 83       	st	Z, r24
}
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    100c:	eb e2       	ldi	r30, 0x2B	; 43
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	dc f7       	brge	.-10     	; 0x100c <UART_receiveByte+0x8>

	return UDR;
    1016:	ec e2       	ldi	r30, 0x2C	; 44
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <UART_sendString+0x6>
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9b 83       	std	Y+3, r25	; 0x03
    1030:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	0e c0       	rjmp	.+28     	; 0x1052 <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	fc 01       	movw	r30, r24
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	80 81       	ld	r24, Z
    1048:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <UART_sendByte>
}

void UART_sendString(const uint8 *Str)
{
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	39 f7       	brne	.-50     	; 0x1036 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
	}
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <UART_receiveString+0xa>
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9b 83       	std	Y+3, r25	; 0x03
    1086:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1088:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	8c 01       	movw	r16, r24
    1096:	02 0f       	add	r16, r18
    1098:	13 1f       	adc	r17, r19
    109a:	0e 94 02 08 	call	0x1004	; 0x1004 <UART_receiveByte>
    109e:	f8 01       	movw	r30, r16
    10a0:	80 83       	st	Z, r24
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
	{
		i++;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	8c 01       	movw	r16, r24
    10b6:	02 0f       	add	r16, r18
    10b8:	13 1f       	adc	r17, r19
    10ba:	0e 94 02 08 	call	0x1004	; 0x1004 <UART_receiveByte>
    10be:	f8 01       	movw	r30, r16
    10c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	fc 01       	movw	r30, r24
    10ce:	e2 0f       	add	r30, r18
    10d0:	f3 1f       	adc	r31, r19
    10d2:	90 81       	ld	r25, Z
    10d4:	80 91 6a 01 	lds	r24, 0x016A
    10d8:	98 17       	cp	r25, r24
    10da:	21 f7       	brne	.-56     	; 0x10a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	10 82       	st	Z, r1

}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <UART_setCallBack>:

void UART_setCallBack( void(*a_ptr)(void) )
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <UART_setCallBack+0x6>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	90 93 69 01 	sts	0x0169, r25
    1114:	80 93 68 01 	sts	0x0168, r24
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <PWM_Timer0_Start>:
#include "pwm0.h"
#include "avr/io.h"
#include "../GPIO/gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer with
	 * Non inverting fast PWM Mode
	 * Clock frequency = F_CPU/8
	 */
	TCNT0 = 0;
    112e:	e2 e5       	ldi	r30, 0x52	; 82
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	10 82       	st	Z, r1
	OCR0 = (uint8)((uint16)(duty_cycle*255)/100) ; /* casting the value so we don't get overflow */
    1134:	ec e5       	ldi	r30, 0x5C	; 92
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	48 2f       	mov	r20, r24
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	ca 01       	movw	r24, r20
    1140:	9c 01       	movw	r18, r24
    1142:	22 0f       	add	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	c9 01       	movw	r24, r18
    1148:	96 95       	lsr	r25
    114a:	98 2f       	mov	r25, r24
    114c:	88 27       	eor	r24, r24
    114e:	97 95       	ror	r25
    1150:	87 95       	ror	r24
    1152:	82 1b       	sub	r24, r18
    1154:	93 0b       	sbc	r25, r19
    1156:	84 0f       	add	r24, r20
    1158:	95 1f       	adc	r25, r21
    115a:	24 e6       	ldi	r18, 0x64	; 100
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	b9 01       	movw	r22, r18
    1160:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__udivmodhi4>
    1164:	cb 01       	movw	r24, r22
    1166:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); /* PWM pin as O/P */
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	63 e0       	ldi	r22, 0x03	; 3
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    1172:	e3 e5       	ldi	r30, 0x53	; 83
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a e6       	ldi	r24, 0x6A	; 106
    1178:	80 83       	st	Z, r24

}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <__vector_6>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	2f 93       	push	r18
    118e:	3f 93       	push	r19
    1190:	4f 93       	push	r20
    1192:	5f 93       	push	r21
    1194:	6f 93       	push	r22
    1196:	7f 93       	push	r23
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    11ac:	80 91 6b 01 	lds	r24, 0x016B
    11b0:	90 91 6c 01 	lds	r25, 0x016C
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	29 f0       	breq	.+10     	; 0x11c2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11b8:	e0 91 6b 01 	lds	r30, 0x016B
    11bc:	f0 91 6c 01 	lds	r31, 0x016C
    11c0:	09 95       	icall
	}
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	ff 91       	pop	r31
    11c8:	ef 91       	pop	r30
    11ca:	bf 91       	pop	r27
    11cc:	af 91       	pop	r26
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	7f 91       	pop	r23
    11d4:	6f 91       	pop	r22
    11d6:	5f 91       	pop	r21
    11d8:	4f 91       	pop	r20
    11da:	3f 91       	pop	r19
    11dc:	2f 91       	pop	r18
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <ICU_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <ICU_init+0x6>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	66 e0       	ldi	r22, 0x06	; 6
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1200:	ef e4       	ldi	r30, 0x4F	; 79
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8c e0       	ldi	r24, 0x0C	; 12
    1206:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1208:	ae e4       	ldi	r26, 0x4E	; 78
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ee e4       	ldi	r30, 0x4E	; 78
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	98 2f       	mov	r25, r24
    1214:	98 7f       	andi	r25, 0xF8	; 248
    1216:	e9 81       	ldd	r30, Y+1	; 0x01
    1218:	fa 81       	ldd	r31, Y+2	; 0x02
    121a:	80 81       	ld	r24, Z
    121c:	89 2b       	or	r24, r25
    121e:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1220:	ae e4       	ldi	r26, 0x4E	; 78
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ee e4       	ldi	r30, 0x4E	; 78
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	28 2f       	mov	r18, r24
    122c:	2f 7b       	andi	r18, 0xBF	; 191
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	00 24       	eor	r0, r0
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	07 94       	ror	r0
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	07 94       	ror	r0
    1246:	98 2f       	mov	r25, r24
    1248:	80 2d       	mov	r24, r0
    124a:	82 2b       	or	r24, r18
    124c:	8c 93       	st	X, r24
	TCNT1 = 0;
    124e:	ec e4       	ldi	r30, 0x4C	; 76
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	11 82       	std	Z+1, r1	; 0x01
    1254:	10 82       	st	Z, r1
	ICR1 = 0;
    1256:	e6 e4       	ldi	r30, 0x46	; 70
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	11 82       	std	Z+1, r1	; 0x01
    125c:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TICIE1);
    125e:	a9 e5       	ldi	r26, 0x59	; 89
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e9 e5       	ldi	r30, 0x59	; 89
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 62       	ori	r24, 0x20	; 32
    126a:	8c 93       	st	X, r24
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <ICU_setCallBack+0x6>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	90 93 6c 01 	sts	0x016C, r25
    128c:	80 93 6b 01 	sts	0x016B, r24
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((a_edgeType)<<6);
    12a6:	ae e4       	ldi	r26, 0x4E	; 78
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ee e4       	ldi	r30, 0x4E	; 78
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	28 2f       	mov	r18, r24
    12b2:	2f 7b       	andi	r18, 0xBF	; 191
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	00 24       	eor	r0, r0
    12bc:	96 95       	lsr	r25
    12be:	87 95       	ror	r24
    12c0:	07 94       	ror	r0
    12c2:	96 95       	lsr	r25
    12c4:	87 95       	ror	r24
    12c6:	07 94       	ror	r0
    12c8:	98 2f       	mov	r25, r24
    12ca:	80 2d       	mov	r24, r0
    12cc:	82 2b       	or	r24, r18
    12ce:	8c 93       	st	X, r24
}
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    12e0:	e6 e4       	ldi	r30, 0x46	; 70
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    12f6:	e2 e5       	ldi	r30, 0x52	; 82
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	10 82       	st	Z, r1
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <ICU_DeInit>:

void ICU_DeInit(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    130a:	ef e4       	ldi	r30, 0x4F	; 79
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1310:	ee e4       	ldi	r30, 0x4E	; 78
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	10 82       	st	Z, r1
	TCNT1 = 0;
    1316:	ec e4       	ldi	r30, 0x4C	; 76
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	11 82       	std	Z+1, r1	; 0x01
    131c:	10 82       	st	Z, r1
	ICR1 = 0;
    131e:	e6 e4       	ldi	r30, 0x46	; 70
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	11 82       	std	Z+1, r1	; 0x01
    1324:	10 82       	st	Z, r1

	CLEAR_BIT(TIMSK,TICIE1);
    1326:	a9 e5       	ldi	r26, 0x59	; 89
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e9 e5       	ldi	r30, 0x59	; 89
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8f 7d       	andi	r24, 0xDF	; 223
    1332:	8c 93       	st	X, r24
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <GPIO_setupPinDirection+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <GPIO_setupPinDirection+0x8>
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	6a 83       	std	Y+2, r22	; 0x02
    134c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	08 f0       	brcs	.+2      	; 0x1356 <GPIO_setupPinDirection+0x1c>
    1354:	d5 c0       	rjmp	.+426    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	08 f0       	brcs	.+2      	; 0x135e <GPIO_setupPinDirection+0x24>
    135c:	d1 c0       	rjmp	.+418    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3d 83       	std	Y+5, r19	; 0x05
    1366:	2c 83       	std	Y+4, r18	; 0x04
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_setupPinDirection+0x3a>
    1372:	43 c0       	rjmp	.+134    	; 0x13fa <GPIO_setupPinDirection+0xc0>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <GPIO_setupPinDirection+0x4e>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	71 f0       	breq	.+28     	; 0x13a2 <GPIO_setupPinDirection+0x68>
    1386:	bc c0       	rjmp	.+376    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
    1388:	2c 81       	ldd	r18, Y+4	; 0x04
    138a:	3d 81       	ldd	r19, Y+5	; 0x05
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <GPIO_setupPinDirection+0x5a>
    1392:	5f c0       	rjmp	.+190    	; 0x1452 <GPIO_setupPinDirection+0x118>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <GPIO_setupPinDirection+0x66>
    139e:	85 c0       	rjmp	.+266    	; 0x14aa <GPIO_setupPinDirection+0x170>
    13a0:	af c0       	rjmp	.+350    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	a1 f4       	brne	.+40     	; 0x13d0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_setupPinDirection+0x8c>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_setupPinDirection+0x88>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	98 c0       	rjmp	.+304    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13d0:	aa e3       	ldi	r26, 0x3A	; 58
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ea e3       	ldi	r30, 0x3A	; 58
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_setupPinDirection+0xb4>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_setupPinDirection+0xb0>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	83 c0       	rjmp	.+262    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	a1 f4       	brne	.+40     	; 0x1428 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1400:	a7 e3       	ldi	r26, 0x37	; 55
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e7 e3       	ldi	r30, 0x37	; 55
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_setupPinDirection+0xe4>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_setupPinDirection+0xe0>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	6c c0       	rjmp	.+216    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1428:	a7 e3       	ldi	r26, 0x37	; 55
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e7 e3       	ldi	r30, 0x37	; 55
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <GPIO_setupPinDirection+0x10c>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <GPIO_setupPinDirection+0x108>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	57 c0       	rjmp	.+174    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	a1 f4       	brne	.+40     	; 0x1480 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1458:	a4 e3       	ldi	r26, 0x34	; 52
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e4 e3       	ldi	r30, 0x34	; 52
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <GPIO_setupPinDirection+0x13c>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <GPIO_setupPinDirection+0x138>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	40 c0       	rjmp	.+128    	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1480:	a4 e3       	ldi	r26, 0x34	; 52
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e4 e3       	ldi	r30, 0x34	; 52
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_setupPinDirection+0x164>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_setupPinDirection+0x160>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	a1 f4       	brne	.+40     	; 0x14d8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14b0:	a1 e3       	ldi	r26, 0x31	; 49
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e1 e3       	ldi	r30, 0x31	; 49
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_setupPinDirection+0x194>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_setupPinDirection+0x190>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14d8:	a1 e3       	ldi	r26, 0x31	; 49
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <GPIO_setupPinDirection+0x1bc>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <GPIO_setupPinDirection+0x1b8>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <GPIO_writePin+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_writePin+0x8>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
    1522:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	08 f0       	brcs	.+2      	; 0x152c <GPIO_writePin+0x1c>
    152a:	d5 c0       	rjmp	.+426    	; 0x16d6 <GPIO_writePin+0x1c6>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	08 f0       	brcs	.+2      	; 0x1534 <GPIO_writePin+0x24>
    1532:	d1 c0       	rjmp	.+418    	; 0x16d6 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_writePin+0x3a>
    1548:	43 c0       	rjmp	.+134    	; 0x15d0 <GPIO_writePin+0xc0>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <GPIO_writePin+0x4e>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	71 f0       	breq	.+28     	; 0x1578 <GPIO_writePin+0x68>
    155c:	bc c0       	rjmp	.+376    	; 0x16d6 <GPIO_writePin+0x1c6>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_writePin+0x5a>
    1568:	5f c0       	rjmp	.+190    	; 0x1628 <GPIO_writePin+0x118>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <GPIO_writePin+0x66>
    1574:	85 c0       	rjmp	.+266    	; 0x1680 <GPIO_writePin+0x170>
    1576:	af c0       	rjmp	.+350    	; 0x16d6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	a1 f4       	brne	.+40     	; 0x15a6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    157e:	ab e3       	ldi	r26, 0x3B	; 59
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_writePin+0x8c>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_writePin+0x88>
    15a0:	84 2b       	or	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	98 c0       	rjmp	.+304    	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15a6:	ab e3       	ldi	r26, 0x3B	; 59
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <GPIO_writePin+0xb4>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <GPIO_writePin+0xb0>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	83 c0       	rjmp	.+262    	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_writePin+0xe4>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_writePin+0xe0>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	6c c0       	rjmp	.+216    	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15fe:	a8 e3       	ldi	r26, 0x38	; 56
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_writePin+0x10c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_writePin+0x108>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	57 c0       	rjmp	.+174    	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	a1 f4       	brne	.+40     	; 0x1656 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    162e:	a5 e3       	ldi	r26, 0x35	; 53
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e3       	ldi	r30, 0x35	; 53
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_writePin+0x13c>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_writePin+0x138>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	40 c0       	rjmp	.+128    	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1656:	a5 e3       	ldi	r26, 0x35	; 53
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e3       	ldi	r30, 0x35	; 53
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_writePin+0x164>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_writePin+0x160>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	2b c0       	rjmp	.+86     	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a1 f4       	brne	.+40     	; 0x16ae <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1686:	a2 e3       	ldi	r26, 0x32	; 50
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_writePin+0x194>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_writePin+0x190>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16ae:	a2 e3       	ldi	r26, 0x32	; 50
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e2 e3       	ldi	r30, 0x32	; 50
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_writePin+0x1bc>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_writePin+0x1b8>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_readPin+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_readPin+0x8>
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	8a 83       	std	Y+2, r24	; 0x02
    16f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    16f8:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	88 30       	cpi	r24, 0x08	; 8
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <GPIO_readPin+0x1c>
    1700:	84 c0       	rjmp	.+264    	; 0x180a <GPIO_readPin+0x124>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	08 f0       	brcs	.+2      	; 0x170a <GPIO_readPin+0x24>
    1708:	80 c0       	rjmp	.+256    	; 0x180a <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	4c 81       	ldd	r20, Y+4	; 0x04
    1716:	5d 81       	ldd	r21, Y+5	; 0x05
    1718:	41 30       	cpi	r20, 0x01	; 1
    171a:	51 05       	cpc	r21, r1
    171c:	79 f1       	breq	.+94     	; 0x177c <GPIO_readPin+0x96>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	91 05       	cpc	r25, r1
    1726:	34 f4       	brge	.+12     	; 0x1734 <GPIO_readPin+0x4e>
    1728:	2c 81       	ldd	r18, Y+4	; 0x04
    172a:	3d 81       	ldd	r19, Y+5	; 0x05
    172c:	21 15       	cp	r18, r1
    172e:	31 05       	cpc	r19, r1
    1730:	69 f0       	breq	.+26     	; 0x174c <GPIO_readPin+0x66>
    1732:	6b c0       	rjmp	.+214    	; 0x180a <GPIO_readPin+0x124>
    1734:	4c 81       	ldd	r20, Y+4	; 0x04
    1736:	5d 81       	ldd	r21, Y+5	; 0x05
    1738:	42 30       	cpi	r20, 0x02	; 2
    173a:	51 05       	cpc	r21, r1
    173c:	b9 f1       	breq	.+110    	; 0x17ac <GPIO_readPin+0xc6>
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	91 05       	cpc	r25, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <GPIO_readPin+0x64>
    1748:	49 c0       	rjmp	.+146    	; 0x17dc <GPIO_readPin+0xf6>
    174a:	5f c0       	rjmp	.+190    	; 0x180a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    174c:	e9 e3       	ldi	r30, 0x39	; 57
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a9 01       	movw	r20, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_readPin+0x7e>
    1760:	55 95       	asr	r21
    1762:	47 95       	ror	r20
    1764:	8a 95       	dec	r24
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_readPin+0x7a>
    1768:	ca 01       	movw	r24, r20
    176a:	81 70       	andi	r24, 0x01	; 1
    176c:	90 70       	andi	r25, 0x00	; 0
    176e:	88 23       	and	r24, r24
    1770:	19 f0       	breq	.+6      	; 0x1778 <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	49 c0       	rjmp	.+146    	; 0x180a <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	47 c0       	rjmp	.+142    	; 0x180a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    177c:	e6 e3       	ldi	r30, 0x36	; 54
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <GPIO_readPin+0xae>
    1790:	55 95       	asr	r21
    1792:	47 95       	ror	r20
    1794:	8a 95       	dec	r24
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <GPIO_readPin+0xaa>
    1798:	ca 01       	movw	r24, r20
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	88 23       	and	r24, r24
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	31 c0       	rjmp	.+98     	; 0x180a <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    17a8:	19 82       	std	Y+1, r1	; 0x01
    17aa:	2f c0       	rjmp	.+94     	; 0x180a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    17ac:	e3 e3       	ldi	r30, 0x33	; 51
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a9 01       	movw	r20, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_readPin+0xde>
    17c0:	55 95       	asr	r21
    17c2:	47 95       	ror	r20
    17c4:	8a 95       	dec	r24
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_readPin+0xda>
    17c8:	ca 01       	movw	r24, r20
    17ca:	81 70       	andi	r24, 0x01	; 1
    17cc:	90 70       	andi	r25, 0x00	; 0
    17ce:	88 23       	and	r24, r24
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	19 c0       	rjmp	.+50     	; 0x180a <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    17d8:	19 82       	std	Y+1, r1	; 0x01
    17da:	17 c0       	rjmp	.+46     	; 0x180a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    17dc:	e0 e3       	ldi	r30, 0x30	; 48
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a9 01       	movw	r20, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_readPin+0x10e>
    17f0:	55 95       	asr	r21
    17f2:	47 95       	ror	r20
    17f4:	8a 95       	dec	r24
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_readPin+0x10a>
    17f8:	ca 01       	movw	r24, r20
    17fa:	81 70       	andi	r24, 0x01	; 1
    17fc:	90 70       	andi	r25, 0x00	; 0
    17fe:	88 23       	and	r24, r24
    1800:	19 f0       	breq	.+6      	; 0x1808 <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	01 c0       	rjmp	.+2      	; 0x180a <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1808:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <GPIO_setupPortDirection+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_setupPortDirection+0x8>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	90 f5       	brcc	.+100    	; 0x1896 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3c 83       	std	Y+4, r19	; 0x04
    183a:	2b 83       	std	Y+3, r18	; 0x03
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	d1 f0       	breq	.+52     	; 0x187a <GPIO_setupPortDirection+0x5e>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <GPIO_setupPortDirection+0x3e>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	61 f0       	breq	.+24     	; 0x1870 <GPIO_setupPortDirection+0x54>
    1858:	1e c0       	rjmp	.+60     	; 0x1896 <GPIO_setupPortDirection+0x7a>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	81 f0       	breq	.+32     	; 0x1884 <GPIO_setupPortDirection+0x68>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	91 05       	cpc	r25, r1
    186c:	81 f0       	breq	.+32     	; 0x188e <GPIO_setupPortDirection+0x72>
    186e:	13 c0       	rjmp	.+38     	; 0x1896 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1870:	ea e3       	ldi	r30, 0x3A	; 58
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	80 83       	st	Z, r24
    1878:	0e c0       	rjmp	.+28     	; 0x1896 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    187a:	e7 e3       	ldi	r30, 0x37	; 55
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1884:	e4 e3       	ldi	r30, 0x34	; 52
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	80 83       	st	Z, r24
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    188e:	e1 e3       	ldi	r30, 0x31	; 49
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	80 83       	st	Z, r24
			break;
		}
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_writePort+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_writePort+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	90 f5       	brcc	.+100    	; 0x191e <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3c 83       	std	Y+4, r19	; 0x04
    18c2:	2b 83       	std	Y+3, r18	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	d1 f0       	breq	.+52     	; 0x1902 <GPIO_writePort+0x5e>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <GPIO_writePort+0x3e>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 f0       	breq	.+24     	; 0x18f8 <GPIO_writePort+0x54>
    18e0:	1e c0       	rjmp	.+60     	; 0x191e <GPIO_writePort+0x7a>
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	3c 81       	ldd	r19, Y+4	; 0x04
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	81 f0       	breq	.+32     	; 0x190c <GPIO_writePort+0x68>
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	81 f0       	breq	.+32     	; 0x1916 <GPIO_writePort+0x72>
    18f6:	13 c0       	rjmp	.+38     	; 0x191e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    18f8:	eb e3       	ldi	r30, 0x3B	; 59
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	80 83       	st	Z, r24
    1900:	0e c0       	rjmp	.+28     	; 0x191e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    1902:	e8 e3       	ldi	r30, 0x38	; 56
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	80 83       	st	Z, r24
    190a:	09 c0       	rjmp	.+18     	; 0x191e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    190c:	e5 e3       	ldi	r30, 0x35	; 53
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24
    1914:	04 c0       	rjmp	.+8      	; 0x191e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	80 83       	st	Z, r24
			break;
		}
	}
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <GPIO_readPort+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPort+0x8>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    193a:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	84 30       	cpi	r24, 0x04	; 4
    1940:	90 f5       	brcc	.+100    	; 0x19a6 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3c 83       	std	Y+4, r19	; 0x04
    194a:	2b 83       	std	Y+3, r18	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	d1 f0       	breq	.+52     	; 0x198a <GPIO_readPort+0x5e>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <GPIO_readPort+0x3e>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 f0       	breq	.+24     	; 0x1980 <GPIO_readPort+0x54>
    1968:	1e c0       	rjmp	.+60     	; 0x19a6 <GPIO_readPort+0x7a>
    196a:	2b 81       	ldd	r18, Y+3	; 0x03
    196c:	3c 81       	ldd	r19, Y+4	; 0x04
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	81 f0       	breq	.+32     	; 0x1994 <GPIO_readPort+0x68>
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	81 f0       	breq	.+32     	; 0x199e <GPIO_readPort+0x72>
    197e:	13 c0       	rjmp	.+38     	; 0x19a6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    1980:	e9 e3       	ldi	r30, 0x39	; 57
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	0e c0       	rjmp	.+28     	; 0x19a6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    198a:	e6 e3       	ldi	r30, 0x36	; 54
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    1994:	e3 e3       	ldi	r30, 0x33	; 51
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    199e:	e0 e3       	ldi	r30, 0x30	; 48
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <ADC_init>:
#include "adc.h"
#include "avr/io.h"
#include "../../LIB/common_macros.h"

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <ADC_init+0x6>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
	/* Initially set the registers with zeros so we can insert their values as we want */
	ADMUX = 0;
    19c4:	e7 e2       	ldi	r30, 0x27	; 39
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	10 82       	st	Z, r1
	ADCSRA = 0;
    19ca:	e6 e2       	ldi	r30, 0x26	; 38
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	10 82       	st	Z, r1

	 /* left shift the value by 6 so we can insert it in the right place at REFS0 and REFS1 */
	ADMUX |= ( (Config_Ptr->ref_volt) << 6 ) ;
    19d0:	a7 e2       	ldi	r26, 0x27	; 39
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e7 e2       	ldi	r30, 0x27	; 39
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	28 2f       	mov	r18, r24
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	80 81       	ld	r24, Z
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	00 24       	eor	r0, r0
    19e8:	96 95       	lsr	r25
    19ea:	87 95       	ror	r24
    19ec:	07 94       	ror	r0
    19ee:	96 95       	lsr	r25
    19f0:	87 95       	ror	r24
    19f2:	07 94       	ror	r0
    19f4:	98 2f       	mov	r25, r24
    19f6:	80 2d       	mov	r24, r0
    19f8:	82 2b       	or	r24, r18
    19fa:	8c 93       	st	X, r24

	/* same as the last step but this time ADPSX bits are the first 3 bits so no need to shift */
	ADCSRA |= (Config_Ptr->prescaler) ;
    19fc:	a6 e2       	ldi	r26, 0x26	; 38
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e6 e2       	ldi	r30, 0x26	; 38
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	90 81       	ld	r25, Z
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	81 81       	ldd	r24, Z+1	; 0x01
    1a0c:	89 2b       	or	r24, r25
    1a0e:	8c 93       	st	X, r24

	/* Enable the ADC */
	SET_BIT(ADCSRA,ADEN);
    1a10:	a6 e2       	ldi	r26, 0x26	; 38
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e6 e2       	ldi	r30, 0x26	; 38
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	8c 93       	st	X, r24
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	0f 92       	push	r0
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	89 83       	std	Y+1, r24	; 0x01
	/* clear the previous channel and insert the new one in only 3 bits ( 8 channels ) " */
	ADMUX = (ADMUX & ADC_CHANNEL_CLEAR_MASK) | (channel & 0x07) ;
    1a34:	a7 e2       	ldi	r26, 0x27	; 39
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e7 e2       	ldi	r30, 0x27	; 39
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	98 2f       	mov	r25, r24
    1a40:	90 7e       	andi	r25, 0xE0	; 224
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	87 70       	andi	r24, 0x07	; 7
    1a46:	89 2b       	or	r24, r25
    1a48:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA,ADSC);
    1a4a:	a6 e2       	ldi	r26, 0x26	; 38
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e6 e2       	ldi	r30, 0x26	; 38
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 64       	ori	r24, 0x40	; 64
    1a56:	8c 93       	st	X, r24

	/* wait the ADC o/p with polling method */
	while(BIT_IS_CLEAR(ADCSRA,ADIF)){}
    1a58:	e6 e2       	ldi	r30, 0x26	; 38
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	80 71       	andi	r24, 0x10	; 16
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	b9 f3       	breq	.-18     	; 0x1a58 <ADC_readChannel+0x30>

	/* clearing ADC flag */
	SET_BIT(ADCSRA,ADIF);
    1a6a:	a6 e2       	ldi	r26, 0x26	; 38
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e6 e2       	ldi	r30, 0x26	; 38
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 61       	ori	r24, 0x10	; 16
    1a76:	8c 93       	st	X, r24

	return ADC;
    1a78:	e4 e2       	ldi	r30, 0x24	; 36
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <SEVEN_SEGMENT_init>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

void SEVEN_SEGMENT_init(void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	/* Enable bit is output */
	GPIO_setupPinDirection(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, PIN_OUTPUT);
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	66 e0       	ldi	r22, 0x06	; 6
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>

	/* Seven segment pins is output */
	for(uint8 counter = 0 ; counter < SEVEN_SEGMENT_DECODER ; counter++)
    1a9c:	19 82       	std	Y+1, r1	; 0x01
    1a9e:	0b c0       	rjmp	.+22     	; 0x1ab6 <SEVEN_SEGMENT_init+0x2e>
	{
		GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID, SEVEN_SEGMENT_FIRST_PIN_ID+counter, PIN_OUTPUT);
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	9f 5f       	subi	r25, 0xFF	; 255
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	69 2f       	mov	r22, r25
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
{
	/* Enable bit is output */
	GPIO_setupPinDirection(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, PIN_OUTPUT);

	/* Seven segment pins is output */
	for(uint8 counter = 0 ; counter < SEVEN_SEGMENT_DECODER ; counter++)
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	87 30       	cpi	r24, 0x07	; 7
    1aba:	90 f3       	brcs	.-28     	; 0x1aa0 <SEVEN_SEGMENT_init+0x18>
	{
		GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID, SEVEN_SEGMENT_FIRST_PIN_ID+counter, PIN_OUTPUT);
	}
}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <SEVEN_SEGMENT_enable>:

void SEVEN_SEGMENT_enable(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	#if (SEVEN_SEGMENT_TYPE == ANODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_HIGH);
	#elif (SEVEN_SEGMENT_TYPE == CATHODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_LOW);
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	66 e0       	ldi	r22, 0x06	; 6
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	#endif
}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <SEVEN_SEGMENT_disable>:

void SEVEN_SEGMENT_disable(void)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	#if (SEVEN_SEGMENT_TYPE == ANODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_LOW);
	#elif (SEVEN_SEGMENT_TYPE == CATHODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_HIGH);
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	66 e0       	ldi	r22, 0x06	; 6
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	#endif
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <SEVEN_SEGMENT_displayNumber>:

void SEVEN_SEGMENT_displayNumber(uint8 number)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
		#if (SEVEN_SEGMENT_TYPE == ANODE)
			SEVEN_SEGMENT_ANODE(number);

		/* No decoder --> Cathode 7 Segment */
		#elif (SEVEN_SEGMENT_TYPE == CATHODE)
			SEVEN_SEGMENT_CATHODE(number);
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <SEVEN_SEGMENT_CATHODE>

		#endif /* ANODE or CATHODE condition */

	#endif /* With Decoder or Without condition */
}
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <SEVEN_SEGMENT_CATHODE>:
#if (SEVEN_SEGMENT_DECODER == WITHOUT_BCD_DECODER)

#if (SEVEN_SEGMENT_TYPE == CATHODE)

static void SEVEN_SEGMENT_CATHODE(uint8 number)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <SEVEN_SEGMENT_CATHODE+0x6>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01

	switch(number)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	3b 83       	std	Y+3, r19	; 0x03
    1b24:	2a 83       	std	Y+2, r18	; 0x02
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <SEVEN_SEGMENT_CATHODE+0x24>
    1b30:	0f c1       	rjmp	.+542    	; 0x1d50 <SEVEN_SEGMENT_CATHODE+0x242>
    1b32:	2a 81       	ldd	r18, Y+2	; 0x02
    1b34:	3b 81       	ldd	r19, Y+3	; 0x03
    1b36:	25 30       	cpi	r18, 0x05	; 5
    1b38:	31 05       	cpc	r19, r1
    1b3a:	ec f4       	brge	.+58     	; 0x1b76 <SEVEN_SEGMENT_CATHODE+0x68>
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <SEVEN_SEGMENT_CATHODE+0x3a>
    1b46:	6e c0       	rjmp	.+220    	; 0x1c24 <SEVEN_SEGMENT_CATHODE+0x116>
    1b48:	2a 81       	ldd	r18, Y+2	; 0x02
    1b4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <SEVEN_SEGMENT_CATHODE+0x4e>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	99 f1       	breq	.+102    	; 0x1bc0 <SEVEN_SEGMENT_CATHODE+0xb2>
    1b5a:	25 c2       	rjmp	.+1098   	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
    1b5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <SEVEN_SEGMENT_CATHODE+0x5a>
    1b66:	90 c0       	rjmp	.+288    	; 0x1c88 <SEVEN_SEGMENT_CATHODE+0x17a>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <SEVEN_SEGMENT_CATHODE+0x66>
    1b72:	bc c0       	rjmp	.+376    	; 0x1cec <SEVEN_SEGMENT_CATHODE+0x1de>
    1b74:	18 c2       	rjmp	.+1072   	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
    1b76:	2a 81       	ldd	r18, Y+2	; 0x02
    1b78:	3b 81       	ldd	r19, Y+3	; 0x03
    1b7a:	27 30       	cpi	r18, 0x07	; 7
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <SEVEN_SEGMENT_CATHODE+0x74>
    1b80:	7d c1       	rjmp	.+762    	; 0x1e7c <SEVEN_SEGMENT_CATHODE+0x36e>
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	91 05       	cpc	r25, r1
    1b8a:	6c f4       	brge	.+26     	; 0x1ba6 <SEVEN_SEGMENT_CATHODE+0x98>
    1b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b90:	25 30       	cpi	r18, 0x05	; 5
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <SEVEN_SEGMENT_CATHODE+0x8a>
    1b96:	0e c1       	rjmp	.+540    	; 0x1db4 <SEVEN_SEGMENT_CATHODE+0x2a6>
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	86 30       	cpi	r24, 0x06	; 6
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <SEVEN_SEGMENT_CATHODE+0x96>
    1ba2:	3a c1       	rjmp	.+628    	; 0x1e18 <SEVEN_SEGMENT_CATHODE+0x30a>
    1ba4:	00 c2       	rjmp	.+1024   	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
    1ba6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba8:	3b 81       	ldd	r19, Y+3	; 0x03
    1baa:	28 30       	cpi	r18, 0x08	; 8
    1bac:	31 05       	cpc	r19, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <SEVEN_SEGMENT_CATHODE+0xa4>
    1bb0:	97 c1       	rjmp	.+814    	; 0x1ee0 <SEVEN_SEGMENT_CATHODE+0x3d2>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	89 30       	cpi	r24, 0x09	; 9
    1bb8:	91 05       	cpc	r25, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <SEVEN_SEGMENT_CATHODE+0xb0>
    1bbc:	c3 c1       	rjmp	.+902    	; 0x1f44 <SEVEN_SEGMENT_CATHODE+0x436>
    1bbe:	f3 c1       	rjmp	.+998    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
	{
	case 0:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1bc0:	ab e3       	ldi	r26, 0x3B	; 59
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	eb e3       	ldi	r30, 0x3B	; 59
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	82 60       	ori	r24, 0x02	; 2
    1bcc:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1bce:	ab e3       	ldi	r26, 0x3B	; 59
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	eb e3       	ldi	r30, 0x3B	; 59
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	84 60       	ori	r24, 0x04	; 4
    1bda:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1bdc:	ab e3       	ldi	r26, 0x3B	; 59
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	88 60       	ori	r24, 0x08	; 8
    1be8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1bea:	ab e3       	ldi	r26, 0x3B	; 59
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 61       	ori	r24, 0x10	; 16
    1bf6:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1bf8:	ab e3       	ldi	r26, 0x3B	; 59
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	eb e3       	ldi	r30, 0x3B	; 59
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 62       	ori	r24, 0x20	; 32
    1c04:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1c06:	ab e3       	ldi	r26, 0x3B	; 59
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	eb e3       	ldi	r30, 0x3B	; 59
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 64       	ori	r24, 0x40	; 64
    1c12:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1c14:	ab e3       	ldi	r26, 0x3B	; 59
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	eb e3       	ldi	r30, 0x3B	; 59
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 77       	andi	r24, 0x7F	; 127
    1c20:	8c 93       	st	X, r24
    1c22:	c1 c1       	rjmp	.+898    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 1:
		MYPORT &= ~(1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1c24:	ab e3       	ldi	r26, 0x3B	; 59
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	eb e3       	ldi	r30, 0x3B	; 59
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8d 7f       	andi	r24, 0xFD	; 253
    1c30:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1c32:	ab e3       	ldi	r26, 0x3B	; 59
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	eb e3       	ldi	r30, 0x3B	; 59
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	84 60       	ori	r24, 0x04	; 4
    1c3e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1c40:	ab e3       	ldi	r26, 0x3B	; 59
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	eb e3       	ldi	r30, 0x3B	; 59
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1c4e:	ab e3       	ldi	r26, 0x3B	; 59
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	eb e3       	ldi	r30, 0x3B	; 59
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8f 7e       	andi	r24, 0xEF	; 239
    1c5a:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1c5c:	ab e3       	ldi	r26, 0x3B	; 59
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	eb e3       	ldi	r30, 0x3B	; 59
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8f 7d       	andi	r24, 0xDF	; 223
    1c68:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1c6a:	ab e3       	ldi	r26, 0x3B	; 59
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8f 7b       	andi	r24, 0xBF	; 191
    1c76:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 77       	andi	r24, 0x7F	; 127
    1c84:	8c 93       	st	X, r24
    1c86:	8f c1       	rjmp	.+798    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 2:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1c88:	ab e3       	ldi	r26, 0x3B	; 59
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	eb e3       	ldi	r30, 0x3B	; 59
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	82 60       	ori	r24, 0x02	; 2
    1c94:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1c96:	ab e3       	ldi	r26, 0x3B	; 59
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	eb e3       	ldi	r30, 0x3B	; 59
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	84 60       	ori	r24, 0x04	; 4
    1ca2:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1ca4:	ab e3       	ldi	r26, 0x3B	; 59
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	eb e3       	ldi	r30, 0x3B	; 59
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	87 7f       	andi	r24, 0xF7	; 247
    1cb0:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1cb2:	ab e3       	ldi	r26, 0x3B	; 59
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	eb e3       	ldi	r30, 0x3B	; 59
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 61       	ori	r24, 0x10	; 16
    1cbe:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1cc0:	ab e3       	ldi	r26, 0x3B	; 59
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	eb e3       	ldi	r30, 0x3B	; 59
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 62       	ori	r24, 0x20	; 32
    1ccc:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1cce:	ab e3       	ldi	r26, 0x3B	; 59
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	eb e3       	ldi	r30, 0x3B	; 59
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 7b       	andi	r24, 0xBF	; 191
    1cda:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1cdc:	ab e3       	ldi	r26, 0x3B	; 59
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 68       	ori	r24, 0x80	; 128
    1ce8:	8c 93       	st	X, r24
    1cea:	5d c1       	rjmp	.+698    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 3:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1cec:	ab e3       	ldi	r26, 0x3B	; 59
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	eb e3       	ldi	r30, 0x3B	; 59
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	82 60       	ori	r24, 0x02	; 2
    1cf8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1cfa:	ab e3       	ldi	r26, 0x3B	; 59
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	eb e3       	ldi	r30, 0x3B	; 59
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	84 60       	ori	r24, 0x04	; 4
    1d06:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	88 60       	ori	r24, 0x08	; 8
    1d14:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1d16:	ab e3       	ldi	r26, 0x3B	; 59
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	eb e3       	ldi	r30, 0x3B	; 59
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	80 61       	ori	r24, 0x10	; 16
    1d22:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1d24:	ab e3       	ldi	r26, 0x3B	; 59
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	eb e3       	ldi	r30, 0x3B	; 59
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f 7d       	andi	r24, 0xDF	; 223
    1d30:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1d32:	ab e3       	ldi	r26, 0x3B	; 59
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	eb e3       	ldi	r30, 0x3B	; 59
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8f 7b       	andi	r24, 0xBF	; 191
    1d3e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1d40:	ab e3       	ldi	r26, 0x3B	; 59
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	eb e3       	ldi	r30, 0x3B	; 59
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	8c 93       	st	X, r24
    1d4e:	2b c1       	rjmp	.+598    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 4:
		MYPORT &= ~(1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1d50:	ab e3       	ldi	r26, 0x3B	; 59
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	eb e3       	ldi	r30, 0x3B	; 59
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8d 7f       	andi	r24, 0xFD	; 253
    1d5c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1d5e:	ab e3       	ldi	r26, 0x3B	; 59
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	eb e3       	ldi	r30, 0x3B	; 59
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	84 60       	ori	r24, 0x04	; 4
    1d6a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1d6c:	ab e3       	ldi	r26, 0x3B	; 59
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	eb e3       	ldi	r30, 0x3B	; 59
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	88 60       	ori	r24, 0x08	; 8
    1d78:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1d7a:	ab e3       	ldi	r26, 0x3B	; 59
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	eb e3       	ldi	r30, 0x3B	; 59
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 7e       	andi	r24, 0xEF	; 239
    1d86:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1d88:	ab e3       	ldi	r26, 0x3B	; 59
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	eb e3       	ldi	r30, 0x3B	; 59
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 7d       	andi	r24, 0xDF	; 223
    1d94:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1d96:	ab e3       	ldi	r26, 0x3B	; 59
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	eb e3       	ldi	r30, 0x3B	; 59
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 64       	ori	r24, 0x40	; 64
    1da2:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1da4:	ab e3       	ldi	r26, 0x3B	; 59
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	eb e3       	ldi	r30, 0x3B	; 59
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	8c 93       	st	X, r24
    1db2:	f9 c0       	rjmp	.+498    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 5:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1db4:	ab e3       	ldi	r26, 0x3B	; 59
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	eb e3       	ldi	r30, 0x3B	; 59
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1dc2:	ab e3       	ldi	r26, 0x3B	; 59
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	eb e3       	ldi	r30, 0x3B	; 59
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8b 7f       	andi	r24, 0xFB	; 251
    1dce:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1dd0:	ab e3       	ldi	r26, 0x3B	; 59
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	eb e3       	ldi	r30, 0x3B	; 59
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 60       	ori	r24, 0x08	; 8
    1ddc:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1dde:	ab e3       	ldi	r26, 0x3B	; 59
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	eb e3       	ldi	r30, 0x3B	; 59
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 61       	ori	r24, 0x10	; 16
    1dea:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1dec:	ab e3       	ldi	r26, 0x3B	; 59
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	eb e3       	ldi	r30, 0x3B	; 59
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7d       	andi	r24, 0xDF	; 223
    1df8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1dfa:	ab e3       	ldi	r26, 0x3B	; 59
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	eb e3       	ldi	r30, 0x3B	; 59
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	80 64       	ori	r24, 0x40	; 64
    1e06:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1e08:	ab e3       	ldi	r26, 0x3B	; 59
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	eb e3       	ldi	r30, 0x3B	; 59
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 68       	ori	r24, 0x80	; 128
    1e14:	8c 93       	st	X, r24
    1e16:	c7 c0       	rjmp	.+398    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 6:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1e18:	ab e3       	ldi	r26, 0x3B	; 59
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	eb e3       	ldi	r30, 0x3B	; 59
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1e26:	ab e3       	ldi	r26, 0x3B	; 59
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	eb e3       	ldi	r30, 0x3B	; 59
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8b 7f       	andi	r24, 0xFB	; 251
    1e32:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1e34:	ab e3       	ldi	r26, 0x3B	; 59
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	eb e3       	ldi	r30, 0x3B	; 59
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 60       	ori	r24, 0x08	; 8
    1e40:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1e42:	ab e3       	ldi	r26, 0x3B	; 59
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	eb e3       	ldi	r30, 0x3B	; 59
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 61       	ori	r24, 0x10	; 16
    1e4e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1e50:	ab e3       	ldi	r26, 0x3B	; 59
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	eb e3       	ldi	r30, 0x3B	; 59
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 62       	ori	r24, 0x20	; 32
    1e5c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1e5e:	ab e3       	ldi	r26, 0x3B	; 59
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	eb e3       	ldi	r30, 0x3B	; 59
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	80 64       	ori	r24, 0x40	; 64
    1e6a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1e6c:	ab e3       	ldi	r26, 0x3B	; 59
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	80 68       	ori	r24, 0x80	; 128
    1e78:	8c 93       	st	X, r24
    1e7a:	95 c0       	rjmp	.+298    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 7:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1e7c:	ab e3       	ldi	r26, 0x3B	; 59
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	eb e3       	ldi	r30, 0x3B	; 59
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	82 60       	ori	r24, 0x02	; 2
    1e88:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1e8a:	ab e3       	ldi	r26, 0x3B	; 59
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	eb e3       	ldi	r30, 0x3B	; 59
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	84 60       	ori	r24, 0x04	; 4
    1e96:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1e98:	ab e3       	ldi	r26, 0x3B	; 59
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	eb e3       	ldi	r30, 0x3B	; 59
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 60       	ori	r24, 0x08	; 8
    1ea4:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1ea6:	ab e3       	ldi	r26, 0x3B	; 59
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	eb e3       	ldi	r30, 0x3B	; 59
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8f 7e       	andi	r24, 0xEF	; 239
    1eb2:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1eb4:	ab e3       	ldi	r26, 0x3B	; 59
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	eb e3       	ldi	r30, 0x3B	; 59
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 7d       	andi	r24, 0xDF	; 223
    1ec0:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1ec2:	ab e3       	ldi	r26, 0x3B	; 59
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	eb e3       	ldi	r30, 0x3B	; 59
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 7b       	andi	r24, 0xBF	; 191
    1ece:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1ed0:	ab e3       	ldi	r26, 0x3B	; 59
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	eb e3       	ldi	r30, 0x3B	; 59
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 77       	andi	r24, 0x7F	; 127
    1edc:	8c 93       	st	X, r24
    1ede:	63 c0       	rjmp	.+198    	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 8:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1eee:	ab e3       	ldi	r26, 0x3B	; 59
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	eb e3       	ldi	r30, 0x3B	; 59
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	84 60       	ori	r24, 0x04	; 4
    1efa:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1efc:	ab e3       	ldi	r26, 0x3B	; 59
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	eb e3       	ldi	r30, 0x3B	; 59
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	88 60       	ori	r24, 0x08	; 8
    1f08:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1f0a:	ab e3       	ldi	r26, 0x3B	; 59
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e3       	ldi	r30, 0x3B	; 59
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	80 61       	ori	r24, 0x10	; 16
    1f16:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1f18:	ab e3       	ldi	r26, 0x3B	; 59
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	eb e3       	ldi	r30, 0x3B	; 59
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	80 62       	ori	r24, 0x20	; 32
    1f24:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1f26:	ab e3       	ldi	r26, 0x3B	; 59
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 64       	ori	r24, 0x40	; 64
    1f32:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1f34:	ab e3       	ldi	r26, 0x3B	; 59
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	eb e3       	ldi	r30, 0x3B	; 59
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 68       	ori	r24, 0x80	; 128
    1f40:	8c 93       	st	X, r24
    1f42:	31 c0       	rjmp	.+98     	; 0x1fa6 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 9:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1f44:	ab e3       	ldi	r26, 0x3B	; 59
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	eb e3       	ldi	r30, 0x3B	; 59
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	82 60       	ori	r24, 0x02	; 2
    1f50:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1f52:	ab e3       	ldi	r26, 0x3B	; 59
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	84 60       	ori	r24, 0x04	; 4
    1f5e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1f60:	ab e3       	ldi	r26, 0x3B	; 59
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	eb e3       	ldi	r30, 0x3B	; 59
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	88 60       	ori	r24, 0x08	; 8
    1f6c:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1f6e:	ab e3       	ldi	r26, 0x3B	; 59
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb e3       	ldi	r30, 0x3B	; 59
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	8f 7e       	andi	r24, 0xEF	; 239
    1f7a:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1f7c:	ab e3       	ldi	r26, 0x3B	; 59
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	eb e3       	ldi	r30, 0x3B	; 59
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	8f 7d       	andi	r24, 0xDF	; 223
    1f88:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1f8a:	ab e3       	ldi	r26, 0x3B	; 59
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	eb e3       	ldi	r30, 0x3B	; 59
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	80 64       	ori	r24, 0x40	; 64
    1f96:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1f98:	ab e3       	ldi	r26, 0x3B	; 59
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e3       	ldi	r30, 0x3B	; 59
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	80 68       	ori	r24, 0x80	; 128
    1fa4:	8c 93       	st	X, r24
		break;
	}
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <DcMotor_Init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/PWM0/pwm0.h"


void DcMotor_Init(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, PIN_OUTPUT); /* Input1 */
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, PIN_OUTPUT); /* Inupt2 */
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
}
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <DcMotor_Rotate+0x6>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	6a 83       	std	Y+2, r22	; 0x02
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, GET_BIT(state,0));
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	98 2f       	mov	r25, r24
    200e:	91 70       	andi	r25, 0x01	; 1
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	49 2f       	mov	r20, r25
    2016:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, GET_BIT(state,1));
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	86 95       	lsr	r24
    201e:	98 2f       	mov	r25, r24
    2020:	91 70       	andi	r25, 0x01	; 1
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	49 2f       	mov	r20, r25
    2028:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>

	PWM_Timer0_Start(speed);
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	0e 94 91 08 	call	0x1122	; 0x1122 <PWM_Timer0_Start>
}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <LM35_getTemperature>:
#include "lm35_sensor.h"
#include "../../MCAL/ADC/adc.h"


uint8 LM35_getTemperature(void)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <LM35_getTemperature+0x6>
    2042:	0f 92       	push	r0
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	uint8 lm35_value;

	uint16 adc_value;

	adc_value = ADC_readChannel(LM35_CHANNEL_ID);
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <ADC_readChannel>
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01

	lm35_value = (uint8)(((uint32)adc_value*ADC_REF_VOLT_VALUE*LM35_MAX_TEMPERATURE)/(ADC_MAXIMUM_VALUE*LM35_MAX_VOLT_VALUE));
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	cc 01       	movw	r24, r24
    2058:	a0 e0       	ldi	r26, 0x00	; 0
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	2e ee       	ldi	r18, 0xEE	; 238
    205e:	32 e0       	ldi	r19, 0x02	; 2
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsi3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 ed       	ldi	r19, 0xD0	; 208
    2084:	4f eb       	ldi	r20, 0xBF	; 191
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8b 83       	std	Y+3, r24	; 0x03

	return lm35_value;
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	2e 97       	sbiw	r28, 0x0e	; 14
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 ea       	ldi	r26, 0xA0	; 160
    20da:	b1 e4       	ldi	r27, 0x41	; 65
    20dc:	8b 87       	std	Y+11, r24	; 0x0b
    20de:	9c 87       	std	Y+12, r25	; 0x0c
    20e0:	ad 87       	std	Y+13, r26	; 0x0d
    20e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a e7       	ldi	r20, 0x7A	; 122
    20f2:	55 e4       	ldi	r21, 0x45	; 69
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8f 83       	std	Y+7, r24	; 0x07
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	a9 87       	std	Y+9, r26	; 0x09
    2102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_init+0x7a>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_init+0xda>
    2168:	80 e9       	ldi	r24, 0x90	; 144
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_init+0xc8>
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_init+0xbc>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_init+0x104>
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	63 e0       	ldi	r22, 0x03	; 3
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	64 e0       	ldi	r22, 0x04	; 4
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	65 e0       	ldi	r22, 0x05	; 5
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	66 e0       	ldi	r22, 0x06	; 6
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    21e0:	83 e3       	ldi	r24, 0x33	; 51
    21e2:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    21e6:	82 e3       	ldi	r24, 0x32	; 50
    21e8:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    21ec:	88 e2       	ldi	r24, 0x28	; 40
    21ee:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    21f2:	8c e0       	ldi	r24, 0x0C	; 12
    21f4:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>
}
    21fe:	2e 96       	adiw	r28, 0x0e	; 14
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	c3 56       	subi	r28, 0x63	; 99
    221e:	d0 40       	sbci	r29, 0x00	; 0
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	fe 01       	movw	r30, r28
    222c:	ed 59       	subi	r30, 0x9D	; 157
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    223c:	fe 01       	movw	r30, r28
    223e:	e1 5a       	subi	r30, 0xA1	; 161
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e8       	ldi	r26, 0x80	; 128
    2248:	bf e3       	ldi	r27, 0x3F	; 63
    224a:	80 83       	st	Z, r24
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	a2 83       	std	Z+2, r26	; 0x02
    2250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	8e 01       	movw	r16, r28
    2254:	05 5a       	subi	r16, 0xA5	; 165
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	fe 01       	movw	r30, r28
    225a:	e1 5a       	subi	r30, 0xA1	; 161
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a e7       	ldi	r20, 0x7A	; 122
    226c:	55 e4       	ldi	r21, 0x45	; 69
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	f8 01       	movw	r30, r16
    2278:	80 83       	st	Z, r24
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	a2 83       	std	Z+2, r26	; 0x02
    227e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2280:	fe 01       	movw	r30, r28
    2282:	e5 5a       	subi	r30, 0xA5	; 165
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	44 f4       	brge	.+16     	; 0x22ae <LCD_sendCommand+0x9e>
		__ticks = 1;
    229e:	fe 01       	movw	r30, r28
    22a0:	e7 5a       	subi	r30, 0xA7	; 167
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	64 c0       	rjmp	.+200    	; 0x2376 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    22ae:	fe 01       	movw	r30, r28
    22b0:	e5 5a       	subi	r30, 0xA5	; 165
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <LCD_sendCommand+0xbe>
    22cc:	43 c0       	rjmp	.+134    	; 0x2354 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	fe 01       	movw	r30, r28
    22d0:	e1 5a       	subi	r30, 0xA1	; 161
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	8e 01       	movw	r16, r28
    22ee:	07 5a       	subi	r16, 0xA7	; 167
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	f8 01       	movw	r30, r16
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	80 83       	st	Z, r24
    2304:	1f c0       	rjmp	.+62     	; 0x2344 <LCD_sendCommand+0x134>
    2306:	fe 01       	movw	r30, r28
    2308:	e9 5a       	subi	r30, 0xA9	; 169
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 e9       	ldi	r24, 0x90	; 144
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
    2314:	fe 01       	movw	r30, r28
    2316:	e9 5a       	subi	r30, 0xA9	; 169
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_sendCommand+0x10e>
    2322:	fe 01       	movw	r30, r28
    2324:	e9 5a       	subi	r30, 0xA9	; 169
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232c:	de 01       	movw	r26, r28
    232e:	a7 5a       	subi	r26, 0xA7	; 167
    2330:	bf 4f       	sbci	r27, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e7 5a       	subi	r30, 0xA7	; 167
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	11 96       	adiw	r26, 0x01	; 1
    2340:	9c 93       	st	X, r25
    2342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	fe 01       	movw	r30, r28
    2346:	e7 5a       	subi	r30, 0xA7	; 167
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	d1 f6       	brne	.-76     	; 0x2306 <LCD_sendCommand+0xf6>
    2352:	27 c0       	rjmp	.+78     	; 0x23a2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	8e 01       	movw	r16, r28
    2356:	07 5a       	subi	r16, 0xA7	; 167
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e5 5a       	subi	r30, 0xA5	; 165
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	f8 01       	movw	r30, r16
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
    2376:	de 01       	movw	r26, r28
    2378:	ab 5a       	subi	r26, 0xAB	; 171
    237a:	bf 4f       	sbci	r27, 0xFF	; 255
    237c:	fe 01       	movw	r30, r28
    237e:	e7 5a       	subi	r30, 0xA7	; 167
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	8d 93       	st	X+, r24
    2388:	9c 93       	st	X, r25
    238a:	fe 01       	movw	r30, r28
    238c:	eb 5a       	subi	r30, 0xAB	; 171
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_sendCommand+0x184>
    2398:	fe 01       	movw	r30, r28
    239a:	eb 5a       	subi	r30, 0xAB	; 171
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	62 e0       	ldi	r22, 0x02	; 2
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    23ac:	fe 01       	movw	r30, r28
    23ae:	ef 5a       	subi	r30, 0xAF	; 175
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a0 e8       	ldi	r26, 0x80	; 128
    23b8:	bf e3       	ldi	r27, 0x3F	; 63
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	8e 01       	movw	r16, r28
    23c4:	03 5b       	subi	r16, 0xB3	; 179
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	fe 01       	movw	r30, r28
    23ca:	ef 5a       	subi	r30, 0xAF	; 175
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a e7       	ldi	r20, 0x7A	; 122
    23dc:	55 e4       	ldi	r21, 0x45	; 69
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f0:	fe 01       	movw	r30, r28
    23f2:	e3 5b       	subi	r30, 0xB3	; 179
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	44 f4       	brge	.+16     	; 0x241e <LCD_sendCommand+0x20e>
		__ticks = 1;
    240e:	fe 01       	movw	r30, r28
    2410:	e5 5b       	subi	r30, 0xB5	; 181
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	64 c0       	rjmp	.+200    	; 0x24e6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    241e:	fe 01       	movw	r30, r28
    2420:	e3 5b       	subi	r30, 0xB3	; 179
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	0c f0       	brlt	.+2      	; 0x243e <LCD_sendCommand+0x22e>
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	fe 01       	movw	r30, r28
    2440:	ef 5a       	subi	r30, 0xAF	; 175
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8e 01       	movw	r16, r28
    245e:	05 5b       	subi	r16, 0xB5	; 181
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	f8 01       	movw	r30, r16
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	1f c0       	rjmp	.+62     	; 0x24b4 <LCD_sendCommand+0x2a4>
    2476:	fe 01       	movw	r30, r28
    2478:	e7 5b       	subi	r30, 0xB7	; 183
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 e9       	ldi	r24, 0x90	; 144
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	fe 01       	movw	r30, r28
    2486:	e7 5b       	subi	r30, 0xB7	; 183
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_sendCommand+0x27e>
    2492:	fe 01       	movw	r30, r28
    2494:	e7 5b       	subi	r30, 0xB7	; 183
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	de 01       	movw	r26, r28
    249e:	a5 5b       	subi	r26, 0xB5	; 181
    24a0:	bf 4f       	sbci	r27, 0xFF	; 255
    24a2:	fe 01       	movw	r30, r28
    24a4:	e5 5b       	subi	r30, 0xB5	; 181
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	9c 93       	st	X, r25
    24b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	fe 01       	movw	r30, r28
    24b6:	e5 5b       	subi	r30, 0xB5	; 181
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	d1 f6       	brne	.-76     	; 0x2476 <LCD_sendCommand+0x266>
    24c2:	27 c0       	rjmp	.+78     	; 0x2512 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	8e 01       	movw	r16, r28
    24c6:	05 5b       	subi	r16, 0xB5	; 181
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	e3 5b       	subi	r30, 0xB3	; 179
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	de 01       	movw	r26, r28
    24e8:	a9 5b       	subi	r26, 0xB9	; 185
    24ea:	bf 4f       	sbci	r27, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e5 5b       	subi	r30, 0xB5	; 181
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	8d 93       	st	X+, r24
    24f8:	9c 93       	st	X, r25
    24fa:	fe 01       	movw	r30, r28
    24fc:	e9 5b       	subi	r30, 0xB9	; 185
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_sendCommand+0x2f4>
    2508:	fe 01       	movw	r30, r28
    250a:	e9 5b       	subi	r30, 0xB9	; 185
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,4));
    2512:	fe 01       	movw	r30, r28
    2514:	ed 59       	subi	r30, 0x9D	; 157
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	82 95       	swap	r24
    251c:	8f 70       	andi	r24, 0x0F	; 15
    251e:	98 2f       	mov	r25, r24
    2520:	91 70       	andi	r25, 0x01	; 1
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	49 2f       	mov	r20, r25
    2528:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,5));
    252c:	fe 01       	movw	r30, r28
    252e:	ed 59       	subi	r30, 0x9D	; 157
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	82 95       	swap	r24
    2536:	86 95       	lsr	r24
    2538:	87 70       	andi	r24, 0x07	; 7
    253a:	98 2f       	mov	r25, r24
    253c:	91 70       	andi	r25, 0x01	; 1
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	64 e0       	ldi	r22, 0x04	; 4
    2542:	49 2f       	mov	r20, r25
    2544:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,6));
    2548:	fe 01       	movw	r30, r28
    254a:	ed 59       	subi	r30, 0x9D	; 157
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	82 95       	swap	r24
    2552:	86 95       	lsr	r24
    2554:	86 95       	lsr	r24
    2556:	83 70       	andi	r24, 0x03	; 3
    2558:	98 2f       	mov	r25, r24
    255a:	91 70       	andi	r25, 0x01	; 1
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	65 e0       	ldi	r22, 0x05	; 5
    2560:	49 2f       	mov	r20, r25
    2562:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,7));
    2566:	fe 01       	movw	r30, r28
    2568:	ed 59       	subi	r30, 0x9D	; 157
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	98 2f       	mov	r25, r24
    2570:	99 1f       	adc	r25, r25
    2572:	99 27       	eor	r25, r25
    2574:	99 1f       	adc	r25, r25
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	66 e0       	ldi	r22, 0x06	; 6
    257a:	49 2f       	mov	r20, r25
    257c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2580:	fe 01       	movw	r30, r28
    2582:	ed 5b       	subi	r30, 0xBD	; 189
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 e8       	ldi	r26, 0x80	; 128
    258c:	bf e3       	ldi	r27, 0x3F	; 63
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	8e 01       	movw	r16, r28
    2598:	01 5c       	subi	r16, 0xC1	; 193
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	fe 01       	movw	r30, r28
    259e:	ed 5b       	subi	r30, 0xBD	; 189
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a e7       	ldi	r20, 0x7A	; 122
    25b0:	55 e4       	ldi	r21, 0x45	; 69
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	f8 01       	movw	r30, r16
    25bc:	80 83       	st	Z, r24
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	a2 83       	std	Z+2, r26	; 0x02
    25c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c4:	fe 01       	movw	r30, r28
    25c6:	ff 96       	adiw	r30, 0x3f	; 63
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <LCD_sendCommand+0x3da>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e af       	std	Y+62, r25	; 0x3e
    25e6:	8d af       	std	Y+61, r24	; 0x3d
    25e8:	46 c0       	rjmp	.+140    	; 0x2676 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    25ea:	fe 01       	movw	r30, r28
    25ec:	ff 96       	adiw	r30, 0x3f	; 63
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	64 f5       	brge	.+88     	; 0x265e <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	fe 01       	movw	r30, r28
    2608:	ed 5b       	subi	r30, 0xBD	; 189
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9e af       	std	Y+62, r25	; 0x3e
    2632:	8d af       	std	Y+61, r24	; 0x3d
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <LCD_sendCommand+0x444>
    2636:	80 e9       	ldi	r24, 0x90	; 144
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	9c af       	std	Y+60, r25	; 0x3c
    263c:	8b af       	std	Y+59, r24	; 0x3b
    263e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2640:	9c ad       	ldd	r25, Y+60	; 0x3c
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_sendCommand+0x432>
    2646:	9c af       	std	Y+60, r25	; 0x3c
    2648:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8d ad       	ldd	r24, Y+61	; 0x3d
    264c:	9e ad       	ldd	r25, Y+62	; 0x3e
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9e af       	std	Y+62, r25	; 0x3e
    2652:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8d ad       	ldd	r24, Y+61	; 0x3d
    2656:	9e ad       	ldd	r25, Y+62	; 0x3e
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <LCD_sendCommand+0x426>
    265c:	16 c0       	rjmp	.+44     	; 0x268a <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	fe 01       	movw	r30, r28
    2660:	ff 96       	adiw	r30, 0x3f	; 63
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e af       	std	Y+62, r25	; 0x3e
    2674:	8d af       	std	Y+61, r24	; 0x3d
    2676:	8d ad       	ldd	r24, Y+61	; 0x3d
    2678:	9e ad       	ldd	r25, Y+62	; 0x3e
    267a:	9a af       	std	Y+58, r25	; 0x3a
    267c:	89 af       	std	Y+57, r24	; 0x39
    267e:	89 ad       	ldd	r24, Y+57	; 0x39
    2680:	9a ad       	ldd	r25, Y+58	; 0x3a
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_sendCommand+0x472>
    2686:	9a af       	std	Y+58, r25	; 0x3a
    2688:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 e8       	ldi	r26, 0x80	; 128
    269a:	bf e3       	ldi	r27, 0x3F	; 63
    269c:	8d ab       	std	Y+53, r24	; 0x35
    269e:	9e ab       	std	Y+54, r25	; 0x36
    26a0:	af ab       	std	Y+55, r26	; 0x37
    26a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	6d a9       	ldd	r22, Y+53	; 0x35
    26a6:	7e a9       	ldd	r23, Y+54	; 0x36
    26a8:	8f a9       	ldd	r24, Y+55	; 0x37
    26aa:	98 ad       	ldd	r25, Y+56	; 0x38
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a e7       	ldi	r20, 0x7A	; 122
    26b2:	55 e4       	ldi	r21, 0x45	; 69
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	89 ab       	std	Y+49, r24	; 0x31
    26be:	9a ab       	std	Y+50, r25	; 0x32
    26c0:	ab ab       	std	Y+51, r26	; 0x33
    26c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26c4:	69 a9       	ldd	r22, Y+49	; 0x31
    26c6:	7a a9       	ldd	r23, Y+50	; 0x32
    26c8:	8b a9       	ldd	r24, Y+51	; 0x33
    26ca:	9c a9       	ldd	r25, Y+52	; 0x34
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	98 ab       	std	Y+48, r25	; 0x30
    26e2:	8f a7       	std	Y+47, r24	; 0x2f
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    26e6:	69 a9       	ldd	r22, Y+49	; 0x31
    26e8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ea:	8b a9       	ldd	r24, Y+51	; 0x33
    26ec:	9c a9       	ldd	r25, Y+52	; 0x34
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2700:	7e a9       	ldd	r23, Y+54	; 0x36
    2702:	8f a9       	ldd	r24, Y+55	; 0x37
    2704:	98 ad       	ldd	r25, Y+56	; 0x38
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	98 ab       	std	Y+48, r25	; 0x30
    2724:	8f a7       	std	Y+47, r24	; 0x2f
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <LCD_sendCommand+0x536>
    2728:	80 e9       	ldi	r24, 0x90	; 144
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	9e a7       	std	Y+46, r25	; 0x2e
    272e:	8d a7       	std	Y+45, r24	; 0x2d
    2730:	8d a5       	ldd	r24, Y+45	; 0x2d
    2732:	9e a5       	ldd	r25, Y+46	; 0x2e
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_sendCommand+0x524>
    2738:	9e a7       	std	Y+46, r25	; 0x2e
    273a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8f a5       	ldd	r24, Y+47	; 0x2f
    273e:	98 a9       	ldd	r25, Y+48	; 0x30
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8f a5       	ldd	r24, Y+47	; 0x2f
    2748:	98 a9       	ldd	r25, Y+48	; 0x30
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <LCD_sendCommand+0x518>
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	69 a9       	ldd	r22, Y+49	; 0x31
    2752:	7a a9       	ldd	r23, Y+50	; 0x32
    2754:	8b a9       	ldd	r24, Y+51	; 0x33
    2756:	9c a9       	ldd	r25, Y+52	; 0x34
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	98 ab       	std	Y+48, r25	; 0x30
    2762:	8f a7       	std	Y+47, r24	; 0x2f
    2764:	8f a5       	ldd	r24, Y+47	; 0x2f
    2766:	98 a9       	ldd	r25, Y+48	; 0x30
    2768:	9c a7       	std	Y+44, r25	; 0x2c
    276a:	8b a7       	std	Y+43, r24	; 0x2b
    276c:	8b a5       	ldd	r24, Y+43	; 0x2b
    276e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_sendCommand+0x560>
    2774:	9c a7       	std	Y+44, r25	; 0x2c
    2776:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	62 e0       	ldi	r22, 0x02	; 2
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e8       	ldi	r26, 0x80	; 128
    2788:	bf e3       	ldi	r27, 0x3F	; 63
    278a:	8f a3       	std	Y+39, r24	; 0x27
    278c:	98 a7       	std	Y+40, r25	; 0x28
    278e:	a9 a7       	std	Y+41, r26	; 0x29
    2790:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6f a1       	ldd	r22, Y+39	; 0x27
    2794:	78 a5       	ldd	r23, Y+40	; 0x28
    2796:	89 a5       	ldd	r24, Y+41	; 0x29
    2798:	9a a5       	ldd	r25, Y+42	; 0x2a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a e7       	ldi	r20, 0x7A	; 122
    27a0:	55 e4       	ldi	r21, 0x45	; 69
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8b a3       	std	Y+35, r24	; 0x23
    27ac:	9c a3       	std	Y+36, r25	; 0x24
    27ae:	ad a3       	std	Y+37, r26	; 0x25
    27b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27b2:	6b a1       	ldd	r22, Y+35	; 0x23
    27b4:	7c a1       	ldd	r23, Y+36	; 0x24
    27b6:	8d a1       	ldd	r24, Y+37	; 0x25
    27b8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9a a3       	std	Y+34, r25	; 0x22
    27d0:	89 a3       	std	Y+33, r24	; 0x21
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    27d4:	6b a1       	ldd	r22, Y+35	; 0x23
    27d6:	7c a1       	ldd	r23, Y+36	; 0x24
    27d8:	8d a1       	ldd	r24, Y+37	; 0x25
    27da:	9e a1       	ldd	r25, Y+38	; 0x26
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6f a1       	ldd	r22, Y+39	; 0x27
    27ee:	78 a5       	ldd	r23, Y+40	; 0x28
    27f0:	89 a5       	ldd	r24, Y+41	; 0x29
    27f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9a a3       	std	Y+34, r25	; 0x22
    2812:	89 a3       	std	Y+33, r24	; 0x21
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <LCD_sendCommand+0x624>
    2816:	80 e9       	ldi	r24, 0x90	; 144
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	98 a3       	std	Y+32, r25	; 0x20
    281c:	8f 8f       	std	Y+31, r24	; 0x1f
    281e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2820:	98 a1       	ldd	r25, Y+32	; 0x20
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_sendCommand+0x612>
    2826:	98 a3       	std	Y+32, r25	; 0x20
    2828:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <LCD_sendCommand+0x606>
    283c:	14 c0       	rjmp	.+40     	; 0x2866 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	6b a1       	ldd	r22, Y+35	; 0x23
    2840:	7c a1       	ldd	r23, Y+36	; 0x24
    2842:	8d a1       	ldd	r24, Y+37	; 0x25
    2844:	9e a1       	ldd	r25, Y+38	; 0x26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9a a3       	std	Y+34, r25	; 0x22
    2850:	89 a3       	std	Y+33, r24	; 0x21
    2852:	89 a1       	ldd	r24, Y+33	; 0x21
    2854:	9a a1       	ldd	r25, Y+34	; 0x22
    2856:	9e 8f       	std	Y+30, r25	; 0x1e
    2858:	8d 8f       	std	Y+29, r24	; 0x1d
    285a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_sendCommand+0x64e>
    2862:	9e 8f       	std	Y+30, r25	; 0x1e
    2864:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,0));
    2866:	fe 01       	movw	r30, r28
    2868:	ed 59       	subi	r30, 0x9D	; 157
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	98 2f       	mov	r25, r24
    2870:	91 70       	andi	r25, 0x01	; 1
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	63 e0       	ldi	r22, 0x03	; 3
    2876:	49 2f       	mov	r20, r25
    2878:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
    287c:	fe 01       	movw	r30, r28
    287e:	ed 59       	subi	r30, 0x9D	; 157
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	86 95       	lsr	r24
    2886:	98 2f       	mov	r25, r24
    2888:	91 70       	andi	r25, 0x01	; 1
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	64 e0       	ldi	r22, 0x04	; 4
    288e:	49 2f       	mov	r20, r25
    2890:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
    2894:	fe 01       	movw	r30, r28
    2896:	ed 59       	subi	r30, 0x9D	; 157
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	86 95       	lsr	r24
    289e:	86 95       	lsr	r24
    28a0:	98 2f       	mov	r25, r24
    28a2:	91 70       	andi	r25, 0x01	; 1
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	65 e0       	ldi	r22, 0x05	; 5
    28a8:	49 2f       	mov	r20, r25
    28aa:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));
    28ae:	fe 01       	movw	r30, r28
    28b0:	ed 59       	subi	r30, 0x9D	; 157
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	86 95       	lsr	r24
    28b8:	86 95       	lsr	r24
    28ba:	86 95       	lsr	r24
    28bc:	98 2f       	mov	r25, r24
    28be:	91 70       	andi	r25, 0x01	; 1
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	66 e0       	ldi	r22, 0x06	; 6
    28c4:	49 2f       	mov	r20, r25
    28c6:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e8       	ldi	r26, 0x80	; 128
    28d0:	bf e3       	ldi	r27, 0x3F	; 63
    28d2:	89 8f       	std	Y+25, r24	; 0x19
    28d4:	9a 8f       	std	Y+26, r25	; 0x1a
    28d6:	ab 8f       	std	Y+27, r26	; 0x1b
    28d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	69 8d       	ldd	r22, Y+25	; 0x19
    28dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a e7       	ldi	r20, 0x7A	; 122
    28e8:	55 e4       	ldi	r21, 0x45	; 69
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8d 8b       	std	Y+21, r24	; 0x15
    28f4:	9e 8b       	std	Y+22, r25	; 0x16
    28f6:	af 8b       	std	Y+23, r26	; 0x17
    28f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28fa:	6d 89       	ldd	r22, Y+21	; 0x15
    28fc:	7e 89       	ldd	r23, Y+22	; 0x16
    28fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2900:	98 8d       	ldd	r25, Y+24	; 0x18
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	2c f4       	brge	.+10     	; 0x291c <LCD_sendCommand+0x70c>
		__ticks = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9c 8b       	std	Y+20, r25	; 0x14
    2918:	8b 8b       	std	Y+19, r24	; 0x13
    291a:	3f c0       	rjmp	.+126    	; 0x299a <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    291c:	6d 89       	ldd	r22, Y+21	; 0x15
    291e:	7e 89       	ldd	r23, Y+22	; 0x16
    2920:	8f 89       	ldd	r24, Y+23	; 0x17
    2922:	98 8d       	ldd	r25, Y+24	; 0x18
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	4c f5       	brge	.+82     	; 0x2986 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	69 8d       	ldd	r22, Y+25	; 0x19
    2936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
    295c:	0f c0       	rjmp	.+30     	; 0x297c <LCD_sendCommand+0x76c>
    295e:	80 e9       	ldi	r24, 0x90	; 144
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	9a 8b       	std	Y+18, r25	; 0x12
    2964:	89 8b       	std	Y+17, r24	; 0x11
    2966:	89 89       	ldd	r24, Y+17	; 0x11
    2968:	9a 89       	ldd	r25, Y+18	; 0x12
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_sendCommand+0x75a>
    296e:	9a 8b       	std	Y+18, r25	; 0x12
    2970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	9c 89       	ldd	r25, Y+20	; 0x14
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	69 f7       	brne	.-38     	; 0x295e <LCD_sendCommand+0x74e>
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	6d 89       	ldd	r22, Y+21	; 0x15
    2988:	7e 89       	ldd	r23, Y+22	; 0x16
    298a:	8f 89       	ldd	r24, Y+23	; 0x17
    298c:	98 8d       	ldd	r25, Y+24	; 0x18
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9c 8b       	std	Y+20, r25	; 0x14
    2998:	8b 8b       	std	Y+19, r24	; 0x13
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	98 8b       	std	Y+16, r25	; 0x10
    29a0:	8f 87       	std	Y+15, r24	; 0x0f
    29a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a4:	98 89       	ldd	r25, Y+16	; 0x10
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <LCD_sendCommand+0x796>
    29aa:	98 8b       	std	Y+16, r25	; 0x10
    29ac:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	62 e0       	ldi	r22, 0x02	; 2
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e8       	ldi	r26, 0x80	; 128
    29be:	bf e3       	ldi	r27, 0x3F	; 63
    29c0:	8b 87       	std	Y+11, r24	; 0x0b
    29c2:	9c 87       	std	Y+12, r25	; 0x0c
    29c4:	ad 87       	std	Y+13, r26	; 0x0d
    29c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    29cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a e7       	ldi	r20, 0x7A	; 122
    29d6:	55 e4       	ldi	r21, 0x45	; 69
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8f 83       	std	Y+7, r24	; 0x07
    29e2:	98 87       	std	Y+8, r25	; 0x08
    29e4:	a9 87       	std	Y+9, r26	; 0x09
    29e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <LCD_sendCommand+0x7fa>
		__ticks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	3f c0       	rjmp	.+126    	; 0x2a88 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	4c f5       	brge	.+82     	; 0x2a74 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <LCD_sendCommand+0x85a>
    2a4c:	80 e9       	ldi	r24, 0x90	; 144
    2a4e:	91 e0       	ldi	r25, 0x01	; 1
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_sendCommand+0x848>
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <LCD_sendCommand+0x83c>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	9a 81       	ldd	r25, Y+2	; 0x02
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <LCD_sendCommand+0x884>
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    2a9c:	cd 59       	subi	r28, 0x9D	; 157
    2a9e:	df 4f       	sbci	r29, 0xFF	; 255
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	08 95       	ret

00002ab4 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	c3 56       	subi	r28, 0x63	; 99
    2ac2:	d0 40       	sbci	r29, 0x00	; 0
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ed 59       	subi	r30, 0x9D	; 157
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e1 5a       	subi	r30, 0xA1	; 161
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a0 e8       	ldi	r26, 0x80	; 128
    2aec:	bf e3       	ldi	r27, 0x3F	; 63
    2aee:	80 83       	st	Z, r24
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	a2 83       	std	Z+2, r26	; 0x02
    2af4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	8e 01       	movw	r16, r28
    2af8:	05 5a       	subi	r16, 0xA5	; 165
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	fe 01       	movw	r30, r28
    2afe:	e1 5a       	subi	r30, 0xA1	; 161
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a e7       	ldi	r20, 0x7A	; 122
    2b10:	55 e4       	ldi	r21, 0x45	; 69
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	80 83       	st	Z, r24
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	a2 83       	std	Z+2, r26	; 0x02
    2b22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b24:	fe 01       	movw	r30, r28
    2b26:	e5 5a       	subi	r30, 0xA5	; 165
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f e3       	ldi	r21, 0x3F	; 63
    2b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3e:	88 23       	and	r24, r24
    2b40:	44 f4       	brge	.+16     	; 0x2b52 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2b42:	fe 01       	movw	r30, r28
    2b44:	e7 5a       	subi	r30, 0xA7	; 167
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
    2b50:	64 c0       	rjmp	.+200    	; 0x2c1a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2b52:	fe 01       	movw	r30, r28
    2b54:	e5 5a       	subi	r30, 0xA5	; 165
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	0c f0       	brlt	.+2      	; 0x2b72 <LCD_displayCharacter+0xbe>
    2b70:	43 c0       	rjmp	.+134    	; 0x2bf8 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	fe 01       	movw	r30, r28
    2b74:	e1 5a       	subi	r30, 0xA1	; 161
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8e 01       	movw	r16, r28
    2b92:	07 5a       	subi	r16, 0xA7	; 167
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
    2ba8:	1f c0       	rjmp	.+62     	; 0x2be8 <LCD_displayCharacter+0x134>
    2baa:	fe 01       	movw	r30, r28
    2bac:	e9 5a       	subi	r30, 0xA9	; 169
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 e9       	ldi	r24, 0x90	; 144
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	80 83       	st	Z, r24
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e9 5a       	subi	r30, 0xA9	; 169
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_displayCharacter+0x10e>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e9 5a       	subi	r30, 0xA9	; 169
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd0:	de 01       	movw	r26, r28
    2bd2:	a7 5a       	subi	r26, 0xA7	; 167
    2bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e7 5a       	subi	r30, 0xA7	; 167
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	11 96       	adiw	r26, 0x01	; 1
    2be4:	9c 93       	st	X, r25
    2be6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	fe 01       	movw	r30, r28
    2bea:	e7 5a       	subi	r30, 0xA7	; 167
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	d1 f6       	brne	.-76     	; 0x2baa <LCD_displayCharacter+0xf6>
    2bf6:	27 c0       	rjmp	.+78     	; 0x2c46 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf8:	8e 01       	movw	r16, r28
    2bfa:	07 5a       	subi	r16, 0xA7	; 167
    2bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e5 5a       	subi	r30, 0xA5	; 165
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	f8 01       	movw	r30, r16
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
    2c1a:	de 01       	movw	r26, r28
    2c1c:	ab 5a       	subi	r26, 0xAB	; 171
    2c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	e7 5a       	subi	r30, 0xA7	; 167
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	8d 93       	st	X+, r24
    2c2c:	9c 93       	st	X, r25
    2c2e:	fe 01       	movw	r30, r28
    2c30:	eb 5a       	subi	r30, 0xAB	; 171
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	91 81       	ldd	r25, Z+1	; 0x01
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <LCD_displayCharacter+0x184>
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	eb 5a       	subi	r30, 0xAB	; 171
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	62 e0       	ldi	r22, 0x02	; 2
    2c4a:	41 e0       	ldi	r20, 0x01	; 1
    2c4c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2c50:	fe 01       	movw	r30, r28
    2c52:	ef 5a       	subi	r30, 0xAF	; 175
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	a0 e8       	ldi	r26, 0x80	; 128
    2c5c:	bf e3       	ldi	r27, 0x3F	; 63
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	8e 01       	movw	r16, r28
    2c68:	03 5b       	subi	r16, 0xB3	; 179
    2c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ef 5a       	subi	r30, 0xAF	; 175
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a e7       	ldi	r20, 0x7A	; 122
    2c80:	55 e4       	ldi	r21, 0x45	; 69
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e3 5b       	subi	r30, 0xB3	; 179
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	44 f4       	brge	.+16     	; 0x2cc2 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e5 5b       	subi	r30, 0xB5	; 181
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
    2cc0:	64 c0       	rjmp	.+200    	; 0x2d8a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 5b       	subi	r30, 0xB3	; 179
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	3f ef       	ldi	r19, 0xFF	; 255
    2cd4:	4f e7       	ldi	r20, 0x7F	; 127
    2cd6:	57 e4       	ldi	r21, 0x47	; 71
    2cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cdc:	18 16       	cp	r1, r24
    2cde:	0c f0       	brlt	.+2      	; 0x2ce2 <LCD_displayCharacter+0x22e>
    2ce0:	43 c0       	rjmp	.+134    	; 0x2d68 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 5a       	subi	r30, 0xAF	; 175
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	60 81       	ld	r22, Z
    2cea:	71 81       	ldd	r23, Z+1	; 0x01
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e2       	ldi	r20, 0x20	; 32
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	8e 01       	movw	r16, r28
    2d02:	05 5b       	subi	r16, 0xB5	; 181
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	f8 01       	movw	r30, r16
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	80 83       	st	Z, r24
    2d18:	1f c0       	rjmp	.+62     	; 0x2d58 <LCD_displayCharacter+0x2a4>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e7 5b       	subi	r30, 0xB7	; 183
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 e9       	ldi	r24, 0x90	; 144
    2d22:	91 e0       	ldi	r25, 0x01	; 1
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e7 5b       	subi	r30, 0xB7	; 183
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <LCD_displayCharacter+0x27e>
    2d36:	fe 01       	movw	r30, r28
    2d38:	e7 5b       	subi	r30, 0xB7	; 183
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	de 01       	movw	r26, r28
    2d42:	a5 5b       	subi	r26, 0xB5	; 181
    2d44:	bf 4f       	sbci	r27, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e5 5b       	subi	r30, 0xB5	; 181
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	11 96       	adiw	r26, 0x01	; 1
    2d54:	9c 93       	st	X, r25
    2d56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e5 5b       	subi	r30, 0xB5	; 181
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	d1 f6       	brne	.-76     	; 0x2d1a <LCD_displayCharacter+0x266>
    2d66:	27 c0       	rjmp	.+78     	; 0x2db6 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	8e 01       	movw	r16, r28
    2d6a:	05 5b       	subi	r16, 0xB5	; 181
    2d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e3 5b       	subi	r30, 0xB3	; 179
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	f8 01       	movw	r30, r16
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	de 01       	movw	r26, r28
    2d8c:	a9 5b       	subi	r26, 0xB9	; 185
    2d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d90:	fe 01       	movw	r30, r28
    2d92:	e5 5b       	subi	r30, 0xB5	; 181
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	8d 93       	st	X+, r24
    2d9c:	9c 93       	st	X, r25
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e9 5b       	subi	r30, 0xB9	; 185
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_displayCharacter+0x2f4>
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 5b       	subi	r30, 0xB9	; 185
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,4));
    2db6:	fe 01       	movw	r30, r28
    2db8:	ed 59       	subi	r30, 0x9D	; 157
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	82 95       	swap	r24
    2dc0:	8f 70       	andi	r24, 0x0F	; 15
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	91 70       	andi	r25, 0x01	; 1
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	63 e0       	ldi	r22, 0x03	; 3
    2dca:	49 2f       	mov	r20, r25
    2dcc:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,5));
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ed 59       	subi	r30, 0x9D	; 157
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 81       	ld	r24, Z
    2dd8:	82 95       	swap	r24
    2dda:	86 95       	lsr	r24
    2ddc:	87 70       	andi	r24, 0x07	; 7
    2dde:	98 2f       	mov	r25, r24
    2de0:	91 70       	andi	r25, 0x01	; 1
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	64 e0       	ldi	r22, 0x04	; 4
    2de6:	49 2f       	mov	r20, r25
    2de8:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,6));
    2dec:	fe 01       	movw	r30, r28
    2dee:	ed 59       	subi	r30, 0x9D	; 157
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	82 95       	swap	r24
    2df6:	86 95       	lsr	r24
    2df8:	86 95       	lsr	r24
    2dfa:	83 70       	andi	r24, 0x03	; 3
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	91 70       	andi	r25, 0x01	; 1
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	65 e0       	ldi	r22, 0x05	; 5
    2e04:	49 2f       	mov	r20, r25
    2e06:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,7));
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ed 59       	subi	r30, 0x9D	; 157
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	98 2f       	mov	r25, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	99 27       	eor	r25, r25
    2e18:	99 1f       	adc	r25, r25
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	66 e0       	ldi	r22, 0x06	; 6
    2e1e:	49 2f       	mov	r20, r25
    2e20:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2e24:	fe 01       	movw	r30, r28
    2e26:	ed 5b       	subi	r30, 0xBD	; 189
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	a0 e8       	ldi	r26, 0x80	; 128
    2e30:	bf e3       	ldi	r27, 0x3F	; 63
    2e32:	80 83       	st	Z, r24
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	a2 83       	std	Z+2, r26	; 0x02
    2e38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	01 5c       	subi	r16, 0xC1	; 193
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 5b       	subi	r30, 0xBD	; 189
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a e7       	ldi	r20, 0x7A	; 122
    2e54:	55 e4       	ldi	r21, 0x45	; 69
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	f8 01       	movw	r30, r16
    2e60:	80 83       	st	Z, r24
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	a2 83       	std	Z+2, r26	; 0x02
    2e66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ff 96       	adiw	r30, 0x3f	; 63
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <LCD_displayCharacter+0x3da>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9e af       	std	Y+62, r25	; 0x3e
    2e8a:	8d af       	std	Y+61, r24	; 0x3d
    2e8c:	46 c0       	rjmp	.+140    	; 0x2f1a <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ff 96       	adiw	r30, 0x3f	; 63
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	3f ef       	ldi	r19, 0xFF	; 255
    2e9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ea0:	57 e4       	ldi	r21, 0x47	; 71
    2ea2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea6:	18 16       	cp	r1, r24
    2ea8:	64 f5       	brge	.+88     	; 0x2f02 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ed 5b       	subi	r30, 0xBD	; 189
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9e af       	std	Y+62, r25	; 0x3e
    2ed6:	8d af       	std	Y+61, r24	; 0x3d
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <LCD_displayCharacter+0x444>
    2eda:	80 e9       	ldi	r24, 0x90	; 144
    2edc:	91 e0       	ldi	r25, 0x01	; 1
    2ede:	9c af       	std	Y+60, r25	; 0x3c
    2ee0:	8b af       	std	Y+59, r24	; 0x3b
    2ee2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ee4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <LCD_displayCharacter+0x432>
    2eea:	9c af       	std	Y+60, r25	; 0x3c
    2eec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9e af       	std	Y+62, r25	; 0x3e
    2ef6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2efa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <LCD_displayCharacter+0x426>
    2f00:	16 c0       	rjmp	.+44     	; 0x2f2e <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	fe 01       	movw	r30, r28
    2f04:	ff 96       	adiw	r30, 0x3f	; 63
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9e af       	std	Y+62, r25	; 0x3e
    2f18:	8d af       	std	Y+61, r24	; 0x3d
    2f1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f1e:	9a af       	std	Y+58, r25	; 0x3a
    2f20:	89 af       	std	Y+57, r24	; 0x39
    2f22:	89 ad       	ldd	r24, Y+57	; 0x39
    2f24:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <LCD_displayCharacter+0x472>
    2f2a:	9a af       	std	Y+58, r25	; 0x3a
    2f2c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	8d ab       	std	Y+53, r24	; 0x35
    2f42:	9e ab       	std	Y+54, r25	; 0x36
    2f44:	af ab       	std	Y+55, r26	; 0x37
    2f46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	6d a9       	ldd	r22, Y+53	; 0x35
    2f4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a e7       	ldi	r20, 0x7A	; 122
    2f56:	55 e4       	ldi	r21, 0x45	; 69
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	89 ab       	std	Y+49, r24	; 0x31
    2f62:	9a ab       	std	Y+50, r25	; 0x32
    2f64:	ab ab       	std	Y+51, r26	; 0x33
    2f66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f68:	69 a9       	ldd	r22, Y+49	; 0x31
    2f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	98 ab       	std	Y+48, r25	; 0x30
    2f86:	8f a7       	std	Y+47, r24	; 0x2f
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f90:	9c a9       	ldd	r25, Y+52	; 0x34
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	6d a9       	ldd	r22, Y+53	; 0x35
    2fa4:	7e a9       	ldd	r23, Y+54	; 0x36
    2fa6:	8f a9       	ldd	r24, Y+55	; 0x37
    2fa8:	98 ad       	ldd	r25, Y+56	; 0x38
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	98 ab       	std	Y+48, r25	; 0x30
    2fc8:	8f a7       	std	Y+47, r24	; 0x2f
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <LCD_displayCharacter+0x536>
    2fcc:	80 e9       	ldi	r24, 0x90	; 144
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	9e a7       	std	Y+46, r25	; 0x2e
    2fd2:	8d a7       	std	Y+45, r24	; 0x2d
    2fd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_displayCharacter+0x524>
    2fdc:	9e a7       	std	Y+46, r25	; 0x2e
    2fde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fec:	98 a9       	ldd	r25, Y+48	; 0x30
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <LCD_displayCharacter+0x518>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ff6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff8:	8b a9       	ldd	r24, Y+51	; 0x33
    2ffa:	9c a9       	ldd	r25, Y+52	; 0x34
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	98 ab       	std	Y+48, r25	; 0x30
    3006:	8f a7       	std	Y+47, r24	; 0x2f
    3008:	8f a5       	ldd	r24, Y+47	; 0x2f
    300a:	98 a9       	ldd	r25, Y+48	; 0x30
    300c:	9c a7       	std	Y+44, r25	; 0x2c
    300e:	8b a7       	std	Y+43, r24	; 0x2b
    3010:	8b a5       	ldd	r24, Y+43	; 0x2b
    3012:	9c a5       	ldd	r25, Y+44	; 0x2c
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <LCD_displayCharacter+0x560>
    3018:	9c a7       	std	Y+44, r25	; 0x2c
    301a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	62 e0       	ldi	r22, 0x02	; 2
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e8       	ldi	r26, 0x80	; 128
    302c:	bf e3       	ldi	r27, 0x3F	; 63
    302e:	8f a3       	std	Y+39, r24	; 0x27
    3030:	98 a7       	std	Y+40, r25	; 0x28
    3032:	a9 a7       	std	Y+41, r26	; 0x29
    3034:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6f a1       	ldd	r22, Y+39	; 0x27
    3038:	78 a5       	ldd	r23, Y+40	; 0x28
    303a:	89 a5       	ldd	r24, Y+41	; 0x29
    303c:	9a a5       	ldd	r25, Y+42	; 0x2a
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	55 e4       	ldi	r21, 0x45	; 69
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8b a3       	std	Y+35, r24	; 0x23
    3050:	9c a3       	std	Y+36, r25	; 0x24
    3052:	ad a3       	std	Y+37, r26	; 0x25
    3054:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3056:	6b a1       	ldd	r22, Y+35	; 0x23
    3058:	7c a1       	ldd	r23, Y+36	; 0x24
    305a:	8d a1       	ldd	r24, Y+37	; 0x25
    305c:	9e a1       	ldd	r25, Y+38	; 0x26
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9a a3       	std	Y+34, r25	; 0x22
    3074:	89 a3       	std	Y+33, r24	; 0x21
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    3078:	6b a1       	ldd	r22, Y+35	; 0x23
    307a:	7c a1       	ldd	r23, Y+36	; 0x24
    307c:	8d a1       	ldd	r24, Y+37	; 0x25
    307e:	9e a1       	ldd	r25, Y+38	; 0x26
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6f a1       	ldd	r22, Y+39	; 0x27
    3092:	78 a5       	ldd	r23, Y+40	; 0x28
    3094:	89 a5       	ldd	r24, Y+41	; 0x29
    3096:	9a a5       	ldd	r25, Y+42	; 0x2a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9a a3       	std	Y+34, r25	; 0x22
    30b6:	89 a3       	std	Y+33, r24	; 0x21
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <LCD_displayCharacter+0x624>
    30ba:	80 e9       	ldi	r24, 0x90	; 144
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	98 a3       	std	Y+32, r25	; 0x20
    30c0:	8f 8f       	std	Y+31, r24	; 0x1f
    30c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30c4:	98 a1       	ldd	r25, Y+32	; 0x20
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <LCD_displayCharacter+0x612>
    30ca:	98 a3       	std	Y+32, r25	; 0x20
    30cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	89 a1       	ldd	r24, Y+33	; 0x21
    30d0:	9a a1       	ldd	r25, Y+34	; 0x22
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9a a3       	std	Y+34, r25	; 0x22
    30d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	89 a1       	ldd	r24, Y+33	; 0x21
    30da:	9a a1       	ldd	r25, Y+34	; 0x22
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <LCD_displayCharacter+0x606>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	6b a1       	ldd	r22, Y+35	; 0x23
    30e4:	7c a1       	ldd	r23, Y+36	; 0x24
    30e6:	8d a1       	ldd	r24, Y+37	; 0x25
    30e8:	9e a1       	ldd	r25, Y+38	; 0x26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9a a3       	std	Y+34, r25	; 0x22
    30f4:	89 a3       	std	Y+33, r24	; 0x21
    30f6:	89 a1       	ldd	r24, Y+33	; 0x21
    30f8:	9a a1       	ldd	r25, Y+34	; 0x22
    30fa:	9e 8f       	std	Y+30, r25	; 0x1e
    30fc:	8d 8f       	std	Y+29, r24	; 0x1d
    30fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3100:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <LCD_displayCharacter+0x64e>
    3106:	9e 8f       	std	Y+30, r25	; 0x1e
    3108:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,0));
    310a:	fe 01       	movw	r30, r28
    310c:	ed 59       	subi	r30, 0x9D	; 157
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	98 2f       	mov	r25, r24
    3114:	91 70       	andi	r25, 0x01	; 1
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	63 e0       	ldi	r22, 0x03	; 3
    311a:	49 2f       	mov	r20, r25
    311c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
    3120:	fe 01       	movw	r30, r28
    3122:	ed 59       	subi	r30, 0x9D	; 157
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 81       	ld	r24, Z
    3128:	86 95       	lsr	r24
    312a:	98 2f       	mov	r25, r24
    312c:	91 70       	andi	r25, 0x01	; 1
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	64 e0       	ldi	r22, 0x04	; 4
    3132:	49 2f       	mov	r20, r25
    3134:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
    3138:	fe 01       	movw	r30, r28
    313a:	ed 59       	subi	r30, 0x9D	; 157
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 81       	ld	r24, Z
    3140:	86 95       	lsr	r24
    3142:	86 95       	lsr	r24
    3144:	98 2f       	mov	r25, r24
    3146:	91 70       	andi	r25, 0x01	; 1
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	65 e0       	ldi	r22, 0x05	; 5
    314c:	49 2f       	mov	r20, r25
    314e:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));
    3152:	fe 01       	movw	r30, r28
    3154:	ed 59       	subi	r30, 0x9D	; 157
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 81       	ld	r24, Z
    315a:	86 95       	lsr	r24
    315c:	86 95       	lsr	r24
    315e:	86 95       	lsr	r24
    3160:	98 2f       	mov	r25, r24
    3162:	91 70       	andi	r25, 0x01	; 1
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	66 e0       	ldi	r22, 0x06	; 6
    3168:	49 2f       	mov	r20, r25
    316a:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	a0 e8       	ldi	r26, 0x80	; 128
    3174:	bf e3       	ldi	r27, 0x3F	; 63
    3176:	89 8f       	std	Y+25, r24	; 0x19
    3178:	9a 8f       	std	Y+26, r25	; 0x1a
    317a:	ab 8f       	std	Y+27, r26	; 0x1b
    317c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317e:	69 8d       	ldd	r22, Y+25	; 0x19
    3180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	4a e7       	ldi	r20, 0x7A	; 122
    318c:	55 e4       	ldi	r21, 0x45	; 69
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8d 8b       	std	Y+21, r24	; 0x15
    3198:	9e 8b       	std	Y+22, r25	; 0x16
    319a:	af 8b       	std	Y+23, r26	; 0x17
    319c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e8       	ldi	r20, 0x80	; 128
    31ac:	5f e3       	ldi	r21, 0x3F	; 63
    31ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b2:	88 23       	and	r24, r24
    31b4:	2c f4       	brge	.+10     	; 0x31c0 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	9c 8b       	std	Y+20, r25	; 0x14
    31bc:	8b 8b       	std	Y+19, r24	; 0x13
    31be:	3f c0       	rjmp	.+126    	; 0x323e <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    31c0:	6d 89       	ldd	r22, Y+21	; 0x15
    31c2:	7e 89       	ldd	r23, Y+22	; 0x16
    31c4:	8f 89       	ldd	r24, Y+23	; 0x17
    31c6:	98 8d       	ldd	r25, Y+24	; 0x18
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f e7       	ldi	r20, 0x7F	; 127
    31ce:	57 e4       	ldi	r21, 0x47	; 71
    31d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d4:	18 16       	cp	r1, r24
    31d6:	4c f5       	brge	.+82     	; 0x322a <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d8:	69 8d       	ldd	r22, Y+25	; 0x19
    31da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e2       	ldi	r20, 0x20	; 32
    31e6:	51 e4       	ldi	r21, 0x41	; 65
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9c 8b       	std	Y+20, r25	; 0x14
    31fe:	8b 8b       	std	Y+19, r24	; 0x13
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <LCD_displayCharacter+0x76c>
    3202:	80 e9       	ldi	r24, 0x90	; 144
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	9a 8b       	std	Y+18, r25	; 0x12
    3208:	89 8b       	std	Y+17, r24	; 0x11
    320a:	89 89       	ldd	r24, Y+17	; 0x11
    320c:	9a 89       	ldd	r25, Y+18	; 0x12
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <LCD_displayCharacter+0x75a>
    3212:	9a 8b       	std	Y+18, r25	; 0x12
    3214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3216:	8b 89       	ldd	r24, Y+19	; 0x13
    3218:	9c 89       	ldd	r25, Y+20	; 0x14
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	9c 8b       	std	Y+20, r25	; 0x14
    321e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3220:	8b 89       	ldd	r24, Y+19	; 0x13
    3222:	9c 89       	ldd	r25, Y+20	; 0x14
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	69 f7       	brne	.-38     	; 0x3202 <LCD_displayCharacter+0x74e>
    3228:	14 c0       	rjmp	.+40     	; 0x3252 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322a:	6d 89       	ldd	r22, Y+21	; 0x15
    322c:	7e 89       	ldd	r23, Y+22	; 0x16
    322e:	8f 89       	ldd	r24, Y+23	; 0x17
    3230:	98 8d       	ldd	r25, Y+24	; 0x18
    3232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	9c 8b       	std	Y+20, r25	; 0x14
    323c:	8b 8b       	std	Y+19, r24	; 0x13
    323e:	8b 89       	ldd	r24, Y+19	; 0x13
    3240:	9c 89       	ldd	r25, Y+20	; 0x14
    3242:	98 8b       	std	Y+16, r25	; 0x10
    3244:	8f 87       	std	Y+15, r24	; 0x0f
    3246:	8f 85       	ldd	r24, Y+15	; 0x0f
    3248:	98 89       	ldd	r25, Y+16	; 0x10
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <LCD_displayCharacter+0x796>
    324e:	98 8b       	std	Y+16, r25	; 0x10
    3250:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	62 e0       	ldi	r22, 0x02	; 2
    3256:	40 e0       	ldi	r20, 0x00	; 0
    3258:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a0 e8       	ldi	r26, 0x80	; 128
    3262:	bf e3       	ldi	r27, 0x3F	; 63
    3264:	8b 87       	std	Y+11, r24	; 0x0b
    3266:	9c 87       	std	Y+12, r25	; 0x0c
    3268:	ad 87       	std	Y+13, r26	; 0x0d
    326a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	6b 85       	ldd	r22, Y+11	; 0x0b
    326e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3270:	8d 85       	ldd	r24, Y+13	; 0x0d
    3272:	9e 85       	ldd	r25, Y+14	; 0x0e
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	4a e7       	ldi	r20, 0x7A	; 122
    327a:	55 e4       	ldi	r21, 0x45	; 69
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	8f 83       	std	Y+7, r24	; 0x07
    3286:	98 87       	std	Y+8, r25	; 0x08
    3288:	a9 87       	std	Y+9, r26	; 0x09
    328a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    328c:	6f 81       	ldd	r22, Y+7	; 0x07
    328e:	78 85       	ldd	r23, Y+8	; 0x08
    3290:	89 85       	ldd	r24, Y+9	; 0x09
    3292:	9a 85       	ldd	r25, Y+10	; 0x0a
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	2c f4       	brge	.+10     	; 0x32ae <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	3f c0       	rjmp	.+126    	; 0x332c <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    32ae:	6f 81       	ldd	r22, Y+7	; 0x07
    32b0:	78 85       	ldd	r23, Y+8	; 0x08
    32b2:	89 85       	ldd	r24, Y+9	; 0x09
    32b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	3f ef       	ldi	r19, 0xFF	; 255
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	57 e4       	ldi	r21, 0x47	; 71
    32be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	4c f5       	brge	.+82     	; 0x3318 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    32cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <LCD_displayCharacter+0x85a>
    32f0:	80 e9       	ldi	r24, 0x90	; 144
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <LCD_displayCharacter+0x848>
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	9e 81       	ldd	r25, Y+6	; 0x06
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	9e 81       	ldd	r25, Y+6	; 0x06
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <LCD_displayCharacter+0x83c>
    3316:	14 c0       	rjmp	.+40     	; 0x3340 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	6f 81       	ldd	r22, Y+7	; 0x07
    331a:	78 85       	ldd	r23, Y+8	; 0x08
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9e 83       	std	Y+6, r25	; 0x06
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	9e 81       	ldd	r25, Y+6	; 0x06
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_displayCharacter+0x884>
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    3340:	cd 59       	subi	r28, 0x9D	; 157
    3342:	df 4f       	sbci	r29, 0xFF	; 255
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	08 95       	ret

00003358 <LCD_displayString>:

void LCD_displayString(char * string)
{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	00 d0       	rcall	.+0      	; 0x335e <LCD_displayString+0x6>
    335e:	0f 92       	push	r0
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	9b 83       	std	Y+3, r25	; 0x03
    3366:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    3368:	19 82       	std	Y+1, r1	; 0x01
    336a:	0e c0       	rjmp	.+28     	; 0x3388 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	fc 01       	movw	r30, r24
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	80 81       	ld	r24, Z
    337e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	8f 5f       	subi	r24, 0xFF	; 255
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	fc 01       	movw	r30, r24
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	80 81       	ld	r24, Z
    339a:	88 23       	and	r24, r24
    339c:	39 f7       	brne	.-50     	; 0x336c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <LCD_clearScreen>:

void LCD_clearScreen()
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>
}
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <LCD_moveCursor+0x6>
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <LCD_moveCursor+0x8>
    33c6:	0f 92       	push	r0
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	8a 83       	std	Y+2, r24	; 0x02
    33ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	3d 83       	std	Y+5, r19	; 0x05
    33d8:	2c 83       	std	Y+4, r18	; 0x04
    33da:	8c 81       	ldd	r24, Y+4	; 0x04
    33dc:	9d 81       	ldd	r25, Y+5	; 0x05
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	91 05       	cpc	r25, r1
    33e2:	c1 f0       	breq	.+48     	; 0x3414 <LCD_moveCursor+0x56>
    33e4:	2c 81       	ldd	r18, Y+4	; 0x04
    33e6:	3d 81       	ldd	r19, Y+5	; 0x05
    33e8:	22 30       	cpi	r18, 0x02	; 2
    33ea:	31 05       	cpc	r19, r1
    33ec:	2c f4       	brge	.+10     	; 0x33f8 <LCD_moveCursor+0x3a>
    33ee:	8c 81       	ldd	r24, Y+4	; 0x04
    33f0:	9d 81       	ldd	r25, Y+5	; 0x05
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	61 f0       	breq	.+24     	; 0x340e <LCD_moveCursor+0x50>
    33f6:	19 c0       	rjmp	.+50     	; 0x342a <LCD_moveCursor+0x6c>
    33f8:	2c 81       	ldd	r18, Y+4	; 0x04
    33fa:	3d 81       	ldd	r19, Y+5	; 0x05
    33fc:	22 30       	cpi	r18, 0x02	; 2
    33fe:	31 05       	cpc	r19, r1
    3400:	69 f0       	breq	.+26     	; 0x341c <LCD_moveCursor+0x5e>
    3402:	8c 81       	ldd	r24, Y+4	; 0x04
    3404:	9d 81       	ldd	r25, Y+5	; 0x05
    3406:	83 30       	cpi	r24, 0x03	; 3
    3408:	91 05       	cpc	r25, r1
    340a:	61 f0       	breq	.+24     	; 0x3424 <LCD_moveCursor+0x66>
    340c:	0e c0       	rjmp	.+28     	; 0x342a <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	89 83       	std	Y+1, r24	; 0x01
    3412:	0b c0       	rjmp	.+22     	; 0x342a <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	80 5c       	subi	r24, 0xC0	; 192
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	07 c0       	rjmp	.+14     	; 0x342a <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	80 5f       	subi	r24, 0xF0	; 240
    3420:	89 83       	std	Y+1, r24	; 0x01
    3422:	03 c0       	rjmp	.+6      	; 0x342a <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	80 5b       	subi	r24, 0xB0	; 176
    3428:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	80 68       	ori	r24, 0x80	; 128
    342e:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_sendCommand>
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	00 d0       	rcall	.+0      	; 0x344c <LCD_displayStringRowColumn+0x6>
    344c:	00 d0       	rcall	.+0      	; 0x344e <LCD_displayStringRowColumn+0x8>
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	89 83       	std	Y+1, r24	; 0x01
    3454:	6a 83       	std	Y+2, r22	; 0x02
    3456:	5c 83       	std	Y+4, r21	; 0x04
    3458:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	6a 81       	ldd	r22, Y+2	; 0x02
    345e:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_moveCursor>
	LCD_displayString(string);
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	9c 81       	ldd	r25, Y+4	; 0x04
    3466:	0e 94 ac 19 	call	0x3358	; 0x3358 <LCD_displayString>
}
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	62 97       	sbiw	r28, 0x12	; 18
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	9a 8b       	std	Y+18, r25	; 0x12
    348e:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    3490:	89 89       	ldd	r24, Y+17	; 0x11
    3492:	9a 89       	ldd	r25, Y+18	; 0x12
    3494:	9e 01       	movw	r18, r28
    3496:	2f 5f       	subi	r18, 0xFF	; 255
    3498:	3f 4f       	sbci	r19, 0xFF	; 255
    349a:	b9 01       	movw	r22, r18
    349c:	4a e0       	ldi	r20, 0x0A	; 10
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	0e 94 30 1c 	call	0x3860	; 0x3860 <itoa>
	LCD_displayString(buffer);
    34a4:	ce 01       	movw	r24, r28
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	0e 94 ac 19 	call	0x3358	; 0x3358 <LCD_displayString>
}
    34ac:	62 96       	adiw	r28, 0x12	; 18
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <KEYPAD_getPressedKey>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

uint8 KEYPAD_getPressedKey()
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <KEYPAD_getPressedKey+0x6>
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	62 e0       	ldi	r22, 0x02	; 2
    34e0:	40 e0       	ldi	r20, 0x00	; 0
    34e2:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	63 e0       	ldi	r22, 0x03	; 3
    34ea:	40 e0       	ldi	r20, 0x00	; 0
    34ec:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	64 e0       	ldi	r22, 0x04	; 4
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	65 e0       	ldi	r22, 0x05	; 5
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	66 e0       	ldi	r22, 0x06	; 6
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	67 e0       	ldi	r22, 0x07	; 7
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    3518:	19 82       	std	Y+1, r1	; 0x01
    351a:	35 c0       	rjmp	.+106    	; 0x3586 <KEYPAD_getPressedKey+0xc8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	69 81       	ldd	r22, Y+1	; 0x01
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	69 81       	ldd	r22, Y+1	; 0x01
    352a:	40 e0       	ldi	r20, 0x00	; 0
    352c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    3530:	1a 82       	std	Y+2, r1	; 0x02
    3532:	1e c0       	rjmp	.+60     	; 0x3570 <KEYPAD_getPressedKey+0xb2>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	98 2f       	mov	r25, r24
    3538:	9c 5f       	subi	r25, 0xFC	; 252
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	69 2f       	mov	r22, r25
    353e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_readPin>
    3542:	88 23       	and	r24, r24
    3544:	91 f4       	brne	.+36     	; 0x356a <KEYPAD_getPressedKey+0xac>
				{
					#if (STANDARD_KEYPAD == FALSE)
						#if (KEYPAD_NUM_COLS == 3)
							return KEYPAD_4x3_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
						#elif (KEYPAD_NUM_COLS == 4)
							return KEYPAD_4x4_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	88 2f       	mov	r24, r24
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	98 2f       	mov	r25, r24
    3556:	8a 81       	ldd	r24, Y+2	; 0x02
    3558:	89 0f       	add	r24, r25
    355a:	8f 5f       	subi	r24, 0xFF	; 255
    355c:	0e 94 c7 1a 	call	0x358e	; 0x358e <KEYPAD_4x4_adjustKeyNumber>
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
		}
	}
}
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	8a 83       	std	Y+2, r24	; 0x02
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	84 30       	cpi	r24, 0x04	; 4
    3574:	f8 f2       	brcs	.-66     	; 0x3534 <KEYPAD_getPressedKey+0x76>
						return ((row*KEYPAD_NUM_COLS)+col+1);
					#endif /* ---> STANDARD_KEYPAD */
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	69 81       	ldd	r22, Y+1	; 0x01
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	84 30       	cpi	r24, 0x04	; 4
    358a:	40 f2       	brcs	.-112    	; 0x351c <KEYPAD_getPressedKey+0x5e>
    358c:	c5 cf       	rjmp	.-118    	; 0x3518 <KEYPAD_getPressedKey+0x5a>

0000358e <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    358e:	df 93       	push	r29
    3590:	cf 93       	push	r28
    3592:	00 d0       	rcall	.+0      	; 0x3594 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3594:	00 d0       	rcall	.+0      	; 0x3596 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    359c:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	3c 83       	std	Y+4, r19	; 0x04
    35a6:	2b 83       	std	Y+3, r18	; 0x03
    35a8:	8b 81       	ldd	r24, Y+3	; 0x03
    35aa:	9c 81       	ldd	r25, Y+4	; 0x04
    35ac:	88 30       	cpi	r24, 0x08	; 8
    35ae:	91 05       	cpc	r25, r1
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    35b2:	70 c0       	rjmp	.+224    	; 0x3694 <KEYPAD_4x4_adjustKeyNumber+0x106>
    35b4:	2b 81       	ldd	r18, Y+3	; 0x03
    35b6:	3c 81       	ldd	r19, Y+4	; 0x04
    35b8:	29 30       	cpi	r18, 0x09	; 9
    35ba:	31 05       	cpc	r19, r1
    35bc:	5c f5       	brge	.+86     	; 0x3614 <KEYPAD_4x4_adjustKeyNumber+0x86>
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	84 30       	cpi	r24, 0x04	; 4
    35c4:	91 05       	cpc	r25, r1
    35c6:	09 f4       	brne	.+2      	; 0x35ca <KEYPAD_4x4_adjustKeyNumber+0x3c>
    35c8:	59 c0       	rjmp	.+178    	; 0x367c <KEYPAD_4x4_adjustKeyNumber+0xee>
    35ca:	2b 81       	ldd	r18, Y+3	; 0x03
    35cc:	3c 81       	ldd	r19, Y+4	; 0x04
    35ce:	25 30       	cpi	r18, 0x05	; 5
    35d0:	31 05       	cpc	r19, r1
    35d2:	9c f4       	brge	.+38     	; 0x35fa <KEYPAD_4x4_adjustKeyNumber+0x6c>
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	82 30       	cpi	r24, 0x02	; 2
    35da:	91 05       	cpc	r25, r1
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    35de:	48 c0       	rjmp	.+144    	; 0x3670 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    35e0:	2b 81       	ldd	r18, Y+3	; 0x03
    35e2:	3c 81       	ldd	r19, Y+4	; 0x04
    35e4:	23 30       	cpi	r18, 0x03	; 3
    35e6:	31 05       	cpc	r19, r1
    35e8:	0c f0       	brlt	.+2      	; 0x35ec <KEYPAD_4x4_adjustKeyNumber+0x5e>
    35ea:	45 c0       	rjmp	.+138    	; 0x3676 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    35ec:	8b 81       	ldd	r24, Y+3	; 0x03
    35ee:	9c 81       	ldd	r25, Y+4	; 0x04
    35f0:	81 30       	cpi	r24, 0x01	; 1
    35f2:	91 05       	cpc	r25, r1
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    35f6:	39 c0       	rjmp	.+114    	; 0x366a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    35f8:	67 c0       	rjmp	.+206    	; 0x36c8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    35fa:	2b 81       	ldd	r18, Y+3	; 0x03
    35fc:	3c 81       	ldd	r19, Y+4	; 0x04
    35fe:	26 30       	cpi	r18, 0x06	; 6
    3600:	31 05       	cpc	r19, r1
    3602:	09 f4       	brne	.+2      	; 0x3606 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3604:	41 c0       	rjmp	.+130    	; 0x3688 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	9c 81       	ldd	r25, Y+4	; 0x04
    360a:	87 30       	cpi	r24, 0x07	; 7
    360c:	91 05       	cpc	r25, r1
    360e:	0c f0       	brlt	.+2      	; 0x3612 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3610:	3e c0       	rjmp	.+124    	; 0x368e <KEYPAD_4x4_adjustKeyNumber+0x100>
    3612:	37 c0       	rjmp	.+110    	; 0x3682 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3614:	2b 81       	ldd	r18, Y+3	; 0x03
    3616:	3c 81       	ldd	r19, Y+4	; 0x04
    3618:	2c 30       	cpi	r18, 0x0C	; 12
    361a:	31 05       	cpc	r19, r1
    361c:	09 f4       	brne	.+2      	; 0x3620 <KEYPAD_4x4_adjustKeyNumber+0x92>
    361e:	46 c0       	rjmp	.+140    	; 0x36ac <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	9c 81       	ldd	r25, Y+4	; 0x04
    3624:	8d 30       	cpi	r24, 0x0D	; 13
    3626:	91 05       	cpc	r25, r1
    3628:	5c f4       	brge	.+22     	; 0x3640 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    362a:	2b 81       	ldd	r18, Y+3	; 0x03
    362c:	3c 81       	ldd	r19, Y+4	; 0x04
    362e:	2a 30       	cpi	r18, 0x0A	; 10
    3630:	31 05       	cpc	r19, r1
    3632:	b1 f1       	breq	.+108    	; 0x36a0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	9c 81       	ldd	r25, Y+4	; 0x04
    3638:	8b 30       	cpi	r24, 0x0B	; 11
    363a:	91 05       	cpc	r25, r1
    363c:	a4 f5       	brge	.+104    	; 0x36a6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    363e:	2d c0       	rjmp	.+90     	; 0x369a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3640:	2b 81       	ldd	r18, Y+3	; 0x03
    3642:	3c 81       	ldd	r19, Y+4	; 0x04
    3644:	2e 30       	cpi	r18, 0x0E	; 14
    3646:	31 05       	cpc	r19, r1
    3648:	b9 f1       	breq	.+110    	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	8e 30       	cpi	r24, 0x0E	; 14
    3650:	91 05       	cpc	r25, r1
    3652:	7c f1       	brlt	.+94     	; 0x36b2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3654:	2b 81       	ldd	r18, Y+3	; 0x03
    3656:	3c 81       	ldd	r19, Y+4	; 0x04
    3658:	2f 30       	cpi	r18, 0x0F	; 15
    365a:	31 05       	cpc	r19, r1
    365c:	79 f1       	breq	.+94     	; 0x36bc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	9c 81       	ldd	r25, Y+4	; 0x04
    3662:	80 31       	cpi	r24, 0x10	; 16
    3664:	91 05       	cpc	r25, r1
    3666:	69 f1       	breq	.+90     	; 0x36c2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    3668:	2f c0       	rjmp	.+94     	; 0x36c8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    366a:	87 e0       	ldi	r24, 0x07	; 7
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	2e c0       	rjmp	.+92     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    3670:	88 e0       	ldi	r24, 0x08	; 8
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	2b c0       	rjmp	.+86     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    3676:	89 e0       	ldi	r24, 0x09	; 9
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	28 c0       	rjmp	.+80     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';
    367c:	85 e2       	ldi	r24, 0x25	; 37
    367e:	89 83       	std	Y+1, r24	; 0x01
    3680:	25 c0       	rjmp	.+74     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    3682:	84 e0       	ldi	r24, 0x04	; 4
    3684:	89 83       	std	Y+1, r24	; 0x01
    3686:	22 c0       	rjmp	.+68     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    3688:	85 e0       	ldi	r24, 0x05	; 5
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	1f c0       	rjmp	.+62     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    368e:	86 e0       	ldi	r24, 0x06	; 6
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	1c c0       	rjmp	.+56     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';
    3694:	8a e2       	ldi	r24, 0x2A	; 42
    3696:	89 83       	std	Y+1, r24	; 0x01
    3698:	19 c0       	rjmp	.+50     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	89 83       	std	Y+1, r24	; 0x01
    369e:	16 c0       	rjmp	.+44     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    36a0:	82 e0       	ldi	r24, 0x02	; 2
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	13 c0       	rjmp	.+38     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	10 c0       	rjmp	.+32     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    36ac:	8d e2       	ldi	r24, 0x2D	; 45
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	0d c0       	rjmp	.+26     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;
    36b2:	8d e0       	ldi	r24, 0x0D	; 13
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	0a c0       	rjmp	.+20     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    36b8:	19 82       	std	Y+1, r1	; 0x01
    36ba:	08 c0       	rjmp	.+16     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';
    36bc:	8d e3       	ldi	r24, 0x3D	; 61
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	05 c0       	rjmp	.+10     	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';
    36c2:	8b e2       	ldi	r24, 0x2B	; 43
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <BUZZER_init>:

#include "buzzer.h"
#include "../../MCAL/GPIO/gpio.h"

void BUZZER_init(void)
{
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	0e 94 9d 09 	call	0x133a	; 0x133a <GPIO_setupPinDirection>
}
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <BUZZER_on>:

void BUZZER_on(void)
{
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
}
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <BUZZER_off>:

void BUZZER_off(void)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_writePin>
}
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <appStart>:

#include "app.h"


void appStart(void)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62

}
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <main>:
*******************************************************************************/

#include "APP/app.h"

int main(void)
{
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
	appStart();
    373a:	0e 94 92 1b 	call	0x3724	; 0x3724 <appStart>
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	90 e0       	ldi	r25, 0x00	; 0
}
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	08 95       	ret

00003748 <__mulsi3>:
    3748:	62 9f       	mul	r22, r18
    374a:	d0 01       	movw	r26, r0
    374c:	73 9f       	mul	r23, r19
    374e:	f0 01       	movw	r30, r0
    3750:	82 9f       	mul	r24, r18
    3752:	e0 0d       	add	r30, r0
    3754:	f1 1d       	adc	r31, r1
    3756:	64 9f       	mul	r22, r20
    3758:	e0 0d       	add	r30, r0
    375a:	f1 1d       	adc	r31, r1
    375c:	92 9f       	mul	r25, r18
    375e:	f0 0d       	add	r31, r0
    3760:	83 9f       	mul	r24, r19
    3762:	f0 0d       	add	r31, r0
    3764:	74 9f       	mul	r23, r20
    3766:	f0 0d       	add	r31, r0
    3768:	65 9f       	mul	r22, r21
    376a:	f0 0d       	add	r31, r0
    376c:	99 27       	eor	r25, r25
    376e:	72 9f       	mul	r23, r18
    3770:	b0 0d       	add	r27, r0
    3772:	e1 1d       	adc	r30, r1
    3774:	f9 1f       	adc	r31, r25
    3776:	63 9f       	mul	r22, r19
    3778:	b0 0d       	add	r27, r0
    377a:	e1 1d       	adc	r30, r1
    377c:	f9 1f       	adc	r31, r25
    377e:	bd 01       	movw	r22, r26
    3780:	cf 01       	movw	r24, r30
    3782:	11 24       	eor	r1, r1
    3784:	08 95       	ret

00003786 <__udivmodhi4>:
    3786:	aa 1b       	sub	r26, r26
    3788:	bb 1b       	sub	r27, r27
    378a:	51 e1       	ldi	r21, 0x11	; 17
    378c:	07 c0       	rjmp	.+14     	; 0x379c <__udivmodhi4_ep>

0000378e <__udivmodhi4_loop>:
    378e:	aa 1f       	adc	r26, r26
    3790:	bb 1f       	adc	r27, r27
    3792:	a6 17       	cp	r26, r22
    3794:	b7 07       	cpc	r27, r23
    3796:	10 f0       	brcs	.+4      	; 0x379c <__udivmodhi4_ep>
    3798:	a6 1b       	sub	r26, r22
    379a:	b7 0b       	sbc	r27, r23

0000379c <__udivmodhi4_ep>:
    379c:	88 1f       	adc	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	5a 95       	dec	r21
    37a2:	a9 f7       	brne	.-22     	; 0x378e <__udivmodhi4_loop>
    37a4:	80 95       	com	r24
    37a6:	90 95       	com	r25
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	08 95       	ret

000037ae <__udivmodsi4>:
    37ae:	a1 e2       	ldi	r26, 0x21	; 33
    37b0:	1a 2e       	mov	r1, r26
    37b2:	aa 1b       	sub	r26, r26
    37b4:	bb 1b       	sub	r27, r27
    37b6:	fd 01       	movw	r30, r26
    37b8:	0d c0       	rjmp	.+26     	; 0x37d4 <__udivmodsi4_ep>

000037ba <__udivmodsi4_loop>:
    37ba:	aa 1f       	adc	r26, r26
    37bc:	bb 1f       	adc	r27, r27
    37be:	ee 1f       	adc	r30, r30
    37c0:	ff 1f       	adc	r31, r31
    37c2:	a2 17       	cp	r26, r18
    37c4:	b3 07       	cpc	r27, r19
    37c6:	e4 07       	cpc	r30, r20
    37c8:	f5 07       	cpc	r31, r21
    37ca:	20 f0       	brcs	.+8      	; 0x37d4 <__udivmodsi4_ep>
    37cc:	a2 1b       	sub	r26, r18
    37ce:	b3 0b       	sbc	r27, r19
    37d0:	e4 0b       	sbc	r30, r20
    37d2:	f5 0b       	sbc	r31, r21

000037d4 <__udivmodsi4_ep>:
    37d4:	66 1f       	adc	r22, r22
    37d6:	77 1f       	adc	r23, r23
    37d8:	88 1f       	adc	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	1a 94       	dec	r1
    37de:	69 f7       	brne	.-38     	; 0x37ba <__udivmodsi4_loop>
    37e0:	60 95       	com	r22
    37e2:	70 95       	com	r23
    37e4:	80 95       	com	r24
    37e6:	90 95       	com	r25
    37e8:	9b 01       	movw	r18, r22
    37ea:	ac 01       	movw	r20, r24
    37ec:	bd 01       	movw	r22, r26
    37ee:	cf 01       	movw	r24, r30
    37f0:	08 95       	ret

000037f2 <__prologue_saves__>:
    37f2:	2f 92       	push	r2
    37f4:	3f 92       	push	r3
    37f6:	4f 92       	push	r4
    37f8:	5f 92       	push	r5
    37fa:	6f 92       	push	r6
    37fc:	7f 92       	push	r7
    37fe:	8f 92       	push	r8
    3800:	9f 92       	push	r9
    3802:	af 92       	push	r10
    3804:	bf 92       	push	r11
    3806:	cf 92       	push	r12
    3808:	df 92       	push	r13
    380a:	ef 92       	push	r14
    380c:	ff 92       	push	r15
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	ca 1b       	sub	r28, r26
    381c:	db 0b       	sbc	r29, r27
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	09 94       	ijmp

0000382a <__epilogue_restores__>:
    382a:	2a 88       	ldd	r2, Y+18	; 0x12
    382c:	39 88       	ldd	r3, Y+17	; 0x11
    382e:	48 88       	ldd	r4, Y+16	; 0x10
    3830:	5f 84       	ldd	r5, Y+15	; 0x0f
    3832:	6e 84       	ldd	r6, Y+14	; 0x0e
    3834:	7d 84       	ldd	r7, Y+13	; 0x0d
    3836:	8c 84       	ldd	r8, Y+12	; 0x0c
    3838:	9b 84       	ldd	r9, Y+11	; 0x0b
    383a:	aa 84       	ldd	r10, Y+10	; 0x0a
    383c:	b9 84       	ldd	r11, Y+9	; 0x09
    383e:	c8 84       	ldd	r12, Y+8	; 0x08
    3840:	df 80       	ldd	r13, Y+7	; 0x07
    3842:	ee 80       	ldd	r14, Y+6	; 0x06
    3844:	fd 80       	ldd	r15, Y+5	; 0x05
    3846:	0c 81       	ldd	r16, Y+4	; 0x04
    3848:	1b 81       	ldd	r17, Y+3	; 0x03
    384a:	aa 81       	ldd	r26, Y+2	; 0x02
    384c:	b9 81       	ldd	r27, Y+1	; 0x01
    384e:	ce 0f       	add	r28, r30
    3850:	d1 1d       	adc	r29, r1
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	ed 01       	movw	r28, r26
    385e:	08 95       	ret

00003860 <itoa>:
    3860:	fb 01       	movw	r30, r22
    3862:	9f 01       	movw	r18, r30
    3864:	e8 94       	clt
    3866:	42 30       	cpi	r20, 0x02	; 2
    3868:	c4 f0       	brlt	.+48     	; 0x389a <itoa+0x3a>
    386a:	45 32       	cpi	r20, 0x25	; 37
    386c:	b4 f4       	brge	.+44     	; 0x389a <itoa+0x3a>
    386e:	4a 30       	cpi	r20, 0x0A	; 10
    3870:	29 f4       	brne	.+10     	; 0x387c <itoa+0x1c>
    3872:	97 fb       	bst	r25, 7
    3874:	1e f4       	brtc	.+6      	; 0x387c <itoa+0x1c>
    3876:	90 95       	com	r25
    3878:	81 95       	neg	r24
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	64 2f       	mov	r22, r20
    387e:	77 27       	eor	r23, r23
    3880:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__udivmodhi4>
    3884:	80 5d       	subi	r24, 0xD0	; 208
    3886:	8a 33       	cpi	r24, 0x3A	; 58
    3888:	0c f0       	brlt	.+2      	; 0x388c <itoa+0x2c>
    388a:	89 5d       	subi	r24, 0xD9	; 217
    388c:	81 93       	st	Z+, r24
    388e:	cb 01       	movw	r24, r22
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	a1 f7       	brne	.-24     	; 0x387c <itoa+0x1c>
    3894:	16 f4       	brtc	.+4      	; 0x389a <itoa+0x3a>
    3896:	5d e2       	ldi	r21, 0x2D	; 45
    3898:	51 93       	st	Z+, r21
    389a:	10 82       	st	Z, r1
    389c:	c9 01       	movw	r24, r18
    389e:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <strrev>

000038a2 <strrev>:
    38a2:	dc 01       	movw	r26, r24
    38a4:	fc 01       	movw	r30, r24
    38a6:	67 2f       	mov	r22, r23
    38a8:	71 91       	ld	r23, Z+
    38aa:	77 23       	and	r23, r23
    38ac:	e1 f7       	brne	.-8      	; 0x38a6 <strrev+0x4>
    38ae:	32 97       	sbiw	r30, 0x02	; 2
    38b0:	04 c0       	rjmp	.+8      	; 0x38ba <strrev+0x18>
    38b2:	7c 91       	ld	r23, X
    38b4:	6d 93       	st	X+, r22
    38b6:	70 83       	st	Z, r23
    38b8:	62 91       	ld	r22, -Z
    38ba:	ae 17       	cp	r26, r30
    38bc:	bf 07       	cpc	r27, r31
    38be:	c8 f3       	brcs	.-14     	; 0x38b2 <strrev+0x10>
    38c0:	08 95       	ret

000038c2 <_exit>:
    38c2:	f8 94       	cli

000038c4 <__stop_program>:
    38c4:	ff cf       	rjmp	.-2      	; 0x38c4 <__stop_program>
