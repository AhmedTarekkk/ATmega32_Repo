
repo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003040  000030d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  000031dc  2**0
                  ALLOC
  3 .stab         00002dcc  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001577  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000076bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000078b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e4       	ldi	r30, 0x40	; 64
      78:	f0 e3       	ldi	r31, 0x30	; 48
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <main>
      8a:	0c 94 1e 18 	jmp	0x303c	; 0x303c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PWM_Timer0_Start>:
#include "pwm0.h"
#include "avr/io.h"
#include "../GPIO/gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer with
	 * Non inverting fast PWM Mode
	 * Clock frequency = F_CPU/8
	 */
	TCNT0 = 0;
     e3a:	e2 e5       	ldi	r30, 0x52	; 82
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
	OCR0 = (uint8)((uint16)(duty_cycle*255)/100) ; /* casting the value so we don't get overflow */
     e40:	ec e5       	ldi	r30, 0x5C	; 92
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	48 2f       	mov	r20, r24
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	ca 01       	movw	r24, r20
     e4c:	9c 01       	movw	r18, r24
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	c9 01       	movw	r24, r18
     e54:	96 95       	lsr	r25
     e56:	98 2f       	mov	r25, r24
     e58:	88 27       	eor	r24, r24
     e5a:	97 95       	ror	r25
     e5c:	87 95       	ror	r24
     e5e:	82 1b       	sub	r24, r18
     e60:	93 0b       	sbc	r25, r19
     e62:	84 0f       	add	r24, r20
     e64:	95 1f       	adc	r25, r21
     e66:	24 e6       	ldi	r18, 0x64	; 100
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	b9 01       	movw	r22, r18
     e6c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__udivmodhi4>
     e70:	cb 01       	movw	r24, r22
     e72:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); /* PWM pin as O/P */
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	63 e0       	ldi	r22, 0x03	; 3
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
     e7e:	e3 e5       	ldi	r30, 0x53	; 83
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8a e6       	ldi	r24, 0x6A	; 106
     e84:	80 83       	st	Z, r24

}
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <__vector_6>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     eb8:	80 91 68 01 	lds	r24, 0x0168
     ebc:	90 91 69 01 	lds	r25, 0x0169
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	29 f0       	breq	.+10     	; 0xece <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     ec4:	e0 91 68 01 	lds	r30, 0x0168
     ec8:	f0 91 69 01 	lds	r31, 0x0169
     ecc:	09 95       	icall
	}
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <ICU_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <ICU_init+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	66 e0       	ldi	r22, 0x06	; 6
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     f0c:	ef e4       	ldi	r30, 0x4F	; 79
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     f14:	ae e4       	ldi	r26, 0x4E	; 78
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ee e4       	ldi	r30, 0x4E	; 78
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	98 2f       	mov	r25, r24
     f20:	98 7f       	andi	r25, 0xF8	; 248
     f22:	e9 81       	ldd	r30, Y+1	; 0x01
     f24:	fa 81       	ldd	r31, Y+2	; 0x02
     f26:	80 81       	ld	r24, Z
     f28:	89 2b       	or	r24, r25
     f2a:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     f2c:	ae e4       	ldi	r26, 0x4E	; 78
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ee e4       	ldi	r30, 0x4E	; 78
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	28 2f       	mov	r18, r24
     f38:	2f 7b       	andi	r18, 0xBF	; 191
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	81 81       	ldd	r24, Z+1	; 0x01
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	00 24       	eor	r0, r0
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	07 94       	ror	r0
     f4c:	96 95       	lsr	r25
     f4e:	87 95       	ror	r24
     f50:	07 94       	ror	r0
     f52:	98 2f       	mov	r25, r24
     f54:	80 2d       	mov	r24, r0
     f56:	82 2b       	or	r24, r18
     f58:	8c 93       	st	X, r24
	TCNT1 = 0;
     f5a:	ec e4       	ldi	r30, 0x4C	; 76
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	11 82       	std	Z+1, r1	; 0x01
     f60:	10 82       	st	Z, r1
	ICR1 = 0;
     f62:	e6 e4       	ldi	r30, 0x46	; 70
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	11 82       	std	Z+1, r1	; 0x01
     f68:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TICIE1);
     f6a:	a9 e5       	ldi	r26, 0x59	; 89
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e9 e5       	ldi	r30, 0x59	; 89
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 62       	ori	r24, 0x20	; 32
     f76:	8c 93       	st	X, r24
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <ICU_setCallBack+0x6>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	90 93 69 01 	sts	0x0169, r25
     f98:	80 93 68 01 	sts	0x0168, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((a_edgeType)<<6);
     fb2:	ae e4       	ldi	r26, 0x4E	; 78
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ee e4       	ldi	r30, 0x4E	; 78
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	2f 7b       	andi	r18, 0xBF	; 191
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	00 24       	eor	r0, r0
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	07 94       	ror	r0
     fce:	96 95       	lsr	r25
     fd0:	87 95       	ror	r24
     fd2:	07 94       	ror	r0
     fd4:	98 2f       	mov	r25, r24
     fd6:	80 2d       	mov	r24, r0
     fd8:	82 2b       	or	r24, r18
     fda:	8c 93       	st	X, r24
}
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     fec:	e6 e4       	ldi	r30, 0x46	; 70
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    1002:	e2 e5       	ldi	r30, 0x52	; 82
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	10 82       	st	Z, r1
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <ICU_DeInit>:

void ICU_DeInit(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	10 82       	st	Z, r1
	TCCR1B = 0;
    101c:	ee e4       	ldi	r30, 0x4E	; 78
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	10 82       	st	Z, r1
	TCNT1 = 0;
    1022:	ec e4       	ldi	r30, 0x4C	; 76
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	11 82       	std	Z+1, r1	; 0x01
    1028:	10 82       	st	Z, r1
	ICR1 = 0;
    102a:	e6 e4       	ldi	r30, 0x46	; 70
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	11 82       	std	Z+1, r1	; 0x01
    1030:	10 82       	st	Z, r1

	CLEAR_BIT(TIMSK,TICIE1);
    1032:	a9 e5       	ldi	r26, 0x59	; 89
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e9 e5       	ldi	r30, 0x59	; 89
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7d       	andi	r24, 0xDF	; 223
    103e:	8c 93       	st	X, r24
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <GPIO_setupPinDirection+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <GPIO_setupPinDirection+0x8>
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6a 83       	std	Y+2, r22	; 0x02
    1058:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	88 30       	cpi	r24, 0x08	; 8
    105e:	08 f0       	brcs	.+2      	; 0x1062 <GPIO_setupPinDirection+0x1c>
    1060:	d5 c0       	rjmp	.+426    	; 0x120c <GPIO_setupPinDirection+0x1c6>
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	08 f0       	brcs	.+2      	; 0x106a <GPIO_setupPinDirection+0x24>
    1068:	d1 c0       	rjmp	.+418    	; 0x120c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3d 83       	std	Y+5, r19	; 0x05
    1072:	2c 83       	std	Y+4, r18	; 0x04
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <GPIO_setupPinDirection+0x3a>
    107e:	43 c0       	rjmp	.+134    	; 0x1106 <GPIO_setupPinDirection+0xc0>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	2c f4       	brge	.+10     	; 0x1094 <GPIO_setupPinDirection+0x4e>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	71 f0       	breq	.+28     	; 0x10ae <GPIO_setupPinDirection+0x68>
    1092:	bc c0       	rjmp	.+376    	; 0x120c <GPIO_setupPinDirection+0x1c6>
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	3d 81       	ldd	r19, Y+5	; 0x05
    1098:	22 30       	cpi	r18, 0x02	; 2
    109a:	31 05       	cpc	r19, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <GPIO_setupPinDirection+0x5a>
    109e:	5f c0       	rjmp	.+190    	; 0x115e <GPIO_setupPinDirection+0x118>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <GPIO_setupPinDirection+0x66>
    10aa:	85 c0       	rjmp	.+266    	; 0x11b6 <GPIO_setupPinDirection+0x170>
    10ac:	af c0       	rjmp	.+350    	; 0x120c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10b4:	aa e3       	ldi	r26, 0x3A	; 58
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0x8c>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0x88>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	98 c0       	rjmp	.+304    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10dc:	aa e3       	ldi	r26, 0x3A	; 58
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ea e3       	ldi	r30, 0x3A	; 58
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_setupPinDirection+0xb4>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_setupPinDirection+0xb0>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	83 c0       	rjmp	.+262    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0xe4>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0xe0>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6c c0       	rjmp	.+216    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1134:	a7 e3       	ldi	r26, 0x37	; 55
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0x10c>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0x108>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	57 c0       	rjmp	.+174    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1164:	a4 e3       	ldi	r26, 0x34	; 52
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e4 e3       	ldi	r30, 0x34	; 52
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x13c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x138>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	40 c0       	rjmp	.+128    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    118c:	a4 e3       	ldi	r26, 0x34	; 52
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e4 e3       	ldi	r30, 0x34	; 52
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0x164>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0x160>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	2b c0       	rjmp	.+86     	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11bc:	a1 e3       	ldi	r26, 0x31	; 49
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e1 e3       	ldi	r30, 0x31	; 49
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0x194>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0x190>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11e4:	a1 e3       	ldi	r26, 0x31	; 49
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e1 e3       	ldi	r30, 0x31	; 49
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0x1bc>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0x1b8>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_writePin+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_writePin+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	6a 83       	std	Y+2, r22	; 0x02
    122e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <GPIO_writePin+0x1c>
    1236:	d5 c0       	rjmp	.+426    	; 0x13e2 <GPIO_writePin+0x1c6>
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	08 f0       	brcs	.+2      	; 0x1240 <GPIO_writePin+0x24>
    123e:	d1 c0       	rjmp	.+418    	; 0x13e2 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <GPIO_writePin+0x3a>
    1254:	43 c0       	rjmp	.+134    	; 0x12dc <GPIO_writePin+0xc0>
    1256:	2c 81       	ldd	r18, Y+4	; 0x04
    1258:	3d 81       	ldd	r19, Y+5	; 0x05
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <GPIO_writePin+0x4e>
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	71 f0       	breq	.+28     	; 0x1284 <GPIO_writePin+0x68>
    1268:	bc c0       	rjmp	.+376    	; 0x13e2 <GPIO_writePin+0x1c6>
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <GPIO_writePin+0x5a>
    1274:	5f c0       	rjmp	.+190    	; 0x1334 <GPIO_writePin+0x118>
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <GPIO_writePin+0x66>
    1280:	85 c0       	rjmp	.+266    	; 0x138c <GPIO_writePin+0x170>
    1282:	af c0       	rjmp	.+350    	; 0x13e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	a1 f4       	brne	.+40     	; 0x12b2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    128a:	ab e3       	ldi	r26, 0x3B	; 59
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0x8c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0x88>
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	98 c0       	rjmp	.+304    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12b2:	ab e3       	ldi	r26, 0x3B	; 59
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_writePin+0xb4>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_writePin+0xb0>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	83 c0       	rjmp	.+262    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0xe4>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0xe0>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	6c c0       	rjmp	.+216    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    130a:	a8 e3       	ldi	r26, 0x38	; 56
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_writePin+0x10c>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_writePin+0x108>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	57 c0       	rjmp	.+174    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	a1 f4       	brne	.+40     	; 0x1362 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0x13c>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0x138>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	40 c0       	rjmp	.+128    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1362:	a5 e3       	ldi	r26, 0x35	; 53
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_writePin+0x164>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_writePin+0x160>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	2b c0       	rjmp	.+86     	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	a1 f4       	brne	.+40     	; 0x13ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_writePin+0x194>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_writePin+0x190>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13ba:	a2 e3       	ldi	r26, 0x32	; 50
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_writePin+0x1bc>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_writePin+0x1b8>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <GPIO_readPin+0x6>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <GPIO_readPin+0x8>
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    1404:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	08 f0       	brcs	.+2      	; 0x140e <GPIO_readPin+0x1c>
    140c:	84 c0       	rjmp	.+264    	; 0x1516 <GPIO_readPin+0x124>
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	08 f0       	brcs	.+2      	; 0x1416 <GPIO_readPin+0x24>
    1414:	80 c0       	rjmp	.+256    	; 0x1516 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3d 83       	std	Y+5, r19	; 0x05
    141e:	2c 83       	std	Y+4, r18	; 0x04
    1420:	4c 81       	ldd	r20, Y+4	; 0x04
    1422:	5d 81       	ldd	r21, Y+5	; 0x05
    1424:	41 30       	cpi	r20, 0x01	; 1
    1426:	51 05       	cpc	r21, r1
    1428:	79 f1       	breq	.+94     	; 0x1488 <GPIO_readPin+0x96>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	34 f4       	brge	.+12     	; 0x1440 <GPIO_readPin+0x4e>
    1434:	2c 81       	ldd	r18, Y+4	; 0x04
    1436:	3d 81       	ldd	r19, Y+5	; 0x05
    1438:	21 15       	cp	r18, r1
    143a:	31 05       	cpc	r19, r1
    143c:	69 f0       	breq	.+26     	; 0x1458 <GPIO_readPin+0x66>
    143e:	6b c0       	rjmp	.+214    	; 0x1516 <GPIO_readPin+0x124>
    1440:	4c 81       	ldd	r20, Y+4	; 0x04
    1442:	5d 81       	ldd	r21, Y+5	; 0x05
    1444:	42 30       	cpi	r20, 0x02	; 2
    1446:	51 05       	cpc	r21, r1
    1448:	b9 f1       	breq	.+110    	; 0x14b8 <GPIO_readPin+0xc6>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <GPIO_readPin+0x64>
    1454:	49 c0       	rjmp	.+146    	; 0x14e8 <GPIO_readPin+0xf6>
    1456:	5f c0       	rjmp	.+190    	; 0x1516 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    1458:	e9 e3       	ldi	r30, 0x39	; 57
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_readPin+0x7e>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_readPin+0x7a>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	90 70       	andi	r25, 0x00	; 0
    147a:	88 23       	and	r24, r24
    147c:	19 f0       	breq	.+6      	; 0x1484 <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	49 c0       	rjmp	.+146    	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1484:	19 82       	std	Y+1, r1	; 0x01
    1486:	47 c0       	rjmp	.+142    	; 0x1516 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    1488:	e6 e3       	ldi	r30, 0x36	; 54
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_readPin+0xae>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_readPin+0xaa>
    14a4:	ca 01       	movw	r24, r20
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	90 70       	andi	r25, 0x00	; 0
    14aa:	88 23       	and	r24, r24
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	31 c0       	rjmp	.+98     	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	2f c0       	rjmp	.+94     	; 0x1516 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    14b8:	e3 e3       	ldi	r30, 0x33	; 51
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GPIO_readPin+0xde>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GPIO_readPin+0xda>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	88 23       	and	r24, r24
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	19 c0       	rjmp	.+50     	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    14e4:	19 82       	std	Y+1, r1	; 0x01
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    14e8:	e0 e3       	ldi	r30, 0x30	; 48
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <GPIO_readPin+0x10e>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <GPIO_readPin+0x10a>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	90 70       	andi	r25, 0x00	; 0
    150a:	88 23       	and	r24, r24
    150c:	19 f0       	breq	.+6      	; 0x1514 <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1514:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_setupPortDirection+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_setupPortDirection+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	90 f5       	brcc	.+100    	; 0x15a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3c 83       	std	Y+4, r19	; 0x04
    1546:	2b 83       	std	Y+3, r18	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	91 05       	cpc	r25, r1
    1550:	d1 f0       	breq	.+52     	; 0x1586 <GPIO_setupPortDirection+0x5e>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <GPIO_setupPortDirection+0x3e>
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 f0       	breq	.+24     	; 0x157c <GPIO_setupPortDirection+0x54>
    1564:	1e c0       	rjmp	.+60     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <GPIO_setupPortDirection+0x68>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	81 f0       	breq	.+32     	; 0x159a <GPIO_setupPortDirection+0x72>
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    157c:	ea e3       	ldi	r30, 0x3A	; 58
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	80 83       	st	Z, r24
    1584:	0e c0       	rjmp	.+28     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1586:	e7 e3       	ldi	r30, 0x37	; 55
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 83       	st	Z, r24
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    159a:	e1 e3       	ldi	r30, 0x31	; 49
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_writePort+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <GPIO_writePort+0x8>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	90 f5       	brcc	.+100    	; 0x162a <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3c 83       	std	Y+4, r19	; 0x04
    15ce:	2b 83       	std	Y+3, r18	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	d1 f0       	breq	.+52     	; 0x160e <GPIO_writePort+0x5e>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <GPIO_writePort+0x3e>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <GPIO_writePort+0x54>
    15ec:	1e c0       	rjmp	.+60     	; 0x162a <GPIO_writePort+0x7a>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <GPIO_writePort+0x68>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	81 f0       	breq	.+32     	; 0x1622 <GPIO_writePort+0x72>
    1602:	13 c0       	rjmp	.+38     	; 0x162a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    1604:	eb e3       	ldi	r30, 0x3B	; 59
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 83       	st	Z, r24
    160c:	0e c0       	rjmp	.+28     	; 0x162a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 83       	st	Z, r24
    1616:	09 c0       	rjmp	.+18     	; 0x162a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    1618:	e5 e3       	ldi	r30, 0x35	; 53
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
    1620:	04 c0       	rjmp	.+8      	; 0x162a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    1622:	e2 e3       	ldi	r30, 0x32	; 50
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
			break;
		}
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_readPort+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_readPort+0x8>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    1646:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	90 f5       	brcc	.+100    	; 0x16b2 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3c 83       	std	Y+4, r19	; 0x04
    1656:	2b 83       	std	Y+3, r18	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	91 05       	cpc	r25, r1
    1660:	d1 f0       	breq	.+52     	; 0x1696 <GPIO_readPort+0x5e>
    1662:	2b 81       	ldd	r18, Y+3	; 0x03
    1664:	3c 81       	ldd	r19, Y+4	; 0x04
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <GPIO_readPort+0x3e>
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	61 f0       	breq	.+24     	; 0x168c <GPIO_readPort+0x54>
    1674:	1e c0       	rjmp	.+60     	; 0x16b2 <GPIO_readPort+0x7a>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	81 f0       	breq	.+32     	; 0x16a0 <GPIO_readPort+0x68>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	81 f0       	breq	.+32     	; 0x16aa <GPIO_readPort+0x72>
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    168c:	e9 e3       	ldi	r30, 0x39	; 57
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	0e c0       	rjmp	.+28     	; 0x16b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    1696:	e6 e3       	ldi	r30, 0x36	; 54
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    16a0:	e3 e3       	ldi	r30, 0x33	; 51
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    16aa:	e0 e3       	ldi	r30, 0x30	; 48
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <ADC_init>:
#include "adc.h"
#include "avr/io.h"
#include "../../LIB/common_macros.h"

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <ADC_init+0x6>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
	/* Initially set the registers with zeros so we can insert their values as we want */
	ADMUX = 0;
    16d0:	e7 e2       	ldi	r30, 0x27	; 39
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1
	ADCSRA = 0;
    16d6:	e6 e2       	ldi	r30, 0x26	; 38
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1

	 /* left shift the value by 6 so we can insert it in the right place at REFS0 and REFS1 */
	ADMUX |= ( (Config_Ptr->ref_volt) << 6 ) ;
    16dc:	a7 e2       	ldi	r26, 0x27	; 39
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e2       	ldi	r30, 0x27	; 39
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	28 2f       	mov	r18, r24
    16e8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ea:	fa 81       	ldd	r31, Y+2	; 0x02
    16ec:	80 81       	ld	r24, Z
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	00 24       	eor	r0, r0
    16f4:	96 95       	lsr	r25
    16f6:	87 95       	ror	r24
    16f8:	07 94       	ror	r0
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	07 94       	ror	r0
    1700:	98 2f       	mov	r25, r24
    1702:	80 2d       	mov	r24, r0
    1704:	82 2b       	or	r24, r18
    1706:	8c 93       	st	X, r24

	/* same as the last step but this time ADPSX bits are the first 3 bits so no need to shift */
	ADCSRA |= (Config_Ptr->prescaler) ;
    1708:	a6 e2       	ldi	r26, 0x26	; 38
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e6 e2       	ldi	r30, 0x26	; 38
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	90 81       	ld	r25, Z
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	81 81       	ldd	r24, Z+1	; 0x01
    1718:	89 2b       	or	r24, r25
    171a:	8c 93       	st	X, r24

	/* Enable the ADC */
	SET_BIT(ADCSRA,ADEN);
    171c:	a6 e2       	ldi	r26, 0x26	; 38
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e6 e2       	ldi	r30, 0x26	; 38
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 68       	ori	r24, 0x80	; 128
    1728:	8c 93       	st	X, r24
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
	/* clear the previous channel and insert the new one in only 3 bits ( 8 channels ) " */
	ADMUX = (ADMUX & ADC_CHANNEL_CLEAR_MASK) | (channel & 0x07) ;
    1740:	a7 e2       	ldi	r26, 0x27	; 39
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e7 e2       	ldi	r30, 0x27	; 39
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	98 2f       	mov	r25, r24
    174c:	90 7e       	andi	r25, 0xE0	; 224
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	87 70       	andi	r24, 0x07	; 7
    1752:	89 2b       	or	r24, r25
    1754:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA,ADSC);
    1756:	a6 e2       	ldi	r26, 0x26	; 38
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e2       	ldi	r30, 0x26	; 38
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 64       	ori	r24, 0x40	; 64
    1762:	8c 93       	st	X, r24

	/* wait the ADC o/p with polling method */
	while(BIT_IS_CLEAR(ADCSRA,ADIF)){}
    1764:	e6 e2       	ldi	r30, 0x26	; 38
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	80 71       	andi	r24, 0x10	; 16
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	b9 f3       	breq	.-18     	; 0x1764 <ADC_readChannel+0x30>

	/* clearing ADC flag */
	SET_BIT(ADCSRA,ADIF);
    1776:	a6 e2       	ldi	r26, 0x26	; 38
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e6 e2       	ldi	r30, 0x26	; 38
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	8c 93       	st	X, r24

	return ADC;
    1784:	e4 e2       	ldi	r30, 0x24	; 36
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <DcMotor_Init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/PWM0/pwm0.h"


void DcMotor_Init(void)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, PIN_OUTPUT); /* Input1 */
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, PIN_OUTPUT); /* Inupt2 */
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <DcMotor_Rotate+0x6>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	6a 83       	std	Y+2, r22	; 0x02
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, GET_BIT(state,0));
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	98 2f       	mov	r25, r24
    17f0:	91 70       	andi	r25, 0x01	; 1
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	49 2f       	mov	r20, r25
    17f8:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, GET_BIT(state,1));
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	86 95       	lsr	r24
    1800:	98 2f       	mov	r25, r24
    1802:	91 70       	andi	r25, 0x01	; 1
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	49 2f       	mov	r20, r25
    180a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>

	PWM_Timer0_Start(speed);
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <LM35_getTemperature>:
#include "lm35_sensor.h"
#include "../../MCAL/ADC/adc.h"


uint8 LM35_getTemperature(void)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <LM35_getTemperature+0x6>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	uint8 lm35_value;

	uint16 adc_value;

	adc_value = ADC_readChannel(LM35_CHANNEL_ID);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <ADC_readChannel>
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01

	lm35_value = (uint8)(((uint32)adc_value*ADC_REF_VOLT_VALUE*LM35_MAX_TEMPERATURE)/(ADC_MAXIMUM_VALUE*LM35_MAX_VOLT_VALUE));
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	cc 01       	movw	r24, r24
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	2e ee       	ldi	r18, 0xEE	; 238
    1840:	32 e0       	ldi	r19, 0x02	; 2
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__mulsi3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 ed       	ldi	r19, 0xD0	; 208
    1866:	4f eb       	ldi	r20, 0xBF	; 191
    1868:	54 e4       	ldi	r21, 0x44	; 68
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8b 83       	std	Y+3, r24	; 0x03

	return lm35_value;
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	2e 97       	sbiw	r28, 0x0e	; 14
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 ea       	ldi	r26, 0xA0	; 160
    18bc:	b1 e4       	ldi	r27, 0x41	; 65
    18be:	8b 87       	std	Y+11, r24	; 0x0b
    18c0:	9c 87       	std	Y+12, r25	; 0x0c
    18c2:	ad 87       	std	Y+13, r26	; 0x0d
    18c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a e7       	ldi	r20, 0x7A	; 122
    18d4:	55 e4       	ldi	r21, 0x45	; 69
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8f 83       	std	Y+7, r24	; 0x07
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	a9 87       	std	Y+9, r26	; 0x09
    18e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <LCD_init+0x7a>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <LCD_init+0xda>
    194a:	80 e9       	ldi	r24, 0x90	; 144
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_init+0xc8>
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <LCD_init+0xbc>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_init+0x104>
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	63 e0       	ldi	r22, 0x03	; 3
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	64 e0       	ldi	r22, 0x04	; 4
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	65 e0       	ldi	r22, 0x05	; 5
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	66 e0       	ldi	r22, 0x06	; 6
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    19c2:	83 e3       	ldi	r24, 0x33	; 51
    19c4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    19c8:	82 e3       	ldi	r24, 0x32	; 50
    19ca:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    19ce:	88 e2       	ldi	r24, 0x28	; 40
    19d0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19d4:	8c e0       	ldi	r24, 0x0C	; 12
    19d6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>
}
    19e0:	2e 96       	adiw	r28, 0x0e	; 14
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	c3 56       	subi	r28, 0x63	; 99
    1a00:	d0 40       	sbci	r29, 0x00	; 0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ed 59       	subi	r30, 0x9D	; 157
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e1 5a       	subi	r30, 0xA1	; 161
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a0 e8       	ldi	r26, 0x80	; 128
    1a2a:	bf e3       	ldi	r27, 0x3F	; 63
    1a2c:	80 83       	st	Z, r24
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	a2 83       	std	Z+2, r26	; 0x02
    1a32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	8e 01       	movw	r16, r28
    1a36:	05 5a       	subi	r16, 0xA5	; 165
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 5a       	subi	r30, 0xA1	; 161
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a e7       	ldi	r20, 0x7A	; 122
    1a4e:	55 e4       	ldi	r21, 0x45	; 69
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	f8 01       	movw	r30, r16
    1a5a:	80 83       	st	Z, r24
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	a2 83       	std	Z+2, r26	; 0x02
    1a60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a62:	fe 01       	movw	r30, r28
    1a64:	e5 5a       	subi	r30, 0xA5	; 165
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	44 f4       	brge	.+16     	; 0x1a90 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1a80:	fe 01       	movw	r30, r28
    1a82:	e7 5a       	subi	r30, 0xA7	; 167
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
    1a8e:	64 c0       	rjmp	.+200    	; 0x1b58 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a90:	fe 01       	movw	r30, r28
    1a92:	e5 5a       	subi	r30, 0xA5	; 165
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	0c f0       	brlt	.+2      	; 0x1ab0 <LCD_sendCommand+0xbe>
    1aae:	43 c0       	rjmp	.+134    	; 0x1b36 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e1 5a       	subi	r30, 0xA1	; 161
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	93 81       	ldd	r25, Z+3	; 0x03
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8e 01       	movw	r16, r28
    1ad0:	07 5a       	subi	r16, 0xA7	; 167
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	1f c0       	rjmp	.+62     	; 0x1b26 <LCD_sendCommand+0x134>
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e9 5a       	subi	r30, 0xA9	; 169
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	80 e9       	ldi	r24, 0x90	; 144
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	80 83       	st	Z, r24
    1af6:	fe 01       	movw	r30, r28
    1af8:	e9 5a       	subi	r30, 0xA9	; 169
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_sendCommand+0x10e>
    1b04:	fe 01       	movw	r30, r28
    1b06:	e9 5a       	subi	r30, 0xA9	; 169
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	de 01       	movw	r26, r28
    1b10:	a7 5a       	subi	r26, 0xA7	; 167
    1b12:	bf 4f       	sbci	r27, 0xFF	; 255
    1b14:	fe 01       	movw	r30, r28
    1b16:	e7 5a       	subi	r30, 0xA7	; 167
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 81       	ld	r24, Z
    1b1c:	91 81       	ldd	r25, Z+1	; 0x01
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 93       	st	X, r25
    1b24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	fe 01       	movw	r30, r28
    1b28:	e7 5a       	subi	r30, 0xA7	; 167
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	d1 f6       	brne	.-76     	; 0x1ae8 <LCD_sendCommand+0xf6>
    1b34:	27 c0       	rjmp	.+78     	; 0x1b84 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	8e 01       	movw	r16, r28
    1b38:	07 5a       	subi	r16, 0xA7	; 167
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e5 5a       	subi	r30, 0xA5	; 165
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	f8 01       	movw	r30, r16
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
    1b58:	de 01       	movw	r26, r28
    1b5a:	ab 5a       	subi	r26, 0xAB	; 171
    1b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e7 5a       	subi	r30, 0xA7	; 167
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	8d 93       	st	X+, r24
    1b6a:	9c 93       	st	X, r25
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	eb 5a       	subi	r30, 0xAB	; 171
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_sendCommand+0x184>
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	eb 5a       	subi	r30, 0xAB	; 171
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	62 e0       	ldi	r22, 0x02	; 2
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ef 5a       	subi	r30, 0xAF	; 175
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e8       	ldi	r26, 0x80	; 128
    1b9a:	bf e3       	ldi	r27, 0x3F	; 63
    1b9c:	80 83       	st	Z, r24
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	a2 83       	std	Z+2, r26	; 0x02
    1ba2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	8e 01       	movw	r16, r28
    1ba6:	03 5b       	subi	r16, 0xB3	; 179
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	fe 01       	movw	r30, r28
    1bac:	ef 5a       	subi	r30, 0xAF	; 175
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a e7       	ldi	r20, 0x7A	; 122
    1bbe:	55 e4       	ldi	r21, 0x45	; 69
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	f8 01       	movw	r30, r16
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e3 5b       	subi	r30, 0xB3	; 179
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	44 f4       	brge	.+16     	; 0x1c00 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e5 5b       	subi	r30, 0xB5	; 181
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	64 c0       	rjmp	.+200    	; 0x1cc8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c00:	fe 01       	movw	r30, r28
    1c02:	e3 5b       	subi	r30, 0xB3	; 179
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	0c f0       	brlt	.+2      	; 0x1c20 <LCD_sendCommand+0x22e>
    1c1e:	43 c0       	rjmp	.+134    	; 0x1ca6 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	fe 01       	movw	r30, r28
    1c22:	ef 5a       	subi	r30, 0xAF	; 175
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8e 01       	movw	r16, r28
    1c40:	05 5b       	subi	r16, 0xB5	; 181
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	f8 01       	movw	r30, r16
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	1f c0       	rjmp	.+62     	; 0x1c96 <LCD_sendCommand+0x2a4>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e7 5b       	subi	r30, 0xB7	; 183
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 e9       	ldi	r24, 0x90	; 144
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 5b       	subi	r30, 0xB7	; 183
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_sendCommand+0x27e>
    1c74:	fe 01       	movw	r30, r28
    1c76:	e7 5b       	subi	r30, 0xB7	; 183
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	de 01       	movw	r26, r28
    1c80:	a5 5b       	subi	r26, 0xB5	; 181
    1c82:	bf 4f       	sbci	r27, 0xFF	; 255
    1c84:	fe 01       	movw	r30, r28
    1c86:	e5 5b       	subi	r30, 0xB5	; 181
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	91 81       	ldd	r25, Z+1	; 0x01
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	9c 93       	st	X, r25
    1c94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	fe 01       	movw	r30, r28
    1c98:	e5 5b       	subi	r30, 0xB5	; 181
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	d1 f6       	brne	.-76     	; 0x1c58 <LCD_sendCommand+0x266>
    1ca4:	27 c0       	rjmp	.+78     	; 0x1cf4 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	8e 01       	movw	r16, r28
    1ca8:	05 5b       	subi	r16, 0xB5	; 181
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	e3 5b       	subi	r30, 0xB3	; 179
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	de 01       	movw	r26, r28
    1cca:	a9 5b       	subi	r26, 0xB9	; 185
    1ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 5b       	subi	r30, 0xB5	; 181
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	8d 93       	st	X+, r24
    1cda:	9c 93       	st	X, r25
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e9 5b       	subi	r30, 0xB9	; 185
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <LCD_sendCommand+0x2f4>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 5b       	subi	r30, 0xB9	; 185
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,4));
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ed 59       	subi	r30, 0x9D	; 157
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	82 95       	swap	r24
    1cfe:	8f 70       	andi	r24, 0x0F	; 15
    1d00:	98 2f       	mov	r25, r24
    1d02:	91 70       	andi	r25, 0x01	; 1
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	63 e0       	ldi	r22, 0x03	; 3
    1d08:	49 2f       	mov	r20, r25
    1d0a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,5));
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ed 59       	subi	r30, 0x9D	; 157
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	82 95       	swap	r24
    1d18:	86 95       	lsr	r24
    1d1a:	87 70       	andi	r24, 0x07	; 7
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	91 70       	andi	r25, 0x01	; 1
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	49 2f       	mov	r20, r25
    1d26:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,6));
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ed 59       	subi	r30, 0x9D	; 157
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	82 95       	swap	r24
    1d34:	86 95       	lsr	r24
    1d36:	86 95       	lsr	r24
    1d38:	83 70       	andi	r24, 0x03	; 3
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	91 70       	andi	r25, 0x01	; 1
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	65 e0       	ldi	r22, 0x05	; 5
    1d42:	49 2f       	mov	r20, r25
    1d44:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,7));
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ed 59       	subi	r30, 0x9D	; 157
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	98 2f       	mov	r25, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	99 27       	eor	r25, r25
    1d56:	99 1f       	adc	r25, r25
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	66 e0       	ldi	r22, 0x06	; 6
    1d5c:	49 2f       	mov	r20, r25
    1d5e:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    1d62:	fe 01       	movw	r30, r28
    1d64:	ed 5b       	subi	r30, 0xBD	; 189
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	8e 01       	movw	r16, r28
    1d7a:	01 5c       	subi	r16, 0xC1	; 193
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ed 5b       	subi	r30, 0xBD	; 189
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a e7       	ldi	r20, 0x7A	; 122
    1d92:	55 e4       	ldi	r21, 0x45	; 69
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 83       	st	Z, r24
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	a2 83       	std	Z+2, r26	; 0x02
    1da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da6:	fe 01       	movw	r30, r28
    1da8:	ff 96       	adiw	r30, 0x3f	; 63
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_sendCommand+0x3da>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9e af       	std	Y+62, r25	; 0x3e
    1dc8:	8d af       	std	Y+61, r24	; 0x3d
    1dca:	46 c0       	rjmp	.+140    	; 0x1e58 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ff 96       	adiw	r30, 0x3f	; 63
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	64 f5       	brge	.+88     	; 0x1e40 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	fe 01       	movw	r30, r28
    1dea:	ed 5b       	subi	r30, 0xBD	; 189
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e af       	std	Y+62, r25	; 0x3e
    1e14:	8d af       	std	Y+61, r24	; 0x3d
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <LCD_sendCommand+0x444>
    1e18:	80 e9       	ldi	r24, 0x90	; 144
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	9c af       	std	Y+60, r25	; 0x3c
    1e1e:	8b af       	std	Y+59, r24	; 0x3b
    1e20:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e22:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_sendCommand+0x432>
    1e28:	9c af       	std	Y+60, r25	; 0x3c
    1e2a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9e af       	std	Y+62, r25	; 0x3e
    1e34:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <LCD_sendCommand+0x426>
    1e3e:	16 c0       	rjmp	.+44     	; 0x1e6c <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	fe 01       	movw	r30, r28
    1e42:	ff 96       	adiw	r30, 0x3f	; 63
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e af       	std	Y+62, r25	; 0x3e
    1e56:	8d af       	std	Y+61, r24	; 0x3d
    1e58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5c:	9a af       	std	Y+58, r25	; 0x3a
    1e5e:	89 af       	std	Y+57, r24	; 0x39
    1e60:	89 ad       	ldd	r24, Y+57	; 0x39
    1e62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_sendCommand+0x472>
    1e68:	9a af       	std	Y+58, r25	; 0x3a
    1e6a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e8       	ldi	r26, 0x80	; 128
    1e7c:	bf e3       	ldi	r27, 0x3F	; 63
    1e7e:	8d ab       	std	Y+53, r24	; 0x35
    1e80:	9e ab       	std	Y+54, r25	; 0x36
    1e82:	af ab       	std	Y+55, r26	; 0x37
    1e84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	6d a9       	ldd	r22, Y+53	; 0x35
    1e88:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a e7       	ldi	r20, 0x7A	; 122
    1e94:	55 e4       	ldi	r21, 0x45	; 69
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	89 ab       	std	Y+49, r24	; 0x31
    1ea0:	9a ab       	std	Y+50, r25	; 0x32
    1ea2:	ab ab       	std	Y+51, r26	; 0x33
    1ea4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1eac:	9c a9       	ldd	r25, Y+52	; 0x34
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	98 ab       	std	Y+48, r25	; 0x30
    1ec4:	8f a7       	std	Y+47, r24	; 0x2f
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    1ec8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ecc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ece:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	4c f5       	brge	.+82     	; 0x1f32 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <LCD_sendCommand+0x536>
    1f0a:	80 e9       	ldi	r24, 0x90	; 144
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	9e a7       	std	Y+46, r25	; 0x2e
    1f10:	8d a7       	std	Y+45, r24	; 0x2d
    1f12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_sendCommand+0x524>
    1f1a:	9e a7       	std	Y+46, r25	; 0x2e
    1f1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f20:	98 a9       	ldd	r25, Y+48	; 0x30
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	98 ab       	std	Y+48, r25	; 0x30
    1f26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <LCD_sendCommand+0x518>
    1f30:	14 c0       	rjmp	.+40     	; 0x1f5a <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	69 a9       	ldd	r22, Y+49	; 0x31
    1f34:	7a a9       	ldd	r23, Y+50	; 0x32
    1f36:	8b a9       	ldd	r24, Y+51	; 0x33
    1f38:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	98 ab       	std	Y+48, r25	; 0x30
    1f44:	8f a7       	std	Y+47, r24	; 0x2f
    1f46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f48:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4a:	9c a7       	std	Y+44, r25	; 0x2c
    1f4c:	8b a7       	std	Y+43, r24	; 0x2b
    1f4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_sendCommand+0x560>
    1f56:	9c a7       	std	Y+44, r25	; 0x2c
    1f58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	62 e0       	ldi	r22, 0x02	; 2
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e8       	ldi	r26, 0x80	; 128
    1f6a:	bf e3       	ldi	r27, 0x3F	; 63
    1f6c:	8f a3       	std	Y+39, r24	; 0x27
    1f6e:	98 a7       	std	Y+40, r25	; 0x28
    1f70:	a9 a7       	std	Y+41, r26	; 0x29
    1f72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	6f a1       	ldd	r22, Y+39	; 0x27
    1f76:	78 a5       	ldd	r23, Y+40	; 0x28
    1f78:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a e7       	ldi	r20, 0x7A	; 122
    1f82:	55 e4       	ldi	r21, 0x45	; 69
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8b a3       	std	Y+35, r24	; 0x23
    1f8e:	9c a3       	std	Y+36, r25	; 0x24
    1f90:	ad a3       	std	Y+37, r26	; 0x25
    1f92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f94:	6b a1       	ldd	r22, Y+35	; 0x23
    1f96:	7c a1       	ldd	r23, Y+36	; 0x24
    1f98:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9a a3       	std	Y+34, r25	; 0x22
    1fb2:	89 a3       	std	Y+33, r24	; 0x21
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    1fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fba:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_sendCommand+0x624>
    1ff8:	80 e9       	ldi	r24, 0x90	; 144
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	98 a3       	std	Y+32, r25	; 0x20
    1ffe:	8f 8f       	std	Y+31, r24	; 0x1f
    2000:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2002:	98 a1       	ldd	r25, Y+32	; 0x20
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_sendCommand+0x612>
    2008:	98 a3       	std	Y+32, r25	; 0x20
    200a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	89 a1       	ldd	r24, Y+33	; 0x21
    200e:	9a a1       	ldd	r25, Y+34	; 0x22
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9a a3       	std	Y+34, r25	; 0x22
    2014:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	89 a1       	ldd	r24, Y+33	; 0x21
    2018:	9a a1       	ldd	r25, Y+34	; 0x22
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_sendCommand+0x606>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
    2034:	89 a1       	ldd	r24, Y+33	; 0x21
    2036:	9a a1       	ldd	r25, Y+34	; 0x22
    2038:	9e 8f       	std	Y+30, r25	; 0x1e
    203a:	8d 8f       	std	Y+29, r24	; 0x1d
    203c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    203e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_sendCommand+0x64e>
    2044:	9e 8f       	std	Y+30, r25	; 0x1e
    2046:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,0));
    2048:	fe 01       	movw	r30, r28
    204a:	ed 59       	subi	r30, 0x9D	; 157
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	98 2f       	mov	r25, r24
    2052:	91 70       	andi	r25, 0x01	; 1
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	63 e0       	ldi	r22, 0x03	; 3
    2058:	49 2f       	mov	r20, r25
    205a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
    205e:	fe 01       	movw	r30, r28
    2060:	ed 59       	subi	r30, 0x9D	; 157
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	86 95       	lsr	r24
    2068:	98 2f       	mov	r25, r24
    206a:	91 70       	andi	r25, 0x01	; 1
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	64 e0       	ldi	r22, 0x04	; 4
    2070:	49 2f       	mov	r20, r25
    2072:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
    2076:	fe 01       	movw	r30, r28
    2078:	ed 59       	subi	r30, 0x9D	; 157
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	86 95       	lsr	r24
    2080:	86 95       	lsr	r24
    2082:	98 2f       	mov	r25, r24
    2084:	91 70       	andi	r25, 0x01	; 1
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	65 e0       	ldi	r22, 0x05	; 5
    208a:	49 2f       	mov	r20, r25
    208c:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));
    2090:	fe 01       	movw	r30, r28
    2092:	ed 59       	subi	r30, 0x9D	; 157
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	86 95       	lsr	r24
    209a:	86 95       	lsr	r24
    209c:	86 95       	lsr	r24
    209e:	98 2f       	mov	r25, r24
    20a0:	91 70       	andi	r25, 0x01	; 1
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	66 e0       	ldi	r22, 0x06	; 6
    20a6:	49 2f       	mov	r20, r25
    20a8:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	89 8f       	std	Y+25, r24	; 0x19
    20b6:	9a 8f       	std	Y+26, r25	; 0x1a
    20b8:	ab 8f       	std	Y+27, r26	; 0x1b
    20ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	69 8d       	ldd	r22, Y+25	; 0x19
    20be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	55 e4       	ldi	r21, 0x45	; 69
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8d 8b       	std	Y+21, r24	; 0x15
    20d6:	9e 8b       	std	Y+22, r25	; 0x16
    20d8:	af 8b       	std	Y+23, r26	; 0x17
    20da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_sendCommand+0x70c>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    20fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2100:	7e 89       	ldd	r23, Y+22	; 0x16
    2102:	8f 89       	ldd	r24, Y+23	; 0x17
    2104:	98 8d       	ldd	r25, Y+24	; 0x18
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	69 8d       	ldd	r22, Y+25	; 0x19
    2118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_sendCommand+0x76c>
    2140:	80 e9       	ldi	r24, 0x90	; 144
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9a 8b       	std	Y+18, r25	; 0x12
    2146:	89 8b       	std	Y+17, r24	; 0x11
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	9a 89       	ldd	r25, Y+18	; 0x12
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_sendCommand+0x75a>
    2150:	9a 8b       	std	Y+18, r25	; 0x12
    2152:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9c 8b       	std	Y+20, r25	; 0x14
    215c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8b 89       	ldd	r24, Y+19	; 0x13
    2160:	9c 89       	ldd	r25, Y+20	; 0x14
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_sendCommand+0x74e>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	8b 89       	ldd	r24, Y+19	; 0x13
    217e:	9c 89       	ldd	r25, Y+20	; 0x14
    2180:	98 8b       	std	Y+16, r25	; 0x10
    2182:	8f 87       	std	Y+15, r24	; 0x0f
    2184:	8f 85       	ldd	r24, Y+15	; 0x0f
    2186:	98 89       	ldd	r25, Y+16	; 0x10
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_sendCommand+0x796>
    218c:	98 8b       	std	Y+16, r25	; 0x10
    218e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	62 e0       	ldi	r22, 0x02	; 2
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e8       	ldi	r26, 0x80	; 128
    21a0:	bf e3       	ldi	r27, 0x3F	; 63
    21a2:	8b 87       	std	Y+11, r24	; 0x0b
    21a4:	9c 87       	std	Y+12, r25	; 0x0c
    21a6:	ad 87       	std	Y+13, r26	; 0x0d
    21a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a e7       	ldi	r20, 0x7A	; 122
    21b8:	55 e4       	ldi	r21, 0x45	; 69
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8f 83       	std	Y+7, r24	; 0x07
    21c4:	98 87       	std	Y+8, r25	; 0x08
    21c6:	a9 87       	std	Y+9, r26	; 0x09
    21c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <LCD_sendCommand+0x7fa>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	0f c0       	rjmp	.+30     	; 0x224c <LCD_sendCommand+0x85a>
    222e:	80 e9       	ldi	r24, 0x90	; 144
    2230:	91 e0       	ldi	r25, 0x01	; 1
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_sendCommand+0x848>
    223e:	9c 83       	std	Y+4, r25	; 0x04
    2240:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <LCD_sendCommand+0x83c>
    2254:	14 c0       	rjmp	.+40     	; 0x227e <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_sendCommand+0x884>
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    227e:	cd 59       	subi	r28, 0x9D	; 157
    2280:	df 4f       	sbci	r29, 0xFF	; 255
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	c3 56       	subi	r28, 0x63	; 99
    22a4:	d0 40       	sbci	r29, 0x00	; 0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	fe 01       	movw	r30, r28
    22b2:	ed 59       	subi	r30, 0x9D	; 157
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    22c2:	fe 01       	movw	r30, r28
    22c4:	e1 5a       	subi	r30, 0xA1	; 161
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e8       	ldi	r26, 0x80	; 128
    22ce:	bf e3       	ldi	r27, 0x3F	; 63
    22d0:	80 83       	st	Z, r24
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	a2 83       	std	Z+2, r26	; 0x02
    22d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	8e 01       	movw	r16, r28
    22da:	05 5a       	subi	r16, 0xA5	; 165
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	fe 01       	movw	r30, r28
    22e0:	e1 5a       	subi	r30, 0xA1	; 161
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	60 81       	ld	r22, Z
    22e6:	71 81       	ldd	r23, Z+1	; 0x01
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	4a e7       	ldi	r20, 0x7A	; 122
    22f2:	55 e4       	ldi	r21, 0x45	; 69
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	f8 01       	movw	r30, r16
    22fe:	80 83       	st	Z, r24
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	a2 83       	std	Z+2, r26	; 0x02
    2304:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2306:	fe 01       	movw	r30, r28
    2308:	e5 5a       	subi	r30, 0xA5	; 165
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	44 f4       	brge	.+16     	; 0x2334 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2324:	fe 01       	movw	r30, r28
    2326:	e7 5a       	subi	r30, 0xA7	; 167
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	64 c0       	rjmp	.+200    	; 0x23fc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2334:	fe 01       	movw	r30, r28
    2336:	e5 5a       	subi	r30, 0xA5	; 165
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	93 81       	ldd	r25, Z+3	; 0x03
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	0c f0       	brlt	.+2      	; 0x2354 <LCD_displayCharacter+0xbe>
    2352:	43 c0       	rjmp	.+134    	; 0x23da <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2354:	fe 01       	movw	r30, r28
    2356:	e1 5a       	subi	r30, 0xA1	; 161
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8e 01       	movw	r16, r28
    2374:	07 5a       	subi	r16, 0xA7	; 167
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	f8 01       	movw	r30, r16
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    238a:	1f c0       	rjmp	.+62     	; 0x23ca <LCD_displayCharacter+0x134>
    238c:	fe 01       	movw	r30, r28
    238e:	e9 5a       	subi	r30, 0xA9	; 169
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 e9       	ldi	r24, 0x90	; 144
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
    239a:	fe 01       	movw	r30, r28
    239c:	e9 5a       	subi	r30, 0xA9	; 169
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_displayCharacter+0x10e>
    23a8:	fe 01       	movw	r30, r28
    23aa:	e9 5a       	subi	r30, 0xA9	; 169
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	de 01       	movw	r26, r28
    23b4:	a7 5a       	subi	r26, 0xA7	; 167
    23b6:	bf 4f       	sbci	r27, 0xFF	; 255
    23b8:	fe 01       	movw	r30, r28
    23ba:	e7 5a       	subi	r30, 0xA7	; 167
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	11 96       	adiw	r26, 0x01	; 1
    23c6:	9c 93       	st	X, r25
    23c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 5a       	subi	r30, 0xA7	; 167
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	d1 f6       	brne	.-76     	; 0x238c <LCD_displayCharacter+0xf6>
    23d8:	27 c0       	rjmp	.+78     	; 0x2428 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	8e 01       	movw	r16, r28
    23dc:	07 5a       	subi	r16, 0xA7	; 167
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	fe 01       	movw	r30, r28
    23e2:	e5 5a       	subi	r30, 0xA5	; 165
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	f8 01       	movw	r30, r16
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
    23fc:	de 01       	movw	r26, r28
    23fe:	ab 5a       	subi	r26, 0xAB	; 171
    2400:	bf 4f       	sbci	r27, 0xFF	; 255
    2402:	fe 01       	movw	r30, r28
    2404:	e7 5a       	subi	r30, 0xA7	; 167
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	8d 93       	st	X+, r24
    240e:	9c 93       	st	X, r25
    2410:	fe 01       	movw	r30, r28
    2412:	eb 5a       	subi	r30, 0xAB	; 171
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_displayCharacter+0x184>
    241e:	fe 01       	movw	r30, r28
    2420:	eb 5a       	subi	r30, 0xAB	; 171
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	62 e0       	ldi	r22, 0x02	; 2
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2432:	fe 01       	movw	r30, r28
    2434:	ef 5a       	subi	r30, 0xAF	; 175
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e8       	ldi	r26, 0x80	; 128
    243e:	bf e3       	ldi	r27, 0x3F	; 63
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	8e 01       	movw	r16, r28
    244a:	03 5b       	subi	r16, 0xB3	; 179
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	ef 5a       	subi	r30, 0xAF	; 175
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a e7       	ldi	r20, 0x7A	; 122
    2462:	55 e4       	ldi	r21, 0x45	; 69
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	80 83       	st	Z, r24
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	a2 83       	std	Z+2, r26	; 0x02
    2474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2476:	fe 01       	movw	r30, r28
    2478:	e3 5b       	subi	r30, 0xB3	; 179
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	44 f4       	brge	.+16     	; 0x24a4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2494:	fe 01       	movw	r30, r28
    2496:	e5 5b       	subi	r30, 0xB5	; 181
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	64 c0       	rjmp	.+200    	; 0x256c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24a4:	fe 01       	movw	r30, r28
    24a6:	e3 5b       	subi	r30, 0xB3	; 179
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <LCD_displayCharacter+0x22e>
    24c2:	43 c0       	rjmp	.+134    	; 0x254a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5a       	subi	r30, 0xAF	; 175
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8e 01       	movw	r16, r28
    24e4:	05 5b       	subi	r16, 0xB5	; 181
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	f8 01       	movw	r30, r16
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	1f c0       	rjmp	.+62     	; 0x253a <LCD_displayCharacter+0x2a4>
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 5b       	subi	r30, 0xB7	; 183
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 e9       	ldi	r24, 0x90	; 144
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	fe 01       	movw	r30, r28
    250c:	e7 5b       	subi	r30, 0xB7	; 183
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_displayCharacter+0x27e>
    2518:	fe 01       	movw	r30, r28
    251a:	e7 5b       	subi	r30, 0xB7	; 183
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	de 01       	movw	r26, r28
    2524:	a5 5b       	subi	r26, 0xB5	; 181
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253a:	fe 01       	movw	r30, r28
    253c:	e5 5b       	subi	r30, 0xB5	; 181
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	d1 f6       	brne	.-76     	; 0x24fc <LCD_displayCharacter+0x266>
    2548:	27 c0       	rjmp	.+78     	; 0x2598 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	8e 01       	movw	r16, r28
    254c:	05 5b       	subi	r16, 0xB5	; 181
    254e:	1f 4f       	sbci	r17, 0xFF	; 255
    2550:	fe 01       	movw	r30, r28
    2552:	e3 5b       	subi	r30, 0xB3	; 179
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	f8 01       	movw	r30, r16
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	de 01       	movw	r26, r28
    256e:	a9 5b       	subi	r26, 0xB9	; 185
    2570:	bf 4f       	sbci	r27, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	e5 5b       	subi	r30, 0xB5	; 181
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	8d 93       	st	X+, r24
    257e:	9c 93       	st	X, r25
    2580:	fe 01       	movw	r30, r28
    2582:	e9 5b       	subi	r30, 0xB9	; 185
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_displayCharacter+0x2f4>
    258e:	fe 01       	movw	r30, r28
    2590:	e9 5b       	subi	r30, 0xB9	; 185
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,4));
    2598:	fe 01       	movw	r30, r28
    259a:	ed 59       	subi	r30, 0x9D	; 157
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	82 95       	swap	r24
    25a2:	8f 70       	andi	r24, 0x0F	; 15
    25a4:	98 2f       	mov	r25, r24
    25a6:	91 70       	andi	r25, 0x01	; 1
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	63 e0       	ldi	r22, 0x03	; 3
    25ac:	49 2f       	mov	r20, r25
    25ae:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,5));
    25b2:	fe 01       	movw	r30, r28
    25b4:	ed 59       	subi	r30, 0x9D	; 157
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	82 95       	swap	r24
    25bc:	86 95       	lsr	r24
    25be:	87 70       	andi	r24, 0x07	; 7
    25c0:	98 2f       	mov	r25, r24
    25c2:	91 70       	andi	r25, 0x01	; 1
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	64 e0       	ldi	r22, 0x04	; 4
    25c8:	49 2f       	mov	r20, r25
    25ca:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,6));
    25ce:	fe 01       	movw	r30, r28
    25d0:	ed 59       	subi	r30, 0x9D	; 157
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	82 95       	swap	r24
    25d8:	86 95       	lsr	r24
    25da:	86 95       	lsr	r24
    25dc:	83 70       	andi	r24, 0x03	; 3
    25de:	98 2f       	mov	r25, r24
    25e0:	91 70       	andi	r25, 0x01	; 1
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	65 e0       	ldi	r22, 0x05	; 5
    25e6:	49 2f       	mov	r20, r25
    25e8:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,7));
    25ec:	fe 01       	movw	r30, r28
    25ee:	ed 59       	subi	r30, 0x9D	; 157
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	98 2f       	mov	r25, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	99 27       	eor	r25, r25
    25fa:	99 1f       	adc	r25, r25
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	66 e0       	ldi	r22, 0x06	; 6
    2600:	49 2f       	mov	r20, r25
    2602:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2606:	fe 01       	movw	r30, r28
    2608:	ed 5b       	subi	r30, 0xBD	; 189
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a0 e8       	ldi	r26, 0x80	; 128
    2612:	bf e3       	ldi	r27, 0x3F	; 63
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	8e 01       	movw	r16, r28
    261e:	01 5c       	subi	r16, 0xC1	; 193
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	ed 5b       	subi	r30, 0xBD	; 189
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	55 e4       	ldi	r21, 0x45	; 69
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264a:	fe 01       	movw	r30, r28
    264c:	ff 96       	adiw	r30, 0x3f	; 63
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9e af       	std	Y+62, r25	; 0x3e
    266c:	8d af       	std	Y+61, r24	; 0x3d
    266e:	46 c0       	rjmp	.+140    	; 0x26fc <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    2670:	fe 01       	movw	r30, r28
    2672:	ff 96       	adiw	r30, 0x3f	; 63
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	64 f5       	brge	.+88     	; 0x26e4 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	fe 01       	movw	r30, r28
    268e:	ed 5b       	subi	r30, 0xBD	; 189
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e af       	std	Y+62, r25	; 0x3e
    26b8:	8d af       	std	Y+61, r24	; 0x3d
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <LCD_displayCharacter+0x444>
    26bc:	80 e9       	ldi	r24, 0x90	; 144
    26be:	91 e0       	ldi	r25, 0x01	; 1
    26c0:	9c af       	std	Y+60, r25	; 0x3c
    26c2:	8b af       	std	Y+59, r24	; 0x3b
    26c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_displayCharacter+0x432>
    26cc:	9c af       	std	Y+60, r25	; 0x3c
    26ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9e af       	std	Y+62, r25	; 0x3e
    26d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	8d ad       	ldd	r24, Y+61	; 0x3d
    26dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <LCD_displayCharacter+0x426>
    26e2:	16 c0       	rjmp	.+44     	; 0x2710 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	fe 01       	movw	r30, r28
    26e6:	ff 96       	adiw	r30, 0x3f	; 63
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e af       	std	Y+62, r25	; 0x3e
    26fa:	8d af       	std	Y+61, r24	; 0x3d
    26fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2700:	9a af       	std	Y+58, r25	; 0x3a
    2702:	89 af       	std	Y+57, r24	; 0x39
    2704:	89 ad       	ldd	r24, Y+57	; 0x39
    2706:	9a ad       	ldd	r25, Y+58	; 0x3a
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_displayCharacter+0x472>
    270c:	9a af       	std	Y+58, r25	; 0x3a
    270e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	62 e0       	ldi	r22, 0x02	; 2
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e8       	ldi	r26, 0x80	; 128
    2720:	bf e3       	ldi	r27, 0x3F	; 63
    2722:	8d ab       	std	Y+53, r24	; 0x35
    2724:	9e ab       	std	Y+54, r25	; 0x36
    2726:	af ab       	std	Y+55, r26	; 0x37
    2728:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	6d a9       	ldd	r22, Y+53	; 0x35
    272c:	7e a9       	ldd	r23, Y+54	; 0x36
    272e:	8f a9       	ldd	r24, Y+55	; 0x37
    2730:	98 ad       	ldd	r25, Y+56	; 0x38
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a e7       	ldi	r20, 0x7A	; 122
    2738:	55 e4       	ldi	r21, 0x45	; 69
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	89 ab       	std	Y+49, r24	; 0x31
    2744:	9a ab       	std	Y+50, r25	; 0x32
    2746:	ab ab       	std	Y+51, r26	; 0x33
    2748:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    274a:	69 a9       	ldd	r22, Y+49	; 0x31
    274c:	7a a9       	ldd	r23, Y+50	; 0x32
    274e:	8b a9       	ldd	r24, Y+51	; 0x33
    2750:	9c a9       	ldd	r25, Y+52	; 0x34
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	98 ab       	std	Y+48, r25	; 0x30
    2768:	8f a7       	std	Y+47, r24	; 0x2f
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    276c:	69 a9       	ldd	r22, Y+49	; 0x31
    276e:	7a a9       	ldd	r23, Y+50	; 0x32
    2770:	8b a9       	ldd	r24, Y+51	; 0x33
    2772:	9c a9       	ldd	r25, Y+52	; 0x34
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	6d a9       	ldd	r22, Y+53	; 0x35
    2786:	7e a9       	ldd	r23, Y+54	; 0x36
    2788:	8f a9       	ldd	r24, Y+55	; 0x37
    278a:	98 ad       	ldd	r25, Y+56	; 0x38
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	98 ab       	std	Y+48, r25	; 0x30
    27aa:	8f a7       	std	Y+47, r24	; 0x2f
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <LCD_displayCharacter+0x536>
    27ae:	80 e9       	ldi	r24, 0x90	; 144
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	9e a7       	std	Y+46, r25	; 0x2e
    27b4:	8d a7       	std	Y+45, r24	; 0x2d
    27b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    27b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <LCD_displayCharacter+0x524>
    27be:	9e a7       	std	Y+46, r25	; 0x2e
    27c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c4:	98 a9       	ldd	r25, Y+48	; 0x30
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	98 ab       	std	Y+48, r25	; 0x30
    27ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ce:	98 a9       	ldd	r25, Y+48	; 0x30
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <LCD_displayCharacter+0x518>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	69 a9       	ldd	r22, Y+49	; 0x31
    27d8:	7a a9       	ldd	r23, Y+50	; 0x32
    27da:	8b a9       	ldd	r24, Y+51	; 0x33
    27dc:	9c a9       	ldd	r25, Y+52	; 0x34
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	98 ab       	std	Y+48, r25	; 0x30
    27e8:	8f a7       	std	Y+47, r24	; 0x2f
    27ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ec:	98 a9       	ldd	r25, Y+48	; 0x30
    27ee:	9c a7       	std	Y+44, r25	; 0x2c
    27f0:	8b a7       	std	Y+43, r24	; 0x2b
    27f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_displayCharacter+0x560>
    27fa:	9c a7       	std	Y+44, r25	; 0x2c
    27fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	62 e0       	ldi	r22, 0x02	; 2
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e8       	ldi	r26, 0x80	; 128
    280e:	bf e3       	ldi	r27, 0x3F	; 63
    2810:	8f a3       	std	Y+39, r24	; 0x27
    2812:	98 a7       	std	Y+40, r25	; 0x28
    2814:	a9 a7       	std	Y+41, r26	; 0x29
    2816:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	6f a1       	ldd	r22, Y+39	; 0x27
    281a:	78 a5       	ldd	r23, Y+40	; 0x28
    281c:	89 a5       	ldd	r24, Y+41	; 0x29
    281e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a e7       	ldi	r20, 0x7A	; 122
    2826:	55 e4       	ldi	r21, 0x45	; 69
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8b a3       	std	Y+35, r24	; 0x23
    2832:	9c a3       	std	Y+36, r25	; 0x24
    2834:	ad a3       	std	Y+37, r26	; 0x25
    2836:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2838:	6b a1       	ldd	r22, Y+35	; 0x23
    283a:	7c a1       	ldd	r23, Y+36	; 0x24
    283c:	8d a1       	ldd	r24, Y+37	; 0x25
    283e:	9e a1       	ldd	r25, Y+38	; 0x26
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	2c f4       	brge	.+10     	; 0x285a <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9a a3       	std	Y+34, r25	; 0x22
    2856:	89 a3       	std	Y+33, r24	; 0x21
    2858:	3f c0       	rjmp	.+126    	; 0x28d8 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    285a:	6b a1       	ldd	r22, Y+35	; 0x23
    285c:	7c a1       	ldd	r23, Y+36	; 0x24
    285e:	8d a1       	ldd	r24, Y+37	; 0x25
    2860:	9e a1       	ldd	r25, Y+38	; 0x26
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	4c f5       	brge	.+82     	; 0x28c4 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	6f a1       	ldd	r22, Y+39	; 0x27
    2874:	78 a5       	ldd	r23, Y+40	; 0x28
    2876:	89 a5       	ldd	r24, Y+41	; 0x29
    2878:	9a a5       	ldd	r25, Y+42	; 0x2a
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <LCD_displayCharacter+0x624>
    289c:	80 e9       	ldi	r24, 0x90	; 144
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	98 a3       	std	Y+32, r25	; 0x20
    28a2:	8f 8f       	std	Y+31, r24	; 0x1f
    28a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a6:	98 a1       	ldd	r25, Y+32	; 0x20
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <LCD_displayCharacter+0x612>
    28ac:	98 a3       	std	Y+32, r25	; 0x20
    28ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	89 a1       	ldd	r24, Y+33	; 0x21
    28b2:	9a a1       	ldd	r25, Y+34	; 0x22
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ba:	89 a1       	ldd	r24, Y+33	; 0x21
    28bc:	9a a1       	ldd	r25, Y+34	; 0x22
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	69 f7       	brne	.-38     	; 0x289c <LCD_displayCharacter+0x606>
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	6b a1       	ldd	r22, Y+35	; 0x23
    28c6:	7c a1       	ldd	r23, Y+36	; 0x24
    28c8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ca:	9e a1       	ldd	r25, Y+38	; 0x26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9a a3       	std	Y+34, r25	; 0x22
    28d6:	89 a3       	std	Y+33, r24	; 0x21
    28d8:	89 a1       	ldd	r24, Y+33	; 0x21
    28da:	9a a1       	ldd	r25, Y+34	; 0x22
    28dc:	9e 8f       	std	Y+30, r25	; 0x1e
    28de:	8d 8f       	std	Y+29, r24	; 0x1d
    28e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_displayCharacter+0x64e>
    28e8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,0));
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 59       	subi	r30, 0x9D	; 157
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	98 2f       	mov	r25, r24
    28f6:	91 70       	andi	r25, 0x01	; 1
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	63 e0       	ldi	r22, 0x03	; 3
    28fc:	49 2f       	mov	r20, r25
    28fe:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
    2902:	fe 01       	movw	r30, r28
    2904:	ed 59       	subi	r30, 0x9D	; 157
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	86 95       	lsr	r24
    290c:	98 2f       	mov	r25, r24
    290e:	91 70       	andi	r25, 0x01	; 1
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	64 e0       	ldi	r22, 0x04	; 4
    2914:	49 2f       	mov	r20, r25
    2916:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
    291a:	fe 01       	movw	r30, r28
    291c:	ed 59       	subi	r30, 0x9D	; 157
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
    2922:	86 95       	lsr	r24
    2924:	86 95       	lsr	r24
    2926:	98 2f       	mov	r25, r24
    2928:	91 70       	andi	r25, 0x01	; 1
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	65 e0       	ldi	r22, 0x05	; 5
    292e:	49 2f       	mov	r20, r25
    2930:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));
    2934:	fe 01       	movw	r30, r28
    2936:	ed 59       	subi	r30, 0x9D	; 157
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	86 95       	lsr	r24
    293e:	86 95       	lsr	r24
    2940:	86 95       	lsr	r24
    2942:	98 2f       	mov	r25, r24
    2944:	91 70       	andi	r25, 0x01	; 1
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	66 e0       	ldi	r22, 0x06	; 6
    294a:	49 2f       	mov	r20, r25
    294c:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e8       	ldi	r26, 0x80	; 128
    2956:	bf e3       	ldi	r27, 0x3F	; 63
    2958:	89 8f       	std	Y+25, r24	; 0x19
    295a:	9a 8f       	std	Y+26, r25	; 0x1a
    295c:	ab 8f       	std	Y+27, r26	; 0x1b
    295e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	69 8d       	ldd	r22, Y+25	; 0x19
    2962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a e7       	ldi	r20, 0x7A	; 122
    296e:	55 e4       	ldi	r21, 0x45	; 69
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8d 8b       	std	Y+21, r24	; 0x15
    297a:	9e 8b       	std	Y+22, r25	; 0x16
    297c:	af 8b       	std	Y+23, r26	; 0x17
    297e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2980:	6d 89       	ldd	r22, Y+21	; 0x15
    2982:	7e 89       	ldd	r23, Y+22	; 0x16
    2984:	8f 89       	ldd	r24, Y+23	; 0x17
    2986:	98 8d       	ldd	r25, Y+24	; 0x18
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    29a2:	6d 89       	ldd	r22, Y+21	; 0x15
    29a4:	7e 89       	ldd	r23, Y+22	; 0x16
    29a6:	8f 89       	ldd	r24, Y+23	; 0x17
    29a8:	98 8d       	ldd	r25, Y+24	; 0x18
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	69 8d       	ldd	r22, Y+25	; 0x19
    29bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9c 8b       	std	Y+20, r25	; 0x14
    29e0:	8b 8b       	std	Y+19, r24	; 0x13
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <LCD_displayCharacter+0x76c>
    29e4:	80 e9       	ldi	r24, 0x90	; 144
    29e6:	91 e0       	ldi	r25, 0x01	; 1
    29e8:	9a 8b       	std	Y+18, r25	; 0x12
    29ea:	89 8b       	std	Y+17, r24	; 0x11
    29ec:	89 89       	ldd	r24, Y+17	; 0x11
    29ee:	9a 89       	ldd	r25, Y+18	; 0x12
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_displayCharacter+0x75a>
    29f4:	9a 8b       	std	Y+18, r25	; 0x12
    29f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8b 89       	ldd	r24, Y+19	; 0x13
    29fa:	9c 89       	ldd	r25, Y+20	; 0x14
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <LCD_displayCharacter+0x74e>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a10:	8f 89       	ldd	r24, Y+23	; 0x17
    2a12:	98 8d       	ldd	r25, Y+24	; 0x18
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	8b 8b       	std	Y+19, r24	; 0x13
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	98 8b       	std	Y+16, r25	; 0x10
    2a26:	8f 87       	std	Y+15, r24	; 0x0f
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	98 89       	ldd	r25, Y+16	; 0x10
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_displayCharacter+0x796>
    2a30:	98 8b       	std	Y+16, r25	; 0x10
    2a32:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e8       	ldi	r26, 0x80	; 128
    2a44:	bf e3       	ldi	r27, 0x3F	; 63
    2a46:	8b 87       	std	Y+11, r24	; 0x0b
    2a48:	9c 87       	std	Y+12, r25	; 0x0c
    2a4a:	ad 87       	std	Y+13, r26	; 0x0d
    2a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4a e7       	ldi	r20, 0x7A	; 122
    2a5c:	55 e4       	ldi	r21, 0x45	; 69
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8f 83       	std	Y+7, r24	; 0x07
    2a68:	98 87       	std	Y+8, r25	; 0x08
    2a6a:	a9 87       	std	Y+9, r26	; 0x09
    2a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2a90:	6f 81       	ldd	r22, Y+7	; 0x07
    2a92:	78 85       	ldd	r23, Y+8	; 0x08
    2a94:	89 85       	ldd	r24, Y+9	; 0x09
    2a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f e7       	ldi	r20, 0x7F	; 127
    2a9e:	57 e4       	ldi	r21, 0x47	; 71
    2aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa4:	18 16       	cp	r1, r24
    2aa6:	4c f5       	brge	.+82     	; 0x2afa <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	51 e4       	ldi	r21, 0x41	; 65
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <LCD_displayCharacter+0x85a>
    2ad2:	80 e9       	ldi	r24, 0x90	; 144
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_displayCharacter+0x848>
    2ae2:	9c 83       	std	Y+4, r25	; 0x04
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <LCD_displayCharacter+0x83c>
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	9a 83       	std	Y+2, r25	; 0x02
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LCD_displayCharacter+0x884>
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    2b22:	cd 59       	subi	r28, 0x9D	; 157
    2b24:	df 4f       	sbci	r29, 0xFF	; 255
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	08 95       	ret

00002b3a <LCD_displayString>:

void LCD_displayString(char * string)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <LCD_displayString+0x6>
    2b40:	0f 92       	push	r0
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	9b 83       	std	Y+3, r25	; 0x03
    2b48:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    2b4a:	19 82       	std	Y+1, r1	; 0x01
    2b4c:	0e c0       	rjmp	.+28     	; 0x2b6a <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	9b 81       	ldd	r25, Y+3	; 0x03
    2b58:	fc 01       	movw	r30, r24
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
    2b5e:	80 81       	ld	r24, Z
    2b60:	0e 94 4b 11 	call	0x2296	; 0x2296 <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	8f 5f       	subi	r24, 0xFF	; 255
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	fc 01       	movw	r30, r24
    2b76:	e2 0f       	add	r30, r18
    2b78:	f3 1f       	adc	r31, r19
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 23       	and	r24, r24
    2b7e:	39 f7       	brne	.-50     	; 0x2b4e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LCD_clearScreen>:

void LCD_clearScreen()
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>
}
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <LCD_moveCursor+0x6>
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <LCD_moveCursor+0x8>
    2ba8:	0f 92       	push	r0
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	8a 83       	std	Y+2, r24	; 0x02
    2bb0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	3d 83       	std	Y+5, r19	; 0x05
    2bba:	2c 83       	std	Y+4, r18	; 0x04
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	c1 f0       	breq	.+48     	; 0x2bf6 <LCD_moveCursor+0x56>
    2bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	31 05       	cpc	r19, r1
    2bce:	2c f4       	brge	.+10     	; 0x2bda <LCD_moveCursor+0x3a>
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <LCD_moveCursor+0x50>
    2bd8:	19 c0       	rjmp	.+50     	; 0x2c0c <LCD_moveCursor+0x6c>
    2bda:	2c 81       	ldd	r18, Y+4	; 0x04
    2bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    2bde:	22 30       	cpi	r18, 0x02	; 2
    2be0:	31 05       	cpc	r19, r1
    2be2:	69 f0       	breq	.+26     	; 0x2bfe <LCD_moveCursor+0x5e>
    2be4:	8c 81       	ldd	r24, Y+4	; 0x04
    2be6:	9d 81       	ldd	r25, Y+5	; 0x05
    2be8:	83 30       	cpi	r24, 0x03	; 3
    2bea:	91 05       	cpc	r25, r1
    2bec:	61 f0       	breq	.+24     	; 0x2c06 <LCD_moveCursor+0x66>
    2bee:	0e c0       	rjmp	.+28     	; 0x2c0c <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	0b c0       	rjmp	.+22     	; 0x2c0c <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	80 5c       	subi	r24, 0xC0	; 192
    2bfa:	89 83       	std	Y+1, r24	; 0x01
    2bfc:	07 c0       	rjmp	.+14     	; 0x2c0c <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	80 5f       	subi	r24, 0xF0	; 240
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	03 c0       	rjmp	.+6      	; 0x2c0c <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	80 5b       	subi	r24, 0xB0	; 176
    2c0a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	80 68       	ori	r24, 0x80	; 128
    2c10:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <LCD_sendCommand>
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <LCD_displayStringRowColumn+0x6>
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <LCD_displayStringRowColumn+0x8>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	6a 83       	std	Y+2, r22	; 0x02
    2c38:	5c 83       	std	Y+4, r21	; 0x04
    2c3a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    2c40:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_moveCursor>
	LCD_displayString(string);
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	9c 81       	ldd	r25, Y+4	; 0x04
    2c48:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	62 97       	sbiw	r28, 0x12	; 18
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	9a 8b       	std	Y+18, r25	; 0x12
    2c70:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    2c72:	89 89       	ldd	r24, Y+17	; 0x11
    2c74:	9a 89       	ldd	r25, Y+18	; 0x12
    2c76:	9e 01       	movw	r18, r28
    2c78:	2f 5f       	subi	r18, 0xFF	; 255
    2c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	4a e0       	ldi	r20, 0x0A	; 10
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	0e 94 ed 17 	call	0x2fda	; 0x2fda <itoa>
	LCD_displayString(buffer);
    2c86:	ce 01       	movw	r24, r28
    2c88:	01 96       	adiw	r24, 0x01	; 1
    2c8a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_displayString>
}
    2c8e:	62 96       	adiw	r28, 0x12	; 18
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <KEYPAD_getPressedKey>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

uint8 KEYPAD_getPressedKey()
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <KEYPAD_getPressedKey+0x6>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	63 e0       	ldi	r22, 0x03	; 3
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	64 e0       	ldi	r22, 0x04	; 4
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	65 e0       	ldi	r22, 0x05	; 5
    2ce0:	40 e0       	ldi	r20, 0x00	; 0
    2ce2:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	66 e0       	ldi	r22, 0x06	; 6
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	67 e0       	ldi	r22, 0x07	; 7
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    2cfa:	19 82       	std	Y+1, r1	; 0x01
    2cfc:	35 c0       	rjmp	.+106    	; 0x2d68 <KEYPAD_getPressedKey+0xc8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	69 81       	ldd	r22, Y+1	; 0x01
    2d02:	41 e0       	ldi	r20, 0x01	; 1
    2d04:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	69 81       	ldd	r22, Y+1	; 0x01
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    2d12:	1a 82       	std	Y+2, r1	; 0x02
    2d14:	1e c0       	rjmp	.+60     	; 0x2d52 <KEYPAD_getPressedKey+0xb2>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	98 2f       	mov	r25, r24
    2d1a:	9c 5f       	subi	r25, 0xFC	; 252
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	69 2f       	mov	r22, r25
    2d20:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <GPIO_readPin>
    2d24:	88 23       	and	r24, r24
    2d26:	91 f4       	brne	.+36     	; 0x2d4c <KEYPAD_getPressedKey+0xac>
				{
					#if (STANDARD_KEYPAD == FALSE)
						#if (KEYPAD_NUM_COLS == 3)
							return KEYPAD_4x3_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
						#elif (KEYPAD_NUM_COLS == 4)
							return KEYPAD_4x4_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	98 2f       	mov	r25, r24
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	89 0f       	add	r24, r25
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <KEYPAD_4x4_adjustKeyNumber>
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
		}
	}
}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	8a 83       	std	Y+2, r24	; 0x02
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	84 30       	cpi	r24, 0x04	; 4
    2d56:	f8 f2       	brcs	.-66     	; 0x2d16 <KEYPAD_getPressedKey+0x76>
						return ((row*KEYPAD_NUM_COLS)+col+1);
					#endif /* ---> STANDARD_KEYPAD */
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	69 81       	ldd	r22, Y+1	; 0x01
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	84 30       	cpi	r24, 0x04	; 4
    2d6c:	40 f2       	brcs	.-112    	; 0x2cfe <KEYPAD_getPressedKey+0x5e>
    2d6e:	c5 cf       	rjmp	.-118    	; 0x2cfa <KEYPAD_getPressedKey+0x5a>

00002d70 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2d7e:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	3c 83       	std	Y+4, r19	; 0x04
    2d88:	2b 83       	std	Y+3, r18	; 0x03
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	88 30       	cpi	r24, 0x08	; 8
    2d90:	91 05       	cpc	r25, r1
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2d94:	70 c0       	rjmp	.+224    	; 0x2e76 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2d96:	2b 81       	ldd	r18, Y+3	; 0x03
    2d98:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9a:	29 30       	cpi	r18, 0x09	; 9
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	5c f5       	brge	.+86     	; 0x2df6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	84 30       	cpi	r24, 0x04	; 4
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2daa:	59 c0       	rjmp	.+178    	; 0x2e5e <KEYPAD_4x4_adjustKeyNumber+0xee>
    2dac:	2b 81       	ldd	r18, Y+3	; 0x03
    2dae:	3c 81       	ldd	r19, Y+4	; 0x04
    2db0:	25 30       	cpi	r18, 0x05	; 5
    2db2:	31 05       	cpc	r19, r1
    2db4:	9c f4       	brge	.+38     	; 0x2ddc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2dc0:	48 c0       	rjmp	.+144    	; 0x2e52 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc6:	23 30       	cpi	r18, 0x03	; 3
    2dc8:	31 05       	cpc	r19, r1
    2dca:	0c f0       	brlt	.+2      	; 0x2dce <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2dcc:	45 c0       	rjmp	.+138    	; 0x2e58 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2dd8:	39 c0       	rjmp	.+114    	; 0x2e4c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2dda:	67 c0       	rjmp	.+206    	; 0x2eaa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dde:	3c 81       	ldd	r19, Y+4	; 0x04
    2de0:	26 30       	cpi	r18, 0x06	; 6
    2de2:	31 05       	cpc	r19, r1
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2de6:	41 c0       	rjmp	.+130    	; 0x2e6a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	87 30       	cpi	r24, 0x07	; 7
    2dee:	91 05       	cpc	r25, r1
    2df0:	0c f0       	brlt	.+2      	; 0x2df4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2df2:	3e c0       	rjmp	.+124    	; 0x2e70 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2df4:	37 c0       	rjmp	.+110    	; 0x2e64 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2df6:	2b 81       	ldd	r18, Y+3	; 0x03
    2df8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dfa:	2c 30       	cpi	r18, 0x0C	; 12
    2dfc:	31 05       	cpc	r19, r1
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2e00:	46 c0       	rjmp	.+140    	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	8d 30       	cpi	r24, 0x0D	; 13
    2e08:	91 05       	cpc	r25, r1
    2e0a:	5c f4       	brge	.+22     	; 0x2e22 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e10:	2a 30       	cpi	r18, 0x0A	; 10
    2e12:	31 05       	cpc	r19, r1
    2e14:	b1 f1       	breq	.+108    	; 0x2e82 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	8b 30       	cpi	r24, 0x0B	; 11
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	a4 f5       	brge	.+104    	; 0x2e88 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2e20:	2d c0       	rjmp	.+90     	; 0x2e7c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2e22:	2b 81       	ldd	r18, Y+3	; 0x03
    2e24:	3c 81       	ldd	r19, Y+4	; 0x04
    2e26:	2e 30       	cpi	r18, 0x0E	; 14
    2e28:	31 05       	cpc	r19, r1
    2e2a:	b9 f1       	breq	.+110    	; 0x2e9a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	8e 30       	cpi	r24, 0x0E	; 14
    2e32:	91 05       	cpc	r25, r1
    2e34:	7c f1       	brlt	.+94     	; 0x2e94 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2e36:	2b 81       	ldd	r18, Y+3	; 0x03
    2e38:	3c 81       	ldd	r19, Y+4	; 0x04
    2e3a:	2f 30       	cpi	r18, 0x0F	; 15
    2e3c:	31 05       	cpc	r19, r1
    2e3e:	79 f1       	breq	.+94     	; 0x2e9e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	9c 81       	ldd	r25, Y+4	; 0x04
    2e44:	80 31       	cpi	r24, 0x10	; 16
    2e46:	91 05       	cpc	r25, r1
    2e48:	69 f1       	breq	.+90     	; 0x2ea4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2e4a:	2f c0       	rjmp	.+94     	; 0x2eaa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    2e4c:	87 e0       	ldi	r24, 0x07	; 7
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	2e c0       	rjmp	.+92     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    2e52:	88 e0       	ldi	r24, 0x08	; 8
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	2b c0       	rjmp	.+86     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    2e58:	89 e0       	ldi	r24, 0x09	; 9
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	28 c0       	rjmp	.+80     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';
    2e5e:	85 e2       	ldi	r24, 0x25	; 37
    2e60:	89 83       	std	Y+1, r24	; 0x01
    2e62:	25 c0       	rjmp	.+74     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    2e64:	84 e0       	ldi	r24, 0x04	; 4
    2e66:	89 83       	std	Y+1, r24	; 0x01
    2e68:	22 c0       	rjmp	.+68     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    2e6a:	85 e0       	ldi	r24, 0x05	; 5
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	1f c0       	rjmp	.+62     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    2e70:	86 e0       	ldi	r24, 0x06	; 6
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	1c c0       	rjmp	.+56     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';
    2e76:	8a e2       	ldi	r24, 0x2A	; 42
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	19 c0       	rjmp	.+50     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	16 c0       	rjmp	.+44     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	13 c0       	rjmp	.+38     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    2e88:	83 e0       	ldi	r24, 0x03	; 3
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	10 c0       	rjmp	.+32     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    2e8e:	8d e2       	ldi	r24, 0x2D	; 45
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	0d c0       	rjmp	.+26     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;
    2e94:	8d e0       	ldi	r24, 0x0D	; 13
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	0a c0       	rjmp	.+20     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2e9a:	19 82       	std	Y+1, r1	; 0x01
    2e9c:	08 c0       	rjmp	.+16     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';
    2e9e:	8d e3       	ldi	r24, 0x3D	; 61
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';
    2ea4:	8b e2       	ldi	r24, 0x2B	; 43
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <main>:

#include "MCAL/GPIO/gpio.h"
#include "HAL/KEYPAD/keypad.h"

int main(void)
{
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	0f 92       	push	r0
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	/* Use a 7-segment to display the keypad button value */
	GPIO_setupPinDirection(PORTC_ID,PIN0_ID,PIN_OUTPUT);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN1_ID,PIN_OUTPUT);
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	62 e0       	ldi	r22, 0x02	; 2
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN3_ID,PIN_OUTPUT);
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	63 e0       	ldi	r22, 0x03	; 3
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	while(1)
	{
		/* Get the pressed button from keypad */
		key = KEYPAD_getPressedKey();
    2ef0:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <KEYPAD_getPressedKey>
    2ef4:	89 83       	std	Y+1, r24	; 0x01

		if((key >= 0) && (key <= 9))
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	8a 30       	cpi	r24, 0x0A	; 10
    2efa:	d0 f7       	brcc	.-12     	; 0x2ef0 <main+0x32>
		{
			GPIO_writePort(PORTC_ID,key); /* display the key number on the 7-segment */
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	69 81       	ldd	r22, Y+1	; 0x01
    2f00:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <GPIO_writePort>
    2f04:	f5 cf       	rjmp	.-22     	; 0x2ef0 <main+0x32>

00002f06 <__mulsi3>:
    2f06:	62 9f       	mul	r22, r18
    2f08:	d0 01       	movw	r26, r0
    2f0a:	73 9f       	mul	r23, r19
    2f0c:	f0 01       	movw	r30, r0
    2f0e:	82 9f       	mul	r24, r18
    2f10:	e0 0d       	add	r30, r0
    2f12:	f1 1d       	adc	r31, r1
    2f14:	64 9f       	mul	r22, r20
    2f16:	e0 0d       	add	r30, r0
    2f18:	f1 1d       	adc	r31, r1
    2f1a:	92 9f       	mul	r25, r18
    2f1c:	f0 0d       	add	r31, r0
    2f1e:	83 9f       	mul	r24, r19
    2f20:	f0 0d       	add	r31, r0
    2f22:	74 9f       	mul	r23, r20
    2f24:	f0 0d       	add	r31, r0
    2f26:	65 9f       	mul	r22, r21
    2f28:	f0 0d       	add	r31, r0
    2f2a:	99 27       	eor	r25, r25
    2f2c:	72 9f       	mul	r23, r18
    2f2e:	b0 0d       	add	r27, r0
    2f30:	e1 1d       	adc	r30, r1
    2f32:	f9 1f       	adc	r31, r25
    2f34:	63 9f       	mul	r22, r19
    2f36:	b0 0d       	add	r27, r0
    2f38:	e1 1d       	adc	r30, r1
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	bd 01       	movw	r22, r26
    2f3e:	cf 01       	movw	r24, r30
    2f40:	11 24       	eor	r1, r1
    2f42:	08 95       	ret

00002f44 <__udivmodhi4>:
    2f44:	aa 1b       	sub	r26, r26
    2f46:	bb 1b       	sub	r27, r27
    2f48:	51 e1       	ldi	r21, 0x11	; 17
    2f4a:	07 c0       	rjmp	.+14     	; 0x2f5a <__udivmodhi4_ep>

00002f4c <__udivmodhi4_loop>:
    2f4c:	aa 1f       	adc	r26, r26
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	a6 17       	cp	r26, r22
    2f52:	b7 07       	cpc	r27, r23
    2f54:	10 f0       	brcs	.+4      	; 0x2f5a <__udivmodhi4_ep>
    2f56:	a6 1b       	sub	r26, r22
    2f58:	b7 0b       	sbc	r27, r23

00002f5a <__udivmodhi4_ep>:
    2f5a:	88 1f       	adc	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	5a 95       	dec	r21
    2f60:	a9 f7       	brne	.-22     	; 0x2f4c <__udivmodhi4_loop>
    2f62:	80 95       	com	r24
    2f64:	90 95       	com	r25
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	08 95       	ret

00002f6c <__prologue_saves__>:
    2f6c:	2f 92       	push	r2
    2f6e:	3f 92       	push	r3
    2f70:	4f 92       	push	r4
    2f72:	5f 92       	push	r5
    2f74:	6f 92       	push	r6
    2f76:	7f 92       	push	r7
    2f78:	8f 92       	push	r8
    2f7a:	9f 92       	push	r9
    2f7c:	af 92       	push	r10
    2f7e:	bf 92       	push	r11
    2f80:	cf 92       	push	r12
    2f82:	df 92       	push	r13
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	ca 1b       	sub	r28, r26
    2f96:	db 0b       	sbc	r29, r27
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	09 94       	ijmp

00002fa4 <__epilogue_restores__>:
    2fa4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fa6:	39 88       	ldd	r3, Y+17	; 0x11
    2fa8:	48 88       	ldd	r4, Y+16	; 0x10
    2faa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fac:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fae:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fb6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fb8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fba:	df 80       	ldd	r13, Y+7	; 0x07
    2fbc:	ee 80       	ldd	r14, Y+6	; 0x06
    2fbe:	fd 80       	ldd	r15, Y+5	; 0x05
    2fc0:	0c 81       	ldd	r16, Y+4	; 0x04
    2fc2:	1b 81       	ldd	r17, Y+3	; 0x03
    2fc4:	aa 81       	ldd	r26, Y+2	; 0x02
    2fc6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fc8:	ce 0f       	add	r28, r30
    2fca:	d1 1d       	adc	r29, r1
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	ed 01       	movw	r28, r26
    2fd8:	08 95       	ret

00002fda <itoa>:
    2fda:	fb 01       	movw	r30, r22
    2fdc:	9f 01       	movw	r18, r30
    2fde:	e8 94       	clt
    2fe0:	42 30       	cpi	r20, 0x02	; 2
    2fe2:	c4 f0       	brlt	.+48     	; 0x3014 <itoa+0x3a>
    2fe4:	45 32       	cpi	r20, 0x25	; 37
    2fe6:	b4 f4       	brge	.+44     	; 0x3014 <itoa+0x3a>
    2fe8:	4a 30       	cpi	r20, 0x0A	; 10
    2fea:	29 f4       	brne	.+10     	; 0x2ff6 <itoa+0x1c>
    2fec:	97 fb       	bst	r25, 7
    2fee:	1e f4       	brtc	.+6      	; 0x2ff6 <itoa+0x1c>
    2ff0:	90 95       	com	r25
    2ff2:	81 95       	neg	r24
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	64 2f       	mov	r22, r20
    2ff8:	77 27       	eor	r23, r23
    2ffa:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__udivmodhi4>
    2ffe:	80 5d       	subi	r24, 0xD0	; 208
    3000:	8a 33       	cpi	r24, 0x3A	; 58
    3002:	0c f0       	brlt	.+2      	; 0x3006 <itoa+0x2c>
    3004:	89 5d       	subi	r24, 0xD9	; 217
    3006:	81 93       	st	Z+, r24
    3008:	cb 01       	movw	r24, r22
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	a1 f7       	brne	.-24     	; 0x2ff6 <itoa+0x1c>
    300e:	16 f4       	brtc	.+4      	; 0x3014 <itoa+0x3a>
    3010:	5d e2       	ldi	r21, 0x2D	; 45
    3012:	51 93       	st	Z+, r21
    3014:	10 82       	st	Z, r1
    3016:	c9 01       	movw	r24, r18
    3018:	0c 94 0e 18 	jmp	0x301c	; 0x301c <strrev>

0000301c <strrev>:
    301c:	dc 01       	movw	r26, r24
    301e:	fc 01       	movw	r30, r24
    3020:	67 2f       	mov	r22, r23
    3022:	71 91       	ld	r23, Z+
    3024:	77 23       	and	r23, r23
    3026:	e1 f7       	brne	.-8      	; 0x3020 <strrev+0x4>
    3028:	32 97       	sbiw	r30, 0x02	; 2
    302a:	04 c0       	rjmp	.+8      	; 0x3034 <strrev+0x18>
    302c:	7c 91       	ld	r23, X
    302e:	6d 93       	st	X+, r22
    3030:	70 83       	st	Z, r23
    3032:	62 91       	ld	r22, -Z
    3034:	ae 17       	cp	r26, r30
    3036:	bf 07       	cpc	r27, r31
    3038:	c8 f3       	brcs	.-14     	; 0x302c <strrev+0x10>
    303a:	08 95       	ret

0000303c <_exit>:
    303c:	f8 94       	cli

0000303e <__stop_program>:
    303e:	ff cf       	rjmp	.-2      	; 0x303e <__stop_program>
