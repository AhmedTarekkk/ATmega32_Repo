
repo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003732  000037c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  000038ce  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016c0  00000000  00000000  00006ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ad21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c0a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d736  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e3       	ldi	r30, 0x32	; 50
      78:	f7 e3       	ldi	r31, 0x37	; 55
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <main>
      8a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PWM_Timer0_Start>:
#include "pwm0.h"
#include "avr/io.h"
#include "../GPIO/gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the timer with
	 * Non inverting fast PWM Mode
	 * Clock frequency = F_CPU/8
	 */
	TCNT0 = 0;
     e3a:	e2 e5       	ldi	r30, 0x52	; 82
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
	OCR0 = (uint8)((uint16)(duty_cycle*255)/100) ; /* casting the value so we don't get overflow */
     e40:	ec e5       	ldi	r30, 0x5C	; 92
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	48 2f       	mov	r20, r24
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	ca 01       	movw	r24, r20
     e4c:	9c 01       	movw	r18, r24
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	c9 01       	movw	r24, r18
     e54:	96 95       	lsr	r25
     e56:	98 2f       	mov	r25, r24
     e58:	88 27       	eor	r24, r24
     e5a:	97 95       	ror	r25
     e5c:	87 95       	ror	r24
     e5e:	82 1b       	sub	r24, r18
     e60:	93 0b       	sbc	r25, r19
     e62:	84 0f       	add	r24, r20
     e64:	95 1f       	adc	r25, r21
     e66:	24 e6       	ldi	r18, 0x64	; 100
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	b9 01       	movw	r22, r18
     e6c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__udivmodhi4>
     e70:	cb 01       	movw	r24, r22
     e72:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); /* PWM pin as O/P */
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	63 e0       	ldi	r22, 0x03	; 3
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
     e7e:	e3 e5       	ldi	r30, 0x53	; 83
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8a e6       	ldi	r24, 0x6A	; 106
     e84:	80 83       	st	Z, r24

}
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <__vector_6>:
/*******************************************************************************
*                       Interrupt Service Routines                            *
*******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     eb8:	80 91 68 01 	lds	r24, 0x0168
     ebc:	90 91 69 01 	lds	r25, 0x0169
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	29 f0       	breq	.+10     	; 0xece <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     ec4:	e0 91 68 01 	lds	r30, 0x0168
     ec8:	f0 91 69 01 	lds	r31, 0x0169
     ecc:	09 95       	icall
	}
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <ICU_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <ICU_init+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	66 e0       	ldi	r22, 0x06	; 6
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     f0c:	ef e4       	ldi	r30, 0x4F	; 79
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     f14:	ae e4       	ldi	r26, 0x4E	; 78
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ee e4       	ldi	r30, 0x4E	; 78
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	98 2f       	mov	r25, r24
     f20:	98 7f       	andi	r25, 0xF8	; 248
     f22:	e9 81       	ldd	r30, Y+1	; 0x01
     f24:	fa 81       	ldd	r31, Y+2	; 0x02
     f26:	80 81       	ld	r24, Z
     f28:	89 2b       	or	r24, r25
     f2a:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     f2c:	ae e4       	ldi	r26, 0x4E	; 78
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ee e4       	ldi	r30, 0x4E	; 78
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	28 2f       	mov	r18, r24
     f38:	2f 7b       	andi	r18, 0xBF	; 191
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	81 81       	ldd	r24, Z+1	; 0x01
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	00 24       	eor	r0, r0
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	07 94       	ror	r0
     f4c:	96 95       	lsr	r25
     f4e:	87 95       	ror	r24
     f50:	07 94       	ror	r0
     f52:	98 2f       	mov	r25, r24
     f54:	80 2d       	mov	r24, r0
     f56:	82 2b       	or	r24, r18
     f58:	8c 93       	st	X, r24
	TCNT1 = 0;
     f5a:	ec e4       	ldi	r30, 0x4C	; 76
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	11 82       	std	Z+1, r1	; 0x01
     f60:	10 82       	st	Z, r1
	ICR1 = 0;
     f62:	e6 e4       	ldi	r30, 0x46	; 70
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	11 82       	std	Z+1, r1	; 0x01
     f68:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TICIE1);
     f6a:	a9 e5       	ldi	r26, 0x59	; 89
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e9 e5       	ldi	r30, 0x59	; 89
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 62       	ori	r24, 0x20	; 32
     f76:	8c 93       	st	X, r24
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <ICU_setCallBack+0x6>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	90 93 69 01 	sts	0x0169, r25
     f98:	80 93 68 01 	sts	0x0168, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((a_edgeType)<<6);
     fb2:	ae e4       	ldi	r26, 0x4E	; 78
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ee e4       	ldi	r30, 0x4E	; 78
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	2f 7b       	andi	r18, 0xBF	; 191
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	00 24       	eor	r0, r0
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	07 94       	ror	r0
     fce:	96 95       	lsr	r25
     fd0:	87 95       	ror	r24
     fd2:	07 94       	ror	r0
     fd4:	98 2f       	mov	r25, r24
     fd6:	80 2d       	mov	r24, r0
     fd8:	82 2b       	or	r24, r18
     fda:	8c 93       	st	X, r24
}
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     fec:	e6 e4       	ldi	r30, 0x46	; 70
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    1002:	e2 e5       	ldi	r30, 0x52	; 82
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	10 82       	st	Z, r1
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <ICU_DeInit>:

void ICU_DeInit(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	10 82       	st	Z, r1
	TCCR1B = 0;
    101c:	ee e4       	ldi	r30, 0x4E	; 78
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	10 82       	st	Z, r1
	TCNT1 = 0;
    1022:	ec e4       	ldi	r30, 0x4C	; 76
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	11 82       	std	Z+1, r1	; 0x01
    1028:	10 82       	st	Z, r1
	ICR1 = 0;
    102a:	e6 e4       	ldi	r30, 0x46	; 70
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	11 82       	std	Z+1, r1	; 0x01
    1030:	10 82       	st	Z, r1

	CLEAR_BIT(TIMSK,TICIE1);
    1032:	a9 e5       	ldi	r26, 0x59	; 89
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e9 e5       	ldi	r30, 0x59	; 89
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7d       	andi	r24, 0xDF	; 223
    103e:	8c 93       	st	X, r24
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <GPIO_setupPinDirection+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <GPIO_setupPinDirection+0x8>
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6a 83       	std	Y+2, r22	; 0x02
    1058:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	88 30       	cpi	r24, 0x08	; 8
    105e:	08 f0       	brcs	.+2      	; 0x1062 <GPIO_setupPinDirection+0x1c>
    1060:	d5 c0       	rjmp	.+426    	; 0x120c <GPIO_setupPinDirection+0x1c6>
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	08 f0       	brcs	.+2      	; 0x106a <GPIO_setupPinDirection+0x24>
    1068:	d1 c0       	rjmp	.+418    	; 0x120c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3d 83       	std	Y+5, r19	; 0x05
    1072:	2c 83       	std	Y+4, r18	; 0x04
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <GPIO_setupPinDirection+0x3a>
    107e:	43 c0       	rjmp	.+134    	; 0x1106 <GPIO_setupPinDirection+0xc0>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	2c f4       	brge	.+10     	; 0x1094 <GPIO_setupPinDirection+0x4e>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	71 f0       	breq	.+28     	; 0x10ae <GPIO_setupPinDirection+0x68>
    1092:	bc c0       	rjmp	.+376    	; 0x120c <GPIO_setupPinDirection+0x1c6>
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	3d 81       	ldd	r19, Y+5	; 0x05
    1098:	22 30       	cpi	r18, 0x02	; 2
    109a:	31 05       	cpc	r19, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <GPIO_setupPinDirection+0x5a>
    109e:	5f c0       	rjmp	.+190    	; 0x115e <GPIO_setupPinDirection+0x118>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <GPIO_setupPinDirection+0x66>
    10aa:	85 c0       	rjmp	.+266    	; 0x11b6 <GPIO_setupPinDirection+0x170>
    10ac:	af c0       	rjmp	.+350    	; 0x120c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10b4:	aa e3       	ldi	r26, 0x3A	; 58
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0x8c>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0x88>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	98 c0       	rjmp	.+304    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10dc:	aa e3       	ldi	r26, 0x3A	; 58
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ea e3       	ldi	r30, 0x3A	; 58
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_setupPinDirection+0xb4>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_setupPinDirection+0xb0>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	83 c0       	rjmp	.+262    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0xe4>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0xe0>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6c c0       	rjmp	.+216    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1134:	a7 e3       	ldi	r26, 0x37	; 55
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0x10c>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0x108>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	57 c0       	rjmp	.+174    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1164:	a4 e3       	ldi	r26, 0x34	; 52
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e4 e3       	ldi	r30, 0x34	; 52
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x13c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x138>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	40 c0       	rjmp	.+128    	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    118c:	a4 e3       	ldi	r26, 0x34	; 52
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e4 e3       	ldi	r30, 0x34	; 52
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0x164>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0x160>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	2b c0       	rjmp	.+86     	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11bc:	a1 e3       	ldi	r26, 0x31	; 49
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e1 e3       	ldi	r30, 0x31	; 49
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0x194>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0x190>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11e4:	a1 e3       	ldi	r26, 0x31	; 49
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e1 e3       	ldi	r30, 0x31	; 49
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0x1bc>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0x1b8>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_writePin+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_writePin+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	6a 83       	std	Y+2, r22	; 0x02
    122e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <GPIO_writePin+0x1c>
    1236:	d5 c0       	rjmp	.+426    	; 0x13e2 <GPIO_writePin+0x1c6>
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	08 f0       	brcs	.+2      	; 0x1240 <GPIO_writePin+0x24>
    123e:	d1 c0       	rjmp	.+418    	; 0x13e2 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <GPIO_writePin+0x3a>
    1254:	43 c0       	rjmp	.+134    	; 0x12dc <GPIO_writePin+0xc0>
    1256:	2c 81       	ldd	r18, Y+4	; 0x04
    1258:	3d 81       	ldd	r19, Y+5	; 0x05
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <GPIO_writePin+0x4e>
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	9d 81       	ldd	r25, Y+5	; 0x05
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	71 f0       	breq	.+28     	; 0x1284 <GPIO_writePin+0x68>
    1268:	bc c0       	rjmp	.+376    	; 0x13e2 <GPIO_writePin+0x1c6>
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <GPIO_writePin+0x5a>
    1274:	5f c0       	rjmp	.+190    	; 0x1334 <GPIO_writePin+0x118>
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <GPIO_writePin+0x66>
    1280:	85 c0       	rjmp	.+266    	; 0x138c <GPIO_writePin+0x170>
    1282:	af c0       	rjmp	.+350    	; 0x13e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	a1 f4       	brne	.+40     	; 0x12b2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    128a:	ab e3       	ldi	r26, 0x3B	; 59
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0x8c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0x88>
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	98 c0       	rjmp	.+304    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12b2:	ab e3       	ldi	r26, 0x3B	; 59
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_writePin+0xb4>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_writePin+0xb0>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	83 c0       	rjmp	.+262    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0xe4>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0xe0>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	6c c0       	rjmp	.+216    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    130a:	a8 e3       	ldi	r26, 0x38	; 56
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_writePin+0x10c>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_writePin+0x108>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	57 c0       	rjmp	.+174    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	a1 f4       	brne	.+40     	; 0x1362 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0x13c>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0x138>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	40 c0       	rjmp	.+128    	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1362:	a5 e3       	ldi	r26, 0x35	; 53
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_writePin+0x164>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_writePin+0x160>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	2b c0       	rjmp	.+86     	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	a1 f4       	brne	.+40     	; 0x13ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_writePin+0x194>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_writePin+0x190>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13ba:	a2 e3       	ldi	r26, 0x32	; 50
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_writePin+0x1bc>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_writePin+0x1b8>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <GPIO_readPin+0x6>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <GPIO_readPin+0x8>
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    1404:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	08 f0       	brcs	.+2      	; 0x140e <GPIO_readPin+0x1c>
    140c:	84 c0       	rjmp	.+264    	; 0x1516 <GPIO_readPin+0x124>
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	08 f0       	brcs	.+2      	; 0x1416 <GPIO_readPin+0x24>
    1414:	80 c0       	rjmp	.+256    	; 0x1516 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3d 83       	std	Y+5, r19	; 0x05
    141e:	2c 83       	std	Y+4, r18	; 0x04
    1420:	4c 81       	ldd	r20, Y+4	; 0x04
    1422:	5d 81       	ldd	r21, Y+5	; 0x05
    1424:	41 30       	cpi	r20, 0x01	; 1
    1426:	51 05       	cpc	r21, r1
    1428:	79 f1       	breq	.+94     	; 0x1488 <GPIO_readPin+0x96>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	34 f4       	brge	.+12     	; 0x1440 <GPIO_readPin+0x4e>
    1434:	2c 81       	ldd	r18, Y+4	; 0x04
    1436:	3d 81       	ldd	r19, Y+5	; 0x05
    1438:	21 15       	cp	r18, r1
    143a:	31 05       	cpc	r19, r1
    143c:	69 f0       	breq	.+26     	; 0x1458 <GPIO_readPin+0x66>
    143e:	6b c0       	rjmp	.+214    	; 0x1516 <GPIO_readPin+0x124>
    1440:	4c 81       	ldd	r20, Y+4	; 0x04
    1442:	5d 81       	ldd	r21, Y+5	; 0x05
    1444:	42 30       	cpi	r20, 0x02	; 2
    1446:	51 05       	cpc	r21, r1
    1448:	b9 f1       	breq	.+110    	; 0x14b8 <GPIO_readPin+0xc6>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <GPIO_readPin+0x64>
    1454:	49 c0       	rjmp	.+146    	; 0x14e8 <GPIO_readPin+0xf6>
    1456:	5f c0       	rjmp	.+190    	; 0x1516 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    1458:	e9 e3       	ldi	r30, 0x39	; 57
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_readPin+0x7e>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_readPin+0x7a>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	90 70       	andi	r25, 0x00	; 0
    147a:	88 23       	and	r24, r24
    147c:	19 f0       	breq	.+6      	; 0x1484 <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	49 c0       	rjmp	.+146    	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1484:	19 82       	std	Y+1, r1	; 0x01
    1486:	47 c0       	rjmp	.+142    	; 0x1516 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    1488:	e6 e3       	ldi	r30, 0x36	; 54
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_readPin+0xae>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_readPin+0xaa>
    14a4:	ca 01       	movw	r24, r20
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	90 70       	andi	r25, 0x00	; 0
    14aa:	88 23       	and	r24, r24
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	31 c0       	rjmp	.+98     	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	2f c0       	rjmp	.+94     	; 0x1516 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    14b8:	e3 e3       	ldi	r30, 0x33	; 51
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GPIO_readPin+0xde>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GPIO_readPin+0xda>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	88 23       	and	r24, r24
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	19 c0       	rjmp	.+50     	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    14e4:	19 82       	std	Y+1, r1	; 0x01
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    14e8:	e0 e3       	ldi	r30, 0x30	; 48
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <GPIO_readPin+0x10e>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <GPIO_readPin+0x10a>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	90 70       	andi	r25, 0x00	; 0
    150a:	88 23       	and	r24, r24
    150c:	19 f0       	breq	.+6      	; 0x1514 <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1514:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_setupPortDirection+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_setupPortDirection+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	90 f5       	brcc	.+100    	; 0x15a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3c 83       	std	Y+4, r19	; 0x04
    1546:	2b 83       	std	Y+3, r18	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	91 05       	cpc	r25, r1
    1550:	d1 f0       	breq	.+52     	; 0x1586 <GPIO_setupPortDirection+0x5e>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <GPIO_setupPortDirection+0x3e>
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 f0       	breq	.+24     	; 0x157c <GPIO_setupPortDirection+0x54>
    1564:	1e c0       	rjmp	.+60     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <GPIO_setupPortDirection+0x68>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	81 f0       	breq	.+32     	; 0x159a <GPIO_setupPortDirection+0x72>
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    157c:	ea e3       	ldi	r30, 0x3A	; 58
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	80 83       	st	Z, r24
    1584:	0e c0       	rjmp	.+28     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1586:	e7 e3       	ldi	r30, 0x37	; 55
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 83       	st	Z, r24
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    159a:	e1 e3       	ldi	r30, 0x31	; 49
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_writePort+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <GPIO_writePort+0x8>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	90 f5       	brcc	.+100    	; 0x162a <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3c 83       	std	Y+4, r19	; 0x04
    15ce:	2b 83       	std	Y+3, r18	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	d1 f0       	breq	.+52     	; 0x160e <GPIO_writePort+0x5e>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <GPIO_writePort+0x3e>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <GPIO_writePort+0x54>
    15ec:	1e c0       	rjmp	.+60     	; 0x162a <GPIO_writePort+0x7a>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <GPIO_writePort+0x68>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	81 f0       	breq	.+32     	; 0x1622 <GPIO_writePort+0x72>
    1602:	13 c0       	rjmp	.+38     	; 0x162a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    1604:	eb e3       	ldi	r30, 0x3B	; 59
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 83       	st	Z, r24
    160c:	0e c0       	rjmp	.+28     	; 0x162a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 83       	st	Z, r24
    1616:	09 c0       	rjmp	.+18     	; 0x162a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    1618:	e5 e3       	ldi	r30, 0x35	; 53
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
    1620:	04 c0       	rjmp	.+8      	; 0x162a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    1622:	e2 e3       	ldi	r30, 0x32	; 50
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
			break;
		}
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_readPort+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_readPort+0x8>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    1646:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	90 f5       	brcc	.+100    	; 0x16b2 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3c 83       	std	Y+4, r19	; 0x04
    1656:	2b 83       	std	Y+3, r18	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	91 05       	cpc	r25, r1
    1660:	d1 f0       	breq	.+52     	; 0x1696 <GPIO_readPort+0x5e>
    1662:	2b 81       	ldd	r18, Y+3	; 0x03
    1664:	3c 81       	ldd	r19, Y+4	; 0x04
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <GPIO_readPort+0x3e>
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	61 f0       	breq	.+24     	; 0x168c <GPIO_readPort+0x54>
    1674:	1e c0       	rjmp	.+60     	; 0x16b2 <GPIO_readPort+0x7a>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	81 f0       	breq	.+32     	; 0x16a0 <GPIO_readPort+0x68>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	81 f0       	breq	.+32     	; 0x16aa <GPIO_readPort+0x72>
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    168c:	e9 e3       	ldi	r30, 0x39	; 57
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	0e c0       	rjmp	.+28     	; 0x16b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    1696:	e6 e3       	ldi	r30, 0x36	; 54
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    16a0:	e3 e3       	ldi	r30, 0x33	; 51
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    16aa:	e0 e3       	ldi	r30, 0x30	; 48
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <ADC_init>:
#include "adc.h"
#include "avr/io.h"
#include "../../LIB/common_macros.h"

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <ADC_init+0x6>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
	/* Initially set the registers with zeros so we can insert their values as we want */
	ADMUX = 0;
    16d0:	e7 e2       	ldi	r30, 0x27	; 39
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1
	ADCSRA = 0;
    16d6:	e6 e2       	ldi	r30, 0x26	; 38
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1

	 /* left shift the value by 6 so we can insert it in the right place at REFS0 and REFS1 */
	ADMUX |= ( (Config_Ptr->ref_volt) << 6 ) ;
    16dc:	a7 e2       	ldi	r26, 0x27	; 39
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e2       	ldi	r30, 0x27	; 39
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	28 2f       	mov	r18, r24
    16e8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ea:	fa 81       	ldd	r31, Y+2	; 0x02
    16ec:	80 81       	ld	r24, Z
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	00 24       	eor	r0, r0
    16f4:	96 95       	lsr	r25
    16f6:	87 95       	ror	r24
    16f8:	07 94       	ror	r0
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	07 94       	ror	r0
    1700:	98 2f       	mov	r25, r24
    1702:	80 2d       	mov	r24, r0
    1704:	82 2b       	or	r24, r18
    1706:	8c 93       	st	X, r24

	/* same as the last step but this time ADPSX bits are the first 3 bits so no need to shift */
	ADCSRA |= (Config_Ptr->prescaler) ;
    1708:	a6 e2       	ldi	r26, 0x26	; 38
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e6 e2       	ldi	r30, 0x26	; 38
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	90 81       	ld	r25, Z
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	81 81       	ldd	r24, Z+1	; 0x01
    1718:	89 2b       	or	r24, r25
    171a:	8c 93       	st	X, r24

	/* Enable the ADC */
	SET_BIT(ADCSRA,ADEN);
    171c:	a6 e2       	ldi	r26, 0x26	; 38
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e6 e2       	ldi	r30, 0x26	; 38
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 68       	ori	r24, 0x80	; 128
    1728:	8c 93       	st	X, r24
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
	/* clear the previous channel and insert the new one in only 3 bits ( 8 channels ) " */
	ADMUX = (ADMUX & ADC_CHANNEL_CLEAR_MASK) | (channel & 0x07) ;
    1740:	a7 e2       	ldi	r26, 0x27	; 39
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e7 e2       	ldi	r30, 0x27	; 39
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	98 2f       	mov	r25, r24
    174c:	90 7e       	andi	r25, 0xE0	; 224
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	87 70       	andi	r24, 0x07	; 7
    1752:	89 2b       	or	r24, r25
    1754:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA,ADSC);
    1756:	a6 e2       	ldi	r26, 0x26	; 38
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e2       	ldi	r30, 0x26	; 38
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 64       	ori	r24, 0x40	; 64
    1762:	8c 93       	st	X, r24

	/* wait the ADC o/p with polling method */
	while(BIT_IS_CLEAR(ADCSRA,ADIF)){}
    1764:	e6 e2       	ldi	r30, 0x26	; 38
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	80 71       	andi	r24, 0x10	; 16
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	b9 f3       	breq	.-18     	; 0x1764 <ADC_readChannel+0x30>

	/* clearing ADC flag */
	SET_BIT(ADCSRA,ADIF);
    1776:	a6 e2       	ldi	r26, 0x26	; 38
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e6 e2       	ldi	r30, 0x26	; 38
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	8c 93       	st	X, r24

	return ADC;
    1784:	e4 e2       	ldi	r30, 0x24	; 36
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <SEVEN_SEGMENT_init>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

void SEVEN_SEGMENT_init(void)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
	/* Enable bit is output */
	GPIO_setupPinDirection(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, PIN_OUTPUT);
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	66 e0       	ldi	r22, 0x06	; 6
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	/* Seven segment pins is output */
	for(uint8 counter = 0 ; counter < SEVEN_SEGMENT_DECODER ; counter++)
    17a8:	19 82       	std	Y+1, r1	; 0x01
    17aa:	0b c0       	rjmp	.+22     	; 0x17c2 <SEVEN_SEGMENT_init+0x2e>
	{
		GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID, SEVEN_SEGMENT_FIRST_PIN_ID+counter, PIN_OUTPUT);
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	98 2f       	mov	r25, r24
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	69 2f       	mov	r22, r25
    17b6:	41 e0       	ldi	r20, 0x01	; 1
    17b8:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
{
	/* Enable bit is output */
	GPIO_setupPinDirection(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, PIN_OUTPUT);

	/* Seven segment pins is output */
	for(uint8 counter = 0 ; counter < SEVEN_SEGMENT_DECODER ; counter++)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	87 30       	cpi	r24, 0x07	; 7
    17c6:	90 f3       	brcs	.-28     	; 0x17ac <SEVEN_SEGMENT_init+0x18>
	{
		GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID, SEVEN_SEGMENT_FIRST_PIN_ID+counter, PIN_OUTPUT);
	}
}
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <SEVEN_SEGMENT_enable>:

void SEVEN_SEGMENT_enable(void)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	#if (SEVEN_SEGMENT_TYPE == ANODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_HIGH);
	#elif (SEVEN_SEGMENT_TYPE == CATHODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_LOW);
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	66 e0       	ldi	r22, 0x06	; 6
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	#endif
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <SEVEN_SEGMENT_disable>:

void SEVEN_SEGMENT_disable(void)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	#if (SEVEN_SEGMENT_TYPE == ANODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_LOW);
	#elif (SEVEN_SEGMENT_TYPE == CATHODE)
		GPIO_writePin(SEVEN_SEGMENT_E_PORT_ID, SEVEN_SEGMENT_E_PIN_ID, LOGIC_HIGH);
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	66 e0       	ldi	r22, 0x06	; 6
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	#endif
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <SEVEN_SEGMENT_displayNumber>:

void SEVEN_SEGMENT_displayNumber(uint8 number)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
		#if (SEVEN_SEGMENT_TYPE == ANODE)
			SEVEN_SEGMENT_ANODE(number);

		/* No decoder --> Cathode 7 Segment */
		#elif (SEVEN_SEGMENT_TYPE == CATHODE)
			SEVEN_SEGMENT_CATHODE(number);
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	0e 94 0d 0c 	call	0x181a	; 0x181a <SEVEN_SEGMENT_CATHODE>

		#endif /* ANODE or CATHODE condition */

	#endif /* With Decoder or Without condition */
}
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <SEVEN_SEGMENT_CATHODE>:
#if (SEVEN_SEGMENT_DECODER == WITHOUT_BCD_DECODER)

#if (SEVEN_SEGMENT_TYPE == CATHODE)

static void SEVEN_SEGMENT_CATHODE(uint8 number)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <SEVEN_SEGMENT_CATHODE+0x6>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01

	switch(number)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3b 83       	std	Y+3, r19	; 0x03
    1830:	2a 83       	std	Y+2, r18	; 0x02
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	9b 81       	ldd	r25, Y+3	; 0x03
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	91 05       	cpc	r25, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <SEVEN_SEGMENT_CATHODE+0x24>
    183c:	0f c1       	rjmp	.+542    	; 0x1a5c <SEVEN_SEGMENT_CATHODE+0x242>
    183e:	2a 81       	ldd	r18, Y+2	; 0x02
    1840:	3b 81       	ldd	r19, Y+3	; 0x03
    1842:	25 30       	cpi	r18, 0x05	; 5
    1844:	31 05       	cpc	r19, r1
    1846:	ec f4       	brge	.+58     	; 0x1882 <SEVEN_SEGMENT_CATHODE+0x68>
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	9b 81       	ldd	r25, Y+3	; 0x03
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <SEVEN_SEGMENT_CATHODE+0x3a>
    1852:	6e c0       	rjmp	.+220    	; 0x1930 <SEVEN_SEGMENT_CATHODE+0x116>
    1854:	2a 81       	ldd	r18, Y+2	; 0x02
    1856:	3b 81       	ldd	r19, Y+3	; 0x03
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	2c f4       	brge	.+10     	; 0x1868 <SEVEN_SEGMENT_CATHODE+0x4e>
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	9b 81       	ldd	r25, Y+3	; 0x03
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	99 f1       	breq	.+102    	; 0x18cc <SEVEN_SEGMENT_CATHODE+0xb2>
    1866:	25 c2       	rjmp	.+1098   	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
    1868:	2a 81       	ldd	r18, Y+2	; 0x02
    186a:	3b 81       	ldd	r19, Y+3	; 0x03
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <SEVEN_SEGMENT_CATHODE+0x5a>
    1872:	90 c0       	rjmp	.+288    	; 0x1994 <SEVEN_SEGMENT_CATHODE+0x17a>
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <SEVEN_SEGMENT_CATHODE+0x66>
    187e:	bc c0       	rjmp	.+376    	; 0x19f8 <SEVEN_SEGMENT_CATHODE+0x1de>
    1880:	18 c2       	rjmp	.+1072   	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
    1882:	2a 81       	ldd	r18, Y+2	; 0x02
    1884:	3b 81       	ldd	r19, Y+3	; 0x03
    1886:	27 30       	cpi	r18, 0x07	; 7
    1888:	31 05       	cpc	r19, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <SEVEN_SEGMENT_CATHODE+0x74>
    188c:	7d c1       	rjmp	.+762    	; 0x1b88 <SEVEN_SEGMENT_CATHODE+0x36e>
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	91 05       	cpc	r25, r1
    1896:	6c f4       	brge	.+26     	; 0x18b2 <SEVEN_SEGMENT_CATHODE+0x98>
    1898:	2a 81       	ldd	r18, Y+2	; 0x02
    189a:	3b 81       	ldd	r19, Y+3	; 0x03
    189c:	25 30       	cpi	r18, 0x05	; 5
    189e:	31 05       	cpc	r19, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <SEVEN_SEGMENT_CATHODE+0x8a>
    18a2:	0e c1       	rjmp	.+540    	; 0x1ac0 <SEVEN_SEGMENT_CATHODE+0x2a6>
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	86 30       	cpi	r24, 0x06	; 6
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <SEVEN_SEGMENT_CATHODE+0x96>
    18ae:	3a c1       	rjmp	.+628    	; 0x1b24 <SEVEN_SEGMENT_CATHODE+0x30a>
    18b0:	00 c2       	rjmp	.+1024   	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
    18b2:	2a 81       	ldd	r18, Y+2	; 0x02
    18b4:	3b 81       	ldd	r19, Y+3	; 0x03
    18b6:	28 30       	cpi	r18, 0x08	; 8
    18b8:	31 05       	cpc	r19, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <SEVEN_SEGMENT_CATHODE+0xa4>
    18bc:	97 c1       	rjmp	.+814    	; 0x1bec <SEVEN_SEGMENT_CATHODE+0x3d2>
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	89 30       	cpi	r24, 0x09	; 9
    18c4:	91 05       	cpc	r25, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <SEVEN_SEGMENT_CATHODE+0xb0>
    18c8:	c3 c1       	rjmp	.+902    	; 0x1c50 <SEVEN_SEGMENT_CATHODE+0x436>
    18ca:	f3 c1       	rjmp	.+998    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
	{
	case 0:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    18cc:	ab e3       	ldi	r26, 0x3B	; 59
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	eb e3       	ldi	r30, 0x3B	; 59
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	82 60       	ori	r24, 0x02	; 2
    18d8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    18da:	ab e3       	ldi	r26, 0x3B	; 59
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	eb e3       	ldi	r30, 0x3B	; 59
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	84 60       	ori	r24, 0x04	; 4
    18e6:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    18e8:	ab e3       	ldi	r26, 0x3B	; 59
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	eb e3       	ldi	r30, 0x3B	; 59
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 60       	ori	r24, 0x08	; 8
    18f4:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    18f6:	ab e3       	ldi	r26, 0x3B	; 59
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 61       	ori	r24, 0x10	; 16
    1902:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1904:	ab e3       	ldi	r26, 0x3B	; 59
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	eb e3       	ldi	r30, 0x3B	; 59
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1912:	ab e3       	ldi	r26, 0x3B	; 59
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e3       	ldi	r30, 0x3B	; 59
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 64       	ori	r24, 0x40	; 64
    191e:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1920:	ab e3       	ldi	r26, 0x3B	; 59
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	eb e3       	ldi	r30, 0x3B	; 59
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	8c 93       	st	X, r24
    192e:	c1 c1       	rjmp	.+898    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 1:
		MYPORT &= ~(1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1930:	ab e3       	ldi	r26, 0x3B	; 59
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	eb e3       	ldi	r30, 0x3B	; 59
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8d 7f       	andi	r24, 0xFD	; 253
    193c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    193e:	ab e3       	ldi	r26, 0x3B	; 59
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	eb e3       	ldi	r30, 0x3B	; 59
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	84 60       	ori	r24, 0x04	; 4
    194a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    194c:	ab e3       	ldi	r26, 0x3B	; 59
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	eb e3       	ldi	r30, 0x3B	; 59
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	88 60       	ori	r24, 0x08	; 8
    1958:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    195a:	ab e3       	ldi	r26, 0x3B	; 59
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	eb e3       	ldi	r30, 0x3B	; 59
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8f 7e       	andi	r24, 0xEF	; 239
    1966:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1968:	ab e3       	ldi	r26, 0x3B	; 59
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	eb e3       	ldi	r30, 0x3B	; 59
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 7d       	andi	r24, 0xDF	; 223
    1974:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1976:	ab e3       	ldi	r26, 0x3B	; 59
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	eb e3       	ldi	r30, 0x3B	; 59
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 7b       	andi	r24, 0xBF	; 191
    1982:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1984:	ab e3       	ldi	r26, 0x3B	; 59
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 77       	andi	r24, 0x7F	; 127
    1990:	8c 93       	st	X, r24
    1992:	8f c1       	rjmp	.+798    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 2:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1994:	ab e3       	ldi	r26, 0x3B	; 59
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	eb e3       	ldi	r30, 0x3B	; 59
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    19a2:	ab e3       	ldi	r26, 0x3B	; 59
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	eb e3       	ldi	r30, 0x3B	; 59
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	84 60       	ori	r24, 0x04	; 4
    19ae:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    19b0:	ab e3       	ldi	r26, 0x3B	; 59
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	eb e3       	ldi	r30, 0x3B	; 59
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	87 7f       	andi	r24, 0xF7	; 247
    19bc:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    19be:	ab e3       	ldi	r26, 0x3B	; 59
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	80 61       	ori	r24, 0x10	; 16
    19ca:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    19cc:	ab e3       	ldi	r26, 0x3B	; 59
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	eb e3       	ldi	r30, 0x3B	; 59
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	80 62       	ori	r24, 0x20	; 32
    19d8:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    19da:	ab e3       	ldi	r26, 0x3B	; 59
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	eb e3       	ldi	r30, 0x3B	; 59
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7b       	andi	r24, 0xBF	; 191
    19e6:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    19e8:	ab e3       	ldi	r26, 0x3B	; 59
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e3       	ldi	r30, 0x3B	; 59
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 68       	ori	r24, 0x80	; 128
    19f4:	8c 93       	st	X, r24
    19f6:	5d c1       	rjmp	.+698    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 3:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    19f8:	ab e3       	ldi	r26, 0x3B	; 59
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e3       	ldi	r30, 0x3B	; 59
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1a06:	ab e3       	ldi	r26, 0x3B	; 59
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	eb e3       	ldi	r30, 0x3B	; 59
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	84 60       	ori	r24, 0x04	; 4
    1a12:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1a14:	ab e3       	ldi	r26, 0x3B	; 59
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	88 60       	ori	r24, 0x08	; 8
    1a20:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1a22:	ab e3       	ldi	r26, 0x3B	; 59
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	eb e3       	ldi	r30, 0x3B	; 59
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 61       	ori	r24, 0x10	; 16
    1a2e:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1a30:	ab e3       	ldi	r26, 0x3B	; 59
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 7d       	andi	r24, 0xDF	; 223
    1a3c:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1a3e:	ab e3       	ldi	r26, 0x3B	; 59
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	eb e3       	ldi	r30, 0x3B	; 59
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8f 7b       	andi	r24, 0xBF	; 191
    1a4a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1a4c:	ab e3       	ldi	r26, 0x3B	; 59
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	eb e3       	ldi	r30, 0x3B	; 59
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 68       	ori	r24, 0x80	; 128
    1a58:	8c 93       	st	X, r24
    1a5a:	2b c1       	rjmp	.+598    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 4:
		MYPORT &= ~(1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1a5c:	ab e3       	ldi	r26, 0x3B	; 59
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	eb e3       	ldi	r30, 0x3B	; 59
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8d 7f       	andi	r24, 0xFD	; 253
    1a68:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	84 60       	ori	r24, 0x04	; 4
    1a76:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 60       	ori	r24, 0x08	; 8
    1a84:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1a86:	ab e3       	ldi	r26, 0x3B	; 59
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	eb e3       	ldi	r30, 0x3B	; 59
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7e       	andi	r24, 0xEF	; 239
    1a92:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1a94:	ab e3       	ldi	r26, 0x3B	; 59
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	eb e3       	ldi	r30, 0x3B	; 59
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8f 7d       	andi	r24, 0xDF	; 223
    1aa0:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1aa2:	ab e3       	ldi	r26, 0x3B	; 59
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	eb e3       	ldi	r30, 0x3B	; 59
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 64       	ori	r24, 0x40	; 64
    1aae:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1ab0:	ab e3       	ldi	r26, 0x3B	; 59
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	eb e3       	ldi	r30, 0x3B	; 59
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 68       	ori	r24, 0x80	; 128
    1abc:	8c 93       	st	X, r24
    1abe:	f9 c0       	rjmp	.+498    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 5:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1ace:	ab e3       	ldi	r26, 0x3B	; 59
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	eb e3       	ldi	r30, 0x3B	; 59
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8b 7f       	andi	r24, 0xFB	; 251
    1ada:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1adc:	ab e3       	ldi	r26, 0x3B	; 59
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	eb e3       	ldi	r30, 0x3B	; 59
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 60       	ori	r24, 0x08	; 8
    1ae8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1aea:	ab e3       	ldi	r26, 0x3B	; 59
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 61       	ori	r24, 0x10	; 16
    1af6:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1af8:	ab e3       	ldi	r26, 0x3B	; 59
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 7d       	andi	r24, 0xDF	; 223
    1b04:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1b06:	ab e3       	ldi	r26, 0x3B	; 59
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	eb e3       	ldi	r30, 0x3B	; 59
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	80 64       	ori	r24, 0x40	; 64
    1b12:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1b14:	ab e3       	ldi	r26, 0x3B	; 59
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	eb e3       	ldi	r30, 0x3B	; 59
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 68       	ori	r24, 0x80	; 128
    1b20:	8c 93       	st	X, r24
    1b22:	c7 c0       	rjmp	.+398    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 6:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1b24:	ab e3       	ldi	r26, 0x3B	; 59
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	eb e3       	ldi	r30, 0x3B	; 59
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	82 60       	ori	r24, 0x02	; 2
    1b30:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1b32:	ab e3       	ldi	r26, 0x3B	; 59
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8b 7f       	andi	r24, 0xFB	; 251
    1b3e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1b40:	ab e3       	ldi	r26, 0x3B	; 59
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	88 60       	ori	r24, 0x08	; 8
    1b4c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1b4e:	ab e3       	ldi	r26, 0x3B	; 59
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 61       	ori	r24, 0x10	; 16
    1b5a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1b5c:	ab e3       	ldi	r26, 0x3B	; 59
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	eb e3       	ldi	r30, 0x3B	; 59
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 62       	ori	r24, 0x20	; 32
    1b68:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1b6a:	ab e3       	ldi	r26, 0x3B	; 59
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	eb e3       	ldi	r30, 0x3B	; 59
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 64       	ori	r24, 0x40	; 64
    1b76:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1b78:	ab e3       	ldi	r26, 0x3B	; 59
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e3       	ldi	r30, 0x3B	; 59
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 68       	ori	r24, 0x80	; 128
    1b84:	8c 93       	st	X, r24
    1b86:	95 c0       	rjmp	.+298    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 7:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1b88:	ab e3       	ldi	r26, 0x3B	; 59
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	eb e3       	ldi	r30, 0x3B	; 59
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	82 60       	ori	r24, 0x02	; 2
    1b94:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1b96:	ab e3       	ldi	r26, 0x3B	; 59
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	eb e3       	ldi	r30, 0x3B	; 59
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	84 60       	ori	r24, 0x04	; 4
    1ba2:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1ba4:	ab e3       	ldi	r26, 0x3B	; 59
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	eb e3       	ldi	r30, 0x3B	; 59
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 60       	ori	r24, 0x08	; 8
    1bb0:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	8f 7e       	andi	r24, 0xEF	; 239
    1bbe:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1bc0:	ab e3       	ldi	r26, 0x3B	; 59
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	eb e3       	ldi	r30, 0x3B	; 59
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8f 7d       	andi	r24, 0xDF	; 223
    1bcc:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1bce:	ab e3       	ldi	r26, 0x3B	; 59
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	eb e3       	ldi	r30, 0x3B	; 59
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8f 7b       	andi	r24, 0xBF	; 191
    1bda:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1bdc:	ab e3       	ldi	r26, 0x3B	; 59
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8f 77       	andi	r24, 0x7F	; 127
    1be8:	8c 93       	st	X, r24
    1bea:	63 c0       	rjmp	.+198    	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 8:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1bec:	ab e3       	ldi	r26, 0x3B	; 59
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	eb e3       	ldi	r30, 0x3B	; 59
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	84 60       	ori	r24, 0x04	; 4
    1c06:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 60       	ori	r24, 0x08	; 8
    1c14:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1c16:	ab e3       	ldi	r26, 0x3B	; 59
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	eb e3       	ldi	r30, 0x3B	; 59
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 61       	ori	r24, 0x10	; 16
    1c22:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1c24:	ab e3       	ldi	r26, 0x3B	; 59
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	eb e3       	ldi	r30, 0x3B	; 59
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 62       	ori	r24, 0x20	; 32
    1c30:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1c32:	ab e3       	ldi	r26, 0x3B	; 59
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	eb e3       	ldi	r30, 0x3B	; 59
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 64       	ori	r24, 0x40	; 64
    1c3e:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1c40:	ab e3       	ldi	r26, 0x3B	; 59
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	eb e3       	ldi	r30, 0x3B	; 59
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	80 68       	ori	r24, 0x80	; 128
    1c4c:	8c 93       	st	X, r24
    1c4e:	31 c0       	rjmp	.+98     	; 0x1cb2 <SEVEN_SEGMENT_CATHODE+0x498>
		break;
	case 9:
		MYPORT |= (1<<SEVEN_SEGMENT_FIRST_PIN_ID);
    1c50:	ab e3       	ldi	r26, 0x3B	; 59
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	eb e3       	ldi	r30, 0x3B	; 59
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	82 60       	ori	r24, 0x02	; 2
    1c5c:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+1));
    1c5e:	ab e3       	ldi	r26, 0x3B	; 59
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	eb e3       	ldi	r30, 0x3B	; 59
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	84 60       	ori	r24, 0x04	; 4
    1c6a:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+2));
    1c6c:	ab e3       	ldi	r26, 0x3B	; 59
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	eb e3       	ldi	r30, 0x3B	; 59
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	88 60       	ori	r24, 0x08	; 8
    1c78:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+3));
    1c7a:	ab e3       	ldi	r26, 0x3B	; 59
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	eb e3       	ldi	r30, 0x3B	; 59
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8f 7e       	andi	r24, 0xEF	; 239
    1c86:	8c 93       	st	X, r24
		MYPORT &= ~(1<<(SEVEN_SEGMENT_FIRST_PIN_ID+4));
    1c88:	ab e3       	ldi	r26, 0x3B	; 59
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	eb e3       	ldi	r30, 0x3B	; 59
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7d       	andi	r24, 0xDF	; 223
    1c94:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+5));
    1c96:	ab e3       	ldi	r26, 0x3B	; 59
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	eb e3       	ldi	r30, 0x3B	; 59
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 64       	ori	r24, 0x40	; 64
    1ca2:	8c 93       	st	X, r24
		MYPORT |= (1<<(SEVEN_SEGMENT_FIRST_PIN_ID+6));
    1ca4:	ab e3       	ldi	r26, 0x3B	; 59
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	eb e3       	ldi	r30, 0x3B	; 59
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	8c 93       	st	X, r24
		break;
	}
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <DcMotor_Init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/PWM0/pwm0.h"


void DcMotor_Init(void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, PIN_OUTPUT); /* Input1 */
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, PIN_OUTPUT); /* Inupt2 */
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <DcMotor_Rotate+0x6>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	6a 83       	std	Y+2, r22	; 0x02
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN1, GET_BIT(state,0));
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	98 2f       	mov	r25, r24
    1d1a:	91 70       	andi	r25, 0x01	; 1
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	49 2f       	mov	r20, r25
    1d22:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN_IN2, GET_BIT(state,1));
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	86 95       	lsr	r24
    1d2a:	98 2f       	mov	r25, r24
    1d2c:	91 70       	andi	r25, 0x01	; 1
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	49 2f       	mov	r20, r25
    1d34:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>

	PWM_Timer0_Start(speed);
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Timer0_Start>
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <LM35_getTemperature>:
#include "lm35_sensor.h"
#include "../../MCAL/ADC/adc.h"


uint8 LM35_getTemperature(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <LM35_getTemperature+0x6>
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
	uint8 lm35_value;

	uint16 adc_value;

	adc_value = ADC_readChannel(LM35_CHANNEL_ID);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	0e 94 9a 0b 	call	0x1734	; 0x1734 <ADC_readChannel>
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01

	lm35_value = (uint8)(((uint32)adc_value*ADC_REF_VOLT_VALUE*LM35_MAX_TEMPERATURE)/(ADC_MAXIMUM_VALUE*LM35_MAX_VOLT_VALUE));
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	cc 01       	movw	r24, r24
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	2e ee       	ldi	r18, 0xEE	; 238
    1d6a:	32 e0       	ldi	r19, 0x02	; 2
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__mulsi3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 ed       	ldi	r19, 0xD0	; 208
    1d90:	4f eb       	ldi	r20, 0xBF	; 191
    1d92:	54 e4       	ldi	r21, 0x44	; 68
    1d94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8b 83       	std	Y+3, r24	; 0x03

	return lm35_value;
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	2e 97       	sbiw	r28, 0x0e	; 14
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 ea       	ldi	r26, 0xA0	; 160
    1de6:	b1 e4       	ldi	r27, 0x41	; 65
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
    1dea:	9c 87       	std	Y+12, r25	; 0x0c
    1dec:	ad 87       	std	Y+13, r26	; 0x0d
    1dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a e7       	ldi	r20, 0x7A	; 122
    1dfe:	55 e4       	ldi	r21, 0x45	; 69
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8f 83       	std	Y+7, r24	; 0x07
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	a9 87       	std	Y+9, r26	; 0x09
    1e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <LCD_init+0x7a>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_init+0xda>
    1e74:	80 e9       	ldi	r24, 0x90	; 144
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_init+0xc8>
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <LCD_init+0xbc>
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_init+0x104>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	63 e0       	ldi	r22, 0x03	; 3
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	64 e0       	ldi	r22, 0x04	; 4
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	65 e0       	ldi	r22, 0x05	; 5
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	66 e0       	ldi	r22, 0x06	; 6
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1eec:	83 e3       	ldi	r24, 0x33	; 51
    1eee:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1ef2:	82 e3       	ldi	r24, 0x32	; 50
    1ef4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1ef8:	88 e2       	ldi	r24, 0x28	; 40
    1efa:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1efe:	8c e0       	ldi	r24, 0x0C	; 12
    1f00:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
}
    1f0a:	2e 96       	adiw	r28, 0x0e	; 14
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	c3 56       	subi	r28, 0x63	; 99
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	fe 01       	movw	r30, r28
    1f38:	ed 59       	subi	r30, 0x9D	; 157
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e1 5a       	subi	r30, 0xA1	; 161
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e8       	ldi	r26, 0x80	; 128
    1f54:	bf e3       	ldi	r27, 0x3F	; 63
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	05 5a       	subi	r16, 0xA5	; 165
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e1 5a       	subi	r30, 0xA1	; 161
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a e7       	ldi	r20, 0x7A	; 122
    1f78:	55 e4       	ldi	r21, 0x45	; 69
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 83       	st	Z, r24
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	a2 83       	std	Z+2, r26	; 0x02
    1f8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e5 5a       	subi	r30, 0xA5	; 165
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	44 f4       	brge	.+16     	; 0x1fba <LCD_sendCommand+0x9e>
		__ticks = 1;
    1faa:	fe 01       	movw	r30, r28
    1fac:	e7 5a       	subi	r30, 0xA7	; 167
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	64 c0       	rjmp	.+200    	; 0x2082 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e5 5a       	subi	r30, 0xA5	; 165
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	0c f0       	brlt	.+2      	; 0x1fda <LCD_sendCommand+0xbe>
    1fd8:	43 c0       	rjmp	.+134    	; 0x2060 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e1 5a       	subi	r30, 0xA1	; 161
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e2       	ldi	r20, 0x20	; 32
    1fee:	51 e4       	ldi	r21, 0x41	; 65
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8e 01       	movw	r16, r28
    1ffa:	07 5a       	subi	r16, 0xA7	; 167
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	f8 01       	movw	r30, r16
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	80 83       	st	Z, r24
    2010:	1f c0       	rjmp	.+62     	; 0x2050 <LCD_sendCommand+0x134>
    2012:	fe 01       	movw	r30, r28
    2014:	e9 5a       	subi	r30, 0xA9	; 169
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 e9       	ldi	r24, 0x90	; 144
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
    2020:	fe 01       	movw	r30, r28
    2022:	e9 5a       	subi	r30, 0xA9	; 169
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_sendCommand+0x10e>
    202e:	fe 01       	movw	r30, r28
    2030:	e9 5a       	subi	r30, 0xA9	; 169
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2038:	de 01       	movw	r26, r28
    203a:	a7 5a       	subi	r26, 0xA7	; 167
    203c:	bf 4f       	sbci	r27, 0xFF	; 255
    203e:	fe 01       	movw	r30, r28
    2040:	e7 5a       	subi	r30, 0xA7	; 167
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	fe 01       	movw	r30, r28
    2052:	e7 5a       	subi	r30, 0xA7	; 167
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	d1 f6       	brne	.-76     	; 0x2012 <LCD_sendCommand+0xf6>
    205e:	27 c0       	rjmp	.+78     	; 0x20ae <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	8e 01       	movw	r16, r28
    2062:	07 5a       	subi	r16, 0xA7	; 167
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	e5 5a       	subi	r30, 0xA5	; 165
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	60 81       	ld	r22, Z
    206e:	71 81       	ldd	r23, Z+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	93 81       	ldd	r25, Z+3	; 0x03
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	f8 01       	movw	r30, r16
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	de 01       	movw	r26, r28
    2084:	ab 5a       	subi	r26, 0xAB	; 171
    2086:	bf 4f       	sbci	r27, 0xFF	; 255
    2088:	fe 01       	movw	r30, r28
    208a:	e7 5a       	subi	r30, 0xA7	; 167
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	8d 93       	st	X+, r24
    2094:	9c 93       	st	X, r25
    2096:	fe 01       	movw	r30, r28
    2098:	eb 5a       	subi	r30, 0xAB	; 171
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_sendCommand+0x184>
    20a4:	fe 01       	movw	r30, r28
    20a6:	eb 5a       	subi	r30, 0xAB	; 171
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	62 e0       	ldi	r22, 0x02	; 2
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    20b8:	fe 01       	movw	r30, r28
    20ba:	ef 5a       	subi	r30, 0xAF	; 175
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	8e 01       	movw	r16, r28
    20d0:	03 5b       	subi	r16, 0xB3	; 179
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	fe 01       	movw	r30, r28
    20d6:	ef 5a       	subi	r30, 0xAF	; 175
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	55 e4       	ldi	r21, 0x45	; 69
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	f8 01       	movw	r30, r16
    20f4:	80 83       	st	Z, r24
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	a2 83       	std	Z+2, r26	; 0x02
    20fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20fc:	fe 01       	movw	r30, r28
    20fe:	e3 5b       	subi	r30, 0xB3	; 179
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	44 f4       	brge	.+16     	; 0x212a <LCD_sendCommand+0x20e>
		__ticks = 1;
    211a:	fe 01       	movw	r30, r28
    211c:	e5 5b       	subi	r30, 0xB5	; 181
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	64 c0       	rjmp	.+200    	; 0x21f2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    212a:	fe 01       	movw	r30, r28
    212c:	e3 5b       	subi	r30, 0xB3	; 179
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	3f ef       	ldi	r19, 0xFF	; 255
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	57 e4       	ldi	r21, 0x47	; 71
    2140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2144:	18 16       	cp	r1, r24
    2146:	0c f0       	brlt	.+2      	; 0x214a <LCD_sendCommand+0x22e>
    2148:	43 c0       	rjmp	.+134    	; 0x21d0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	fe 01       	movw	r30, r28
    214c:	ef 5a       	subi	r30, 0xAF	; 175
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8e 01       	movw	r16, r28
    216a:	05 5b       	subi	r16, 0xB5	; 181
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	f8 01       	movw	r30, r16
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	1f c0       	rjmp	.+62     	; 0x21c0 <LCD_sendCommand+0x2a4>
    2182:	fe 01       	movw	r30, r28
    2184:	e7 5b       	subi	r30, 0xB7	; 183
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 e9       	ldi	r24, 0x90	; 144
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	fe 01       	movw	r30, r28
    2192:	e7 5b       	subi	r30, 0xB7	; 183
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_sendCommand+0x27e>
    219e:	fe 01       	movw	r30, r28
    21a0:	e7 5b       	subi	r30, 0xB7	; 183
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a8:	de 01       	movw	r26, r28
    21aa:	a5 5b       	subi	r26, 0xB5	; 181
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	e5 5b       	subi	r30, 0xB5	; 181
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	9c 93       	st	X, r25
    21be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e5 5b       	subi	r30, 0xB5	; 181
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	d1 f6       	brne	.-76     	; 0x2182 <LCD_sendCommand+0x266>
    21ce:	27 c0       	rjmp	.+78     	; 0x221e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	8e 01       	movw	r16, r28
    21d2:	05 5b       	subi	r16, 0xB5	; 181
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	e3 5b       	subi	r30, 0xB3	; 179
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	f8 01       	movw	r30, r16
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
    21f2:	de 01       	movw	r26, r28
    21f4:	a9 5b       	subi	r26, 0xB9	; 185
    21f6:	bf 4f       	sbci	r27, 0xFF	; 255
    21f8:	fe 01       	movw	r30, r28
    21fa:	e5 5b       	subi	r30, 0xB5	; 181
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	8d 93       	st	X+, r24
    2204:	9c 93       	st	X, r25
    2206:	fe 01       	movw	r30, r28
    2208:	e9 5b       	subi	r30, 0xB9	; 185
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_sendCommand+0x2f4>
    2214:	fe 01       	movw	r30, r28
    2216:	e9 5b       	subi	r30, 0xB9	; 185
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,4));
    221e:	fe 01       	movw	r30, r28
    2220:	ed 59       	subi	r30, 0x9D	; 157
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	82 95       	swap	r24
    2228:	8f 70       	andi	r24, 0x0F	; 15
    222a:	98 2f       	mov	r25, r24
    222c:	91 70       	andi	r25, 0x01	; 1
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	63 e0       	ldi	r22, 0x03	; 3
    2232:	49 2f       	mov	r20, r25
    2234:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,5));
    2238:	fe 01       	movw	r30, r28
    223a:	ed 59       	subi	r30, 0x9D	; 157
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	82 95       	swap	r24
    2242:	86 95       	lsr	r24
    2244:	87 70       	andi	r24, 0x07	; 7
    2246:	98 2f       	mov	r25, r24
    2248:	91 70       	andi	r25, 0x01	; 1
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	64 e0       	ldi	r22, 0x04	; 4
    224e:	49 2f       	mov	r20, r25
    2250:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,6));
    2254:	fe 01       	movw	r30, r28
    2256:	ed 59       	subi	r30, 0x9D	; 157
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	82 95       	swap	r24
    225e:	86 95       	lsr	r24
    2260:	86 95       	lsr	r24
    2262:	83 70       	andi	r24, 0x03	; 3
    2264:	98 2f       	mov	r25, r24
    2266:	91 70       	andi	r25, 0x01	; 1
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	65 e0       	ldi	r22, 0x05	; 5
    226c:	49 2f       	mov	r20, r25
    226e:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,7));
    2272:	fe 01       	movw	r30, r28
    2274:	ed 59       	subi	r30, 0x9D	; 157
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	98 2f       	mov	r25, r24
    227c:	99 1f       	adc	r25, r25
    227e:	99 27       	eor	r25, r25
    2280:	99 1f       	adc	r25, r25
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	66 e0       	ldi	r22, 0x06	; 6
    2286:	49 2f       	mov	r20, r25
    2288:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    228c:	fe 01       	movw	r30, r28
    228e:	ed 5b       	subi	r30, 0xBD	; 189
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e8       	ldi	r26, 0x80	; 128
    2298:	bf e3       	ldi	r27, 0x3F	; 63
    229a:	80 83       	st	Z, r24
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	a2 83       	std	Z+2, r26	; 0x02
    22a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	8e 01       	movw	r16, r28
    22a4:	01 5c       	subi	r16, 0xC1	; 193
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	fe 01       	movw	r30, r28
    22aa:	ed 5b       	subi	r30, 0xBD	; 189
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a e7       	ldi	r20, 0x7A	; 122
    22bc:	55 e4       	ldi	r21, 0x45	; 69
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	f8 01       	movw	r30, r16
    22c8:	80 83       	st	Z, r24
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	a2 83       	std	Z+2, r26	; 0x02
    22ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d0:	fe 01       	movw	r30, r28
    22d2:	ff 96       	adiw	r30, 0x3f	; 63
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_sendCommand+0x3da>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e af       	std	Y+62, r25	; 0x3e
    22f2:	8d af       	std	Y+61, r24	; 0x3d
    22f4:	46 c0       	rjmp	.+140    	; 0x2382 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    22f6:	fe 01       	movw	r30, r28
    22f8:	ff 96       	adiw	r30, 0x3f	; 63
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	64 f5       	brge	.+88     	; 0x236a <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	fe 01       	movw	r30, r28
    2314:	ed 5b       	subi	r30, 0xBD	; 189
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e af       	std	Y+62, r25	; 0x3e
    233e:	8d af       	std	Y+61, r24	; 0x3d
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_sendCommand+0x444>
    2342:	80 e9       	ldi	r24, 0x90	; 144
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	9c af       	std	Y+60, r25	; 0x3c
    2348:	8b af       	std	Y+59, r24	; 0x3b
    234a:	8b ad       	ldd	r24, Y+59	; 0x3b
    234c:	9c ad       	ldd	r25, Y+60	; 0x3c
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_sendCommand+0x432>
    2352:	9c af       	std	Y+60, r25	; 0x3c
    2354:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d ad       	ldd	r24, Y+61	; 0x3d
    2358:	9e ad       	ldd	r25, Y+62	; 0x3e
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e af       	std	Y+62, r25	; 0x3e
    235e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d ad       	ldd	r24, Y+61	; 0x3d
    2362:	9e ad       	ldd	r25, Y+62	; 0x3e
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_sendCommand+0x426>
    2368:	16 c0       	rjmp	.+44     	; 0x2396 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	fe 01       	movw	r30, r28
    236c:	ff 96       	adiw	r30, 0x3f	; 63
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9e af       	std	Y+62, r25	; 0x3e
    2380:	8d af       	std	Y+61, r24	; 0x3d
    2382:	8d ad       	ldd	r24, Y+61	; 0x3d
    2384:	9e ad       	ldd	r25, Y+62	; 0x3e
    2386:	9a af       	std	Y+58, r25	; 0x3a
    2388:	89 af       	std	Y+57, r24	; 0x39
    238a:	89 ad       	ldd	r24, Y+57	; 0x39
    238c:	9a ad       	ldd	r25, Y+58	; 0x3a
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_sendCommand+0x472>
    2392:	9a af       	std	Y+58, r25	; 0x3a
    2394:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	62 e0       	ldi	r22, 0x02	; 2
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	8d ab       	std	Y+53, r24	; 0x35
    23aa:	9e ab       	std	Y+54, r25	; 0x36
    23ac:	af ab       	std	Y+55, r26	; 0x37
    23ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	6d a9       	ldd	r22, Y+53	; 0x35
    23b2:	7e a9       	ldd	r23, Y+54	; 0x36
    23b4:	8f a9       	ldd	r24, Y+55	; 0x37
    23b6:	98 ad       	ldd	r25, Y+56	; 0x38
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	55 e4       	ldi	r21, 0x45	; 69
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	89 ab       	std	Y+49, r24	; 0x31
    23ca:	9a ab       	std	Y+50, r25	; 0x32
    23cc:	ab ab       	std	Y+51, r26	; 0x33
    23ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	98 ab       	std	Y+48, r25	; 0x30
    23ee:	8f a7       	std	Y+47, r24	; 0x2f
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    23f2:	69 a9       	ldd	r22, Y+49	; 0x31
    23f4:	7a a9       	ldd	r23, Y+50	; 0x32
    23f6:	8b a9       	ldd	r24, Y+51	; 0x33
    23f8:	9c a9       	ldd	r25, Y+52	; 0x34
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	6d a9       	ldd	r22, Y+53	; 0x35
    240c:	7e a9       	ldd	r23, Y+54	; 0x36
    240e:	8f a9       	ldd	r24, Y+55	; 0x37
    2410:	98 ad       	ldd	r25, Y+56	; 0x38
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	98 ab       	std	Y+48, r25	; 0x30
    2430:	8f a7       	std	Y+47, r24	; 0x2f
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <LCD_sendCommand+0x536>
    2434:	80 e9       	ldi	r24, 0x90	; 144
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	9e a7       	std	Y+46, r25	; 0x2e
    243a:	8d a7       	std	Y+45, r24	; 0x2d
    243c:	8d a5       	ldd	r24, Y+45	; 0x2d
    243e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_sendCommand+0x524>
    2444:	9e a7       	std	Y+46, r25	; 0x2e
    2446:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8f a5       	ldd	r24, Y+47	; 0x2f
    244a:	98 a9       	ldd	r25, Y+48	; 0x30
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8f a5       	ldd	r24, Y+47	; 0x2f
    2454:	98 a9       	ldd	r25, Y+48	; 0x30
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <LCD_sendCommand+0x518>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	69 a9       	ldd	r22, Y+49	; 0x31
    245e:	7a a9       	ldd	r23, Y+50	; 0x32
    2460:	8b a9       	ldd	r24, Y+51	; 0x33
    2462:	9c a9       	ldd	r25, Y+52	; 0x34
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	98 ab       	std	Y+48, r25	; 0x30
    246e:	8f a7       	std	Y+47, r24	; 0x2f
    2470:	8f a5       	ldd	r24, Y+47	; 0x2f
    2472:	98 a9       	ldd	r25, Y+48	; 0x30
    2474:	9c a7       	std	Y+44, r25	; 0x2c
    2476:	8b a7       	std	Y+43, r24	; 0x2b
    2478:	8b a5       	ldd	r24, Y+43	; 0x2b
    247a:	9c a5       	ldd	r25, Y+44	; 0x2c
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_sendCommand+0x560>
    2480:	9c a7       	std	Y+44, r25	; 0x2c
    2482:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	8f a3       	std	Y+39, r24	; 0x27
    2498:	98 a7       	std	Y+40, r25	; 0x28
    249a:	a9 a7       	std	Y+41, r26	; 0x29
    249c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6f a1       	ldd	r22, Y+39	; 0x27
    24a0:	78 a5       	ldd	r23, Y+40	; 0x28
    24a2:	89 a5       	ldd	r24, Y+41	; 0x29
    24a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a e7       	ldi	r20, 0x7A	; 122
    24ac:	55 e4       	ldi	r21, 0x45	; 69
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8b a3       	std	Y+35, r24	; 0x23
    24b8:	9c a3       	std	Y+36, r25	; 0x24
    24ba:	ad a3       	std	Y+37, r26	; 0x25
    24bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24be:	6b a1       	ldd	r22, Y+35	; 0x23
    24c0:	7c a1       	ldd	r23, Y+36	; 0x24
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9a a3       	std	Y+34, r25	; 0x22
    24dc:	89 a3       	std	Y+33, r24	; 0x21
    24de:	3f c0       	rjmp	.+126    	; 0x255e <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    24e0:	6b a1       	ldd	r22, Y+35	; 0x23
    24e2:	7c a1       	ldd	r23, Y+36	; 0x24
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	9e a1       	ldd	r25, Y+38	; 0x26
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6f a1       	ldd	r22, Y+39	; 0x27
    24fa:	78 a5       	ldd	r23, Y+40	; 0x28
    24fc:	89 a5       	ldd	r24, Y+41	; 0x29
    24fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9a a3       	std	Y+34, r25	; 0x22
    251e:	89 a3       	std	Y+33, r24	; 0x21
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <LCD_sendCommand+0x624>
    2522:	80 e9       	ldi	r24, 0x90	; 144
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
    252a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252c:	98 a1       	ldd	r25, Y+32	; 0x20
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_sendCommand+0x612>
    2532:	98 a3       	std	Y+32, r25	; 0x20
    2534:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	89 a1       	ldd	r24, Y+33	; 0x21
    2542:	9a a1       	ldd	r25, Y+34	; 0x22
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <LCD_sendCommand+0x606>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9a a3       	std	Y+34, r25	; 0x22
    255c:	89 a3       	std	Y+33, r24	; 0x21
    255e:	89 a1       	ldd	r24, Y+33	; 0x21
    2560:	9a a1       	ldd	r25, Y+34	; 0x22
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
    2566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2568:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_sendCommand+0x64e>
    256e:	9e 8f       	std	Y+30, r25	; 0x1e
    2570:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,0));
    2572:	fe 01       	movw	r30, r28
    2574:	ed 59       	subi	r30, 0x9D	; 157
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	98 2f       	mov	r25, r24
    257c:	91 70       	andi	r25, 0x01	; 1
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	63 e0       	ldi	r22, 0x03	; 3
    2582:	49 2f       	mov	r20, r25
    2584:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
    2588:	fe 01       	movw	r30, r28
    258a:	ed 59       	subi	r30, 0x9D	; 157
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	86 95       	lsr	r24
    2592:	98 2f       	mov	r25, r24
    2594:	91 70       	andi	r25, 0x01	; 1
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	64 e0       	ldi	r22, 0x04	; 4
    259a:	49 2f       	mov	r20, r25
    259c:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
    25a0:	fe 01       	movw	r30, r28
    25a2:	ed 59       	subi	r30, 0x9D	; 157
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	86 95       	lsr	r24
    25aa:	86 95       	lsr	r24
    25ac:	98 2f       	mov	r25, r24
    25ae:	91 70       	andi	r25, 0x01	; 1
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	65 e0       	ldi	r22, 0x05	; 5
    25b4:	49 2f       	mov	r20, r25
    25b6:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));
    25ba:	fe 01       	movw	r30, r28
    25bc:	ed 59       	subi	r30, 0x9D	; 157
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	86 95       	lsr	r24
    25c4:	86 95       	lsr	r24
    25c6:	86 95       	lsr	r24
    25c8:	98 2f       	mov	r25, r24
    25ca:	91 70       	andi	r25, 0x01	; 1
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	66 e0       	ldi	r22, 0x06	; 6
    25d0:	49 2f       	mov	r20, r25
    25d2:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e8       	ldi	r26, 0x80	; 128
    25dc:	bf e3       	ldi	r27, 0x3F	; 63
    25de:	89 8f       	std	Y+25, r24	; 0x19
    25e0:	9a 8f       	std	Y+26, r25	; 0x1a
    25e2:	ab 8f       	std	Y+27, r26	; 0x1b
    25e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	69 8d       	ldd	r22, Y+25	; 0x19
    25e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a e7       	ldi	r20, 0x7A	; 122
    25f4:	55 e4       	ldi	r21, 0x45	; 69
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8d 8b       	std	Y+21, r24	; 0x15
    2600:	9e 8b       	std	Y+22, r25	; 0x16
    2602:	af 8b       	std	Y+23, r26	; 0x17
    2604:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2606:	6d 89       	ldd	r22, Y+21	; 0x15
    2608:	7e 89       	ldd	r23, Y+22	; 0x16
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	98 8d       	ldd	r25, Y+24	; 0x18
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <LCD_sendCommand+0x70c>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	69 8d       	ldd	r22, Y+25	; 0x19
    2642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9c 8b       	std	Y+20, r25	; 0x14
    2666:	8b 8b       	std	Y+19, r24	; 0x13
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <LCD_sendCommand+0x76c>
    266a:	80 e9       	ldi	r24, 0x90	; 144
    266c:	91 e0       	ldi	r25, 0x01	; 1
    266e:	9a 8b       	std	Y+18, r25	; 0x12
    2670:	89 8b       	std	Y+17, r24	; 0x11
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	9a 89       	ldd	r25, Y+18	; 0x12
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_sendCommand+0x75a>
    267a:	9a 8b       	std	Y+18, r25	; 0x12
    267c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8b 89       	ldd	r24, Y+19	; 0x13
    2680:	9c 89       	ldd	r25, Y+20	; 0x14
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9c 8b       	std	Y+20, r25	; 0x14
    2686:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8b 89       	ldd	r24, Y+19	; 0x13
    268a:	9c 89       	ldd	r25, Y+20	; 0x14
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <LCD_sendCommand+0x74e>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	98 8b       	std	Y+16, r25	; 0x10
    26ac:	8f 87       	std	Y+15, r24	; 0x0f
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	98 89       	ldd	r25, Y+16	; 0x10
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_sendCommand+0x796>
    26b6:	98 8b       	std	Y+16, r25	; 0x10
    26b8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a0 e8       	ldi	r26, 0x80	; 128
    26ca:	bf e3       	ldi	r27, 0x3F	; 63
    26cc:	8b 87       	std	Y+11, r24	; 0x0b
    26ce:	9c 87       	std	Y+12, r25	; 0x0c
    26d0:	ad 87       	std	Y+13, r26	; 0x0d
    26d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a e7       	ldi	r20, 0x7A	; 122
    26e2:	55 e4       	ldi	r21, 0x45	; 69
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8f 83       	std	Y+7, r24	; 0x07
    26ee:	98 87       	std	Y+8, r25	; 0x08
    26f0:	a9 87       	std	Y+9, r26	; 0x09
    26f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2716:	6f 81       	ldd	r22, Y+7	; 0x07
    2718:	78 85       	ldd	r23, Y+8	; 0x08
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2730:	7c 85       	ldd	r23, Y+12	; 0x0c
    2732:	8d 85       	ldd	r24, Y+13	; 0x0d
    2734:	9e 85       	ldd	r25, Y+14	; 0x0e
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <LCD_sendCommand+0x85a>
    2758:	80 e9       	ldi	r24, 0x90	; 144
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_sendCommand+0x848>
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	9e 81       	ldd	r25, Y+6	; 0x06
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <LCD_sendCommand+0x83c>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <LCD_sendCommand+0x884>
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    27a8:	cd 59       	subi	r28, 0x9D	; 157
    27aa:	df 4f       	sbci	r29, 0xFF	; 255
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	08 95       	ret

000027c0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	c3 56       	subi	r28, 0x63	; 99
    27ce:	d0 40       	sbci	r29, 0x00	; 0
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	fe 01       	movw	r30, r28
    27dc:	ed 59       	subi	r30, 0x9D	; 157
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	61 e0       	ldi	r22, 0x01	; 1
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    27ec:	fe 01       	movw	r30, r28
    27ee:	e1 5a       	subi	r30, 0xA1	; 161
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	8e 01       	movw	r16, r28
    2804:	05 5a       	subi	r16, 0xA5	; 165
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	e1 5a       	subi	r30, 0xA1	; 161
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a e7       	ldi	r20, 0x7A	; 122
    281c:	55 e4       	ldi	r21, 0x45	; 69
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	f8 01       	movw	r30, r16
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	a2 83       	std	Z+2, r26	; 0x02
    282e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2830:	fe 01       	movw	r30, r28
    2832:	e5 5a       	subi	r30, 0xA5	; 165
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	44 f4       	brge	.+16     	; 0x285e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    284e:	fe 01       	movw	r30, r28
    2850:	e7 5a       	subi	r30, 0xA7	; 167
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	80 83       	st	Z, r24
    285c:	64 c0       	rjmp	.+200    	; 0x2926 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    285e:	fe 01       	movw	r30, r28
    2860:	e5 5a       	subi	r30, 0xA5	; 165
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	0c f0       	brlt	.+2      	; 0x287e <LCD_displayCharacter+0xbe>
    287c:	43 c0       	rjmp	.+134    	; 0x2904 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	fe 01       	movw	r30, r28
    2880:	e1 5a       	subi	r30, 0xA1	; 161
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	8e 01       	movw	r16, r28
    289e:	07 5a       	subi	r16, 0xA7	; 167
    28a0:	1f 4f       	sbci	r17, 0xFF	; 255
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	f8 01       	movw	r30, r16
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	1f c0       	rjmp	.+62     	; 0x28f4 <LCD_displayCharacter+0x134>
    28b6:	fe 01       	movw	r30, r28
    28b8:	e9 5a       	subi	r30, 0xA9	; 169
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 e9       	ldi	r24, 0x90	; 144
    28be:	91 e0       	ldi	r25, 0x01	; 1
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
    28c4:	fe 01       	movw	r30, r28
    28c6:	e9 5a       	subi	r30, 0xA9	; 169
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_displayCharacter+0x10e>
    28d2:	fe 01       	movw	r30, r28
    28d4:	e9 5a       	subi	r30, 0xA9	; 169
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	de 01       	movw	r26, r28
    28de:	a7 5a       	subi	r26, 0xA7	; 167
    28e0:	bf 4f       	sbci	r27, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	e7 5a       	subi	r30, 0xA7	; 167
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	11 96       	adiw	r26, 0x01	; 1
    28f0:	9c 93       	st	X, r25
    28f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f4:	fe 01       	movw	r30, r28
    28f6:	e7 5a       	subi	r30, 0xA7	; 167
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	d1 f6       	brne	.-76     	; 0x28b6 <LCD_displayCharacter+0xf6>
    2902:	27 c0       	rjmp	.+78     	; 0x2952 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	8e 01       	movw	r16, r28
    2906:	07 5a       	subi	r16, 0xA7	; 167
    2908:	1f 4f       	sbci	r17, 0xFF	; 255
    290a:	fe 01       	movw	r30, r28
    290c:	e5 5a       	subi	r30, 0xA5	; 165
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	f8 01       	movw	r30, r16
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    2926:	de 01       	movw	r26, r28
    2928:	ab 5a       	subi	r26, 0xAB	; 171
    292a:	bf 4f       	sbci	r27, 0xFF	; 255
    292c:	fe 01       	movw	r30, r28
    292e:	e7 5a       	subi	r30, 0xA7	; 167
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 81       	ld	r24, Z
    2934:	91 81       	ldd	r25, Z+1	; 0x01
    2936:	8d 93       	st	X+, r24
    2938:	9c 93       	st	X, r25
    293a:	fe 01       	movw	r30, r28
    293c:	eb 5a       	subi	r30, 0xAB	; 171
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <LCD_displayCharacter+0x184>
    2948:	fe 01       	movw	r30, r28
    294a:	eb 5a       	subi	r30, 0xAB	; 171
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    295c:	fe 01       	movw	r30, r28
    295e:	ef 5a       	subi	r30, 0xAF	; 175
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 e8       	ldi	r26, 0x80	; 128
    2968:	bf e3       	ldi	r27, 0x3F	; 63
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	8e 01       	movw	r16, r28
    2974:	03 5b       	subi	r16, 0xB3	; 179
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	ef 5a       	subi	r30, 0xAF	; 175
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	55 e4       	ldi	r21, 0x45	; 69
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	f8 01       	movw	r30, r16
    2998:	80 83       	st	Z, r24
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	a2 83       	std	Z+2, r26	; 0x02
    299e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a0:	fe 01       	movw	r30, r28
    29a2:	e3 5b       	subi	r30, 0xB3	; 179
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e8       	ldi	r20, 0x80	; 128
    29b4:	5f e3       	ldi	r21, 0x3F	; 63
    29b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	44 f4       	brge	.+16     	; 0x29ce <LCD_displayCharacter+0x20e>
		__ticks = 1;
    29be:	fe 01       	movw	r30, r28
    29c0:	e5 5b       	subi	r30, 0xB5	; 181
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	64 c0       	rjmp	.+200    	; 0x2a96 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    29ce:	fe 01       	movw	r30, r28
    29d0:	e3 5b       	subi	r30, 0xB3	; 179
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	3f ef       	ldi	r19, 0xFF	; 255
    29e0:	4f e7       	ldi	r20, 0x7F	; 127
    29e2:	57 e4       	ldi	r21, 0x47	; 71
    29e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e8:	18 16       	cp	r1, r24
    29ea:	0c f0       	brlt	.+2      	; 0x29ee <LCD_displayCharacter+0x22e>
    29ec:	43 c0       	rjmp	.+134    	; 0x2a74 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 5a       	subi	r30, 0xAF	; 175
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8e 01       	movw	r16, r28
    2a0e:	05 5b       	subi	r16, 0xB5	; 181
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
    2a24:	1f c0       	rjmp	.+62     	; 0x2a64 <LCD_displayCharacter+0x2a4>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 5b       	subi	r30, 0xB7	; 183
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 e9       	ldi	r24, 0x90	; 144
    2a2e:	91 e0       	ldi	r25, 0x01	; 1
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	fe 01       	movw	r30, r28
    2a36:	e7 5b       	subi	r30, 0xB7	; 183
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_displayCharacter+0x27e>
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 5b       	subi	r30, 0xB7	; 183
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	de 01       	movw	r26, r28
    2a4e:	a5 5b       	subi	r26, 0xB5	; 181
    2a50:	bf 4f       	sbci	r27, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	e5 5b       	subi	r30, 0xB5	; 181
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	11 96       	adiw	r26, 0x01	; 1
    2a60:	9c 93       	st	X, r25
    2a62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	fe 01       	movw	r30, r28
    2a66:	e5 5b       	subi	r30, 0xB5	; 181
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	d1 f6       	brne	.-76     	; 0x2a26 <LCD_displayCharacter+0x266>
    2a72:	27 c0       	rjmp	.+78     	; 0x2ac2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	8e 01       	movw	r16, r28
    2a76:	05 5b       	subi	r16, 0xB5	; 181
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e3 5b       	subi	r30, 0xB3	; 179
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	f8 01       	movw	r30, r16
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
    2a96:	de 01       	movw	r26, r28
    2a98:	a9 5b       	subi	r26, 0xB9	; 185
    2a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e5 5b       	subi	r30, 0xB5	; 181
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	8d 93       	st	X+, r24
    2aa8:	9c 93       	st	X, r25
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 5b       	subi	r30, 0xB9	; 185
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_displayCharacter+0x2f4>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e9 5b       	subi	r30, 0xB9	; 185
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,4));
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ed 59       	subi	r30, 0x9D	; 157
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 95       	swap	r24
    2acc:	8f 70       	andi	r24, 0x0F	; 15
    2ace:	98 2f       	mov	r25, r24
    2ad0:	91 70       	andi	r25, 0x01	; 1
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	63 e0       	ldi	r22, 0x03	; 3
    2ad6:	49 2f       	mov	r20, r25
    2ad8:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,5));
    2adc:	fe 01       	movw	r30, r28
    2ade:	ed 59       	subi	r30, 0x9D	; 157
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	82 95       	swap	r24
    2ae6:	86 95       	lsr	r24
    2ae8:	87 70       	andi	r24, 0x07	; 7
    2aea:	98 2f       	mov	r25, r24
    2aec:	91 70       	andi	r25, 0x01	; 1
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	64 e0       	ldi	r22, 0x04	; 4
    2af2:	49 2f       	mov	r20, r25
    2af4:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,6));
    2af8:	fe 01       	movw	r30, r28
    2afa:	ed 59       	subi	r30, 0x9D	; 157
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	82 95       	swap	r24
    2b02:	86 95       	lsr	r24
    2b04:	86 95       	lsr	r24
    2b06:	83 70       	andi	r24, 0x03	; 3
    2b08:	98 2f       	mov	r25, r24
    2b0a:	91 70       	andi	r25, 0x01	; 1
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	65 e0       	ldi	r22, 0x05	; 5
    2b10:	49 2f       	mov	r20, r25
    2b12:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,7));
    2b16:	fe 01       	movw	r30, r28
    2b18:	ed 59       	subi	r30, 0x9D	; 157
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	98 2f       	mov	r25, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	99 27       	eor	r25, r25
    2b24:	99 1f       	adc	r25, r25
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	66 e0       	ldi	r22, 0x06	; 6
    2b2a:	49 2f       	mov	r20, r25
    2b2c:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2b30:	fe 01       	movw	r30, r28
    2b32:	ed 5b       	subi	r30, 0xBD	; 189
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e8       	ldi	r26, 0x80	; 128
    2b3c:	bf e3       	ldi	r27, 0x3F	; 63
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	01 5c       	subi	r16, 0xC1	; 193
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ed 5b       	subi	r30, 0xBD	; 189
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a e7       	ldi	r20, 0x7A	; 122
    2b60:	55 e4       	ldi	r21, 0x45	; 69
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	ff 96       	adiw	r30, 0x3f	; 63
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <LCD_displayCharacter+0x3da>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9e af       	std	Y+62, r25	; 0x3e
    2b96:	8d af       	std	Y+61, r24	; 0x3d
    2b98:	46 c0       	rjmp	.+140    	; 0x2c26 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ff 96       	adiw	r30, 0x3f	; 63
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	64 f5       	brge	.+88     	; 0x2c0e <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ed 5b       	subi	r30, 0xBD	; 189
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9e af       	std	Y+62, r25	; 0x3e
    2be2:	8d af       	std	Y+61, r24	; 0x3d
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_displayCharacter+0x444>
    2be6:	80 e9       	ldi	r24, 0x90	; 144
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	9c af       	std	Y+60, r25	; 0x3c
    2bec:	8b af       	std	Y+59, r24	; 0x3b
    2bee:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_displayCharacter+0x432>
    2bf6:	9c af       	std	Y+60, r25	; 0x3c
    2bf8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9e af       	std	Y+62, r25	; 0x3e
    2c02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_displayCharacter+0x426>
    2c0c:	16 c0       	rjmp	.+44     	; 0x2c3a <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ff 96       	adiw	r30, 0x3f	; 63
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9e af       	std	Y+62, r25	; 0x3e
    2c24:	8d af       	std	Y+61, r24	; 0x3d
    2c26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2a:	9a af       	std	Y+58, r25	; 0x3a
    2c2c:	89 af       	std	Y+57, r24	; 0x39
    2c2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c30:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_displayCharacter+0x472>
    2c36:	9a af       	std	Y+58, r25	; 0x3a
    2c38:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	62 e0       	ldi	r22, 0x02	; 2
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 e8       	ldi	r26, 0x80	; 128
    2c4a:	bf e3       	ldi	r27, 0x3F	; 63
    2c4c:	8d ab       	std	Y+53, r24	; 0x35
    2c4e:	9e ab       	std	Y+54, r25	; 0x36
    2c50:	af ab       	std	Y+55, r26	; 0x37
    2c52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6d a9       	ldd	r22, Y+53	; 0x35
    2c56:	7e a9       	ldd	r23, Y+54	; 0x36
    2c58:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a e7       	ldi	r20, 0x7A	; 122
    2c62:	55 e4       	ldi	r21, 0x45	; 69
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	89 ab       	std	Y+49, r24	; 0x31
    2c6e:	9a ab       	std	Y+50, r25	; 0x32
    2c70:	ab ab       	std	Y+51, r26	; 0x33
    2c72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c74:	69 a9       	ldd	r22, Y+49	; 0x31
    2c76:	7a a9       	ldd	r23, Y+50	; 0x32
    2c78:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	98 ab       	std	Y+48, r25	; 0x30
    2c92:	8f a7       	std	Y+47, r24	; 0x2f
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2c96:	69 a9       	ldd	r22, Y+49	; 0x31
    2c98:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	4c f5       	brge	.+82     	; 0x2d00 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	6d a9       	ldd	r22, Y+53	; 0x35
    2cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	98 ab       	std	Y+48, r25	; 0x30
    2cd4:	8f a7       	std	Y+47, r24	; 0x2f
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <LCD_displayCharacter+0x536>
    2cd8:	80 e9       	ldi	r24, 0x90	; 144
    2cda:	91 e0       	ldi	r25, 0x01	; 1
    2cdc:	9e a7       	std	Y+46, r25	; 0x2e
    2cde:	8d a7       	std	Y+45, r24	; 0x2d
    2ce0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ce2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <LCD_displayCharacter+0x524>
    2ce8:	9e a7       	std	Y+46, r25	; 0x2e
    2cea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cee:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	98 ab       	std	Y+48, r25	; 0x30
    2cf4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf8:	98 a9       	ldd	r25, Y+48	; 0x30
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <LCD_displayCharacter+0x518>
    2cfe:	14 c0       	rjmp	.+40     	; 0x2d28 <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	69 a9       	ldd	r22, Y+49	; 0x31
    2d02:	7a a9       	ldd	r23, Y+50	; 0x32
    2d04:	8b a9       	ldd	r24, Y+51	; 0x33
    2d06:	9c a9       	ldd	r25, Y+52	; 0x34
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	98 ab       	std	Y+48, r25	; 0x30
    2d12:	8f a7       	std	Y+47, r24	; 0x2f
    2d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d16:	98 a9       	ldd	r25, Y+48	; 0x30
    2d18:	9c a7       	std	Y+44, r25	; 0x2c
    2d1a:	8b a7       	std	Y+43, r24	; 0x2b
    2d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <LCD_displayCharacter+0x560>
    2d24:	9c a7       	std	Y+44, r25	; 0x2c
    2d26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	62 e0       	ldi	r22, 0x02	; 2
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a0 e8       	ldi	r26, 0x80	; 128
    2d38:	bf e3       	ldi	r27, 0x3F	; 63
    2d3a:	8f a3       	std	Y+39, r24	; 0x27
    2d3c:	98 a7       	std	Y+40, r25	; 0x28
    2d3e:	a9 a7       	std	Y+41, r26	; 0x29
    2d40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	6f a1       	ldd	r22, Y+39	; 0x27
    2d44:	78 a5       	ldd	r23, Y+40	; 0x28
    2d46:	89 a5       	ldd	r24, Y+41	; 0x29
    2d48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a e7       	ldi	r20, 0x7A	; 122
    2d50:	55 e4       	ldi	r21, 0x45	; 69
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	8b a3       	std	Y+35, r24	; 0x23
    2d5c:	9c a3       	std	Y+36, r25	; 0x24
    2d5e:	ad a3       	std	Y+37, r26	; 0x25
    2d60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d62:	6b a1       	ldd	r22, Y+35	; 0x23
    2d64:	7c a1       	ldd	r23, Y+36	; 0x24
    2d66:	8d a1       	ldd	r24, Y+37	; 0x25
    2d68:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	2c f4       	brge	.+10     	; 0x2d84 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9a a3       	std	Y+34, r25	; 0x22
    2d80:	89 a3       	std	Y+33, r24	; 0x21
    2d82:	3f c0       	rjmp	.+126    	; 0x2e02 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    2d84:	6b a1       	ldd	r22, Y+35	; 0x23
    2d86:	7c a1       	ldd	r23, Y+36	; 0x24
    2d88:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	4c f5       	brge	.+82     	; 0x2dee <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2da0:	89 a5       	ldd	r24, Y+41	; 0x29
    2da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <LCD_displayCharacter+0x624>
    2dc6:	80 e9       	ldi	r24, 0x90	; 144
    2dc8:	91 e0       	ldi	r25, 0x01	; 1
    2dca:	98 a3       	std	Y+32, r25	; 0x20
    2dcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_displayCharacter+0x612>
    2dd6:	98 a3       	std	Y+32, r25	; 0x20
    2dd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	9a a3       	std	Y+34, r25	; 0x22
    2de2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	89 a1       	ldd	r24, Y+33	; 0x21
    2de6:	9a a1       	ldd	r25, Y+34	; 0x22
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <LCD_displayCharacter+0x606>
    2dec:	14 c0       	rjmp	.+40     	; 0x2e16 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	6b a1       	ldd	r22, Y+35	; 0x23
    2df0:	7c a1       	ldd	r23, Y+36	; 0x24
    2df2:	8d a1       	ldd	r24, Y+37	; 0x25
    2df4:	9e a1       	ldd	r25, Y+38	; 0x26
    2df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	9a a3       	std	Y+34, r25	; 0x22
    2e00:	89 a3       	std	Y+33, r24	; 0x21
    2e02:	89 a1       	ldd	r24, Y+33	; 0x21
    2e04:	9a a1       	ldd	r25, Y+34	; 0x22
    2e06:	9e 8f       	std	Y+30, r25	; 0x1e
    2e08:	8d 8f       	std	Y+29, r24	; 0x1d
    2e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <LCD_displayCharacter+0x64e>
    2e12:	9e 8f       	std	Y+30, r25	; 0x1e
    2e14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,0));
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 59       	subi	r30, 0x9D	; 157
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	98 2f       	mov	r25, r24
    2e20:	91 70       	andi	r25, 0x01	; 1
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	63 e0       	ldi	r22, 0x03	; 3
    2e26:	49 2f       	mov	r20, r25
    2e28:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	ed 59       	subi	r30, 0x9D	; 157
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 81       	ld	r24, Z
    2e34:	86 95       	lsr	r24
    2e36:	98 2f       	mov	r25, r24
    2e38:	91 70       	andi	r25, 0x01	; 1
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	64 e0       	ldi	r22, 0x04	; 4
    2e3e:	49 2f       	mov	r20, r25
    2e40:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
    2e44:	fe 01       	movw	r30, r28
    2e46:	ed 59       	subi	r30, 0x9D	; 157
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	80 81       	ld	r24, Z
    2e4c:	86 95       	lsr	r24
    2e4e:	86 95       	lsr	r24
    2e50:	98 2f       	mov	r25, r24
    2e52:	91 70       	andi	r25, 0x01	; 1
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	65 e0       	ldi	r22, 0x05	; 5
    2e58:	49 2f       	mov	r20, r25
    2e5a:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ed 59       	subi	r30, 0x9D	; 157
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	80 81       	ld	r24, Z
    2e66:	86 95       	lsr	r24
    2e68:	86 95       	lsr	r24
    2e6a:	86 95       	lsr	r24
    2e6c:	98 2f       	mov	r25, r24
    2e6e:	91 70       	andi	r25, 0x01	; 1
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	66 e0       	ldi	r22, 0x06	; 6
    2e74:	49 2f       	mov	r20, r25
    2e76:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 e8       	ldi	r26, 0x80	; 128
    2e80:	bf e3       	ldi	r27, 0x3F	; 63
    2e82:	89 8f       	std	Y+25, r24	; 0x19
    2e84:	9a 8f       	std	Y+26, r25	; 0x1a
    2e86:	ab 8f       	std	Y+27, r26	; 0x1b
    2e88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a e7       	ldi	r20, 0x7A	; 122
    2e98:	55 e4       	ldi	r21, 0x45	; 69
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8d 8b       	std	Y+21, r24	; 0x15
    2ea4:	9e 8b       	std	Y+22, r25	; 0x16
    2ea6:	af 8b       	std	Y+23, r26	; 0x17
    2ea8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9c 8b       	std	Y+20, r25	; 0x14
    2ec8:	8b 8b       	std	Y+19, r24	; 0x13
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ece:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <LCD_displayCharacter+0x76c>
    2f0e:	80 e9       	ldi	r24, 0x90	; 144
    2f10:	91 e0       	ldi	r25, 0x01	; 1
    2f12:	9a 8b       	std	Y+18, r25	; 0x12
    2f14:	89 8b       	std	Y+17, r24	; 0x11
    2f16:	89 89       	ldd	r24, Y+17	; 0x11
    2f18:	9a 89       	ldd	r25, Y+18	; 0x12
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <LCD_displayCharacter+0x75a>
    2f1e:	9a 8b       	std	Y+18, r25	; 0x12
    2f20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8b 89       	ldd	r24, Y+19	; 0x13
    2f24:	9c 89       	ldd	r25, Y+20	; 0x14
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9c 8b       	std	Y+20, r25	; 0x14
    2f2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <LCD_displayCharacter+0x74e>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6d 89       	ldd	r22, Y+21	; 0x15
    2f38:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9c 8b       	std	Y+20, r25	; 0x14
    2f48:	8b 8b       	std	Y+19, r24	; 0x13
    2f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f4e:	98 8b       	std	Y+16, r25	; 0x10
    2f50:	8f 87       	std	Y+15, r24	; 0x0f
    2f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f54:	98 89       	ldd	r25, Y+16	; 0x10
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_displayCharacter+0x796>
    2f5a:	98 8b       	std	Y+16, r25	; 0x10
    2f5c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	62 e0       	ldi	r22, 0x02	; 2
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 e8       	ldi	r26, 0x80	; 128
    2f6e:	bf e3       	ldi	r27, 0x3F	; 63
    2f70:	8b 87       	std	Y+11, r24	; 0x0b
    2f72:	9c 87       	std	Y+12, r25	; 0x0c
    2f74:	ad 87       	std	Y+13, r26	; 0x0d
    2f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a e7       	ldi	r20, 0x7A	; 122
    2f86:	55 e4       	ldi	r21, 0x45	; 69
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8f 83       	std	Y+7, r24	; 0x07
    2f92:	98 87       	std	Y+8, r25	; 0x08
    2f94:	a9 87       	std	Y+9, r26	; 0x09
    2f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fac:	88 23       	and	r24, r24
    2fae:	2c f4       	brge	.+10     	; 0x2fba <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	9e 83       	std	Y+6, r25	; 0x06
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
    2fb8:	3f c0       	rjmp	.+126    	; 0x3038 <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2fba:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbc:	78 85       	ldd	r23, Y+8	; 0x08
    2fbe:	89 85       	ldd	r24, Y+9	; 0x09
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	3f ef       	ldi	r19, 0xFF	; 255
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	57 e4       	ldi	r21, 0x47	; 71
    2fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fce:	18 16       	cp	r1, r24
    2fd0:	4c f5       	brge	.+82     	; 0x3024 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e2       	ldi	r20, 0x20	; 32
    2fe0:	51 e4       	ldi	r21, 0x41	; 65
    2fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	bc 01       	movw	r22, r24
    2fec:	cd 01       	movw	r24, r26
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	0f c0       	rjmp	.+30     	; 0x301a <LCD_displayCharacter+0x85a>
    2ffc:	80 e9       	ldi	r24, 0x90	; 144
    2ffe:	91 e0       	ldi	r25, 0x01	; 1
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <LCD_displayCharacter+0x848>
    300c:	9c 83       	std	Y+4, r25	; 0x04
    300e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3010:	8d 81       	ldd	r24, Y+5	; 0x05
    3012:	9e 81       	ldd	r25, Y+6	; 0x06
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	69 f7       	brne	.-38     	; 0x2ffc <LCD_displayCharacter+0x83c>
    3022:	14 c0       	rjmp	.+40     	; 0x304c <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3024:	6f 81       	ldd	r22, Y+7	; 0x07
    3026:	78 85       	ldd	r23, Y+8	; 0x08
    3028:	89 85       	ldd	r24, Y+9	; 0x09
    302a:	9a 85       	ldd	r25, Y+10	; 0x0a
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	9e 81       	ldd	r25, Y+6	; 0x06
    303c:	9a 83       	std	Y+2, r25	; 0x02
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <LCD_displayCharacter+0x884>
    3048:	9a 83       	std	Y+2, r25	; 0x02
    304a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    304c:	cd 59       	subi	r28, 0x9D	; 157
    304e:	df 4f       	sbci	r29, 0xFF	; 255
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	08 95       	ret

00003064 <LCD_displayString>:

void LCD_displayString(char * string)
{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	00 d0       	rcall	.+0      	; 0x306a <LCD_displayString+0x6>
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	9b 83       	std	Y+3, r25	; 0x03
    3072:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    3074:	19 82       	std	Y+1, r1	; 0x01
    3076:	0e c0       	rjmp	.+28     	; 0x3094 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	fc 01       	movw	r30, r24
    3084:	e2 0f       	add	r30, r18
    3086:	f3 1f       	adc	r31, r19
    3088:	80 81       	ld	r24, Z
    308a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	8f 5f       	subi	r24, 0xFF	; 255
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	9b 81       	ldd	r25, Y+3	; 0x03
    309e:	fc 01       	movw	r30, r24
    30a0:	e2 0f       	add	r30, r18
    30a2:	f3 1f       	adc	r31, r19
    30a4:	80 81       	ld	r24, Z
    30a6:	88 23       	and	r24, r24
    30a8:	39 f7       	brne	.-50     	; 0x3078 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <LCD_clearScreen>:

void LCD_clearScreen()
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
}
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <LCD_moveCursor+0x6>
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <LCD_moveCursor+0x8>
    30d2:	0f 92       	push	r0
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	8a 83       	std	Y+2, r24	; 0x02
    30da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	3d 83       	std	Y+5, r19	; 0x05
    30e4:	2c 83       	std	Y+4, r18	; 0x04
    30e6:	8c 81       	ldd	r24, Y+4	; 0x04
    30e8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ea:	81 30       	cpi	r24, 0x01	; 1
    30ec:	91 05       	cpc	r25, r1
    30ee:	c1 f0       	breq	.+48     	; 0x3120 <LCD_moveCursor+0x56>
    30f0:	2c 81       	ldd	r18, Y+4	; 0x04
    30f2:	3d 81       	ldd	r19, Y+5	; 0x05
    30f4:	22 30       	cpi	r18, 0x02	; 2
    30f6:	31 05       	cpc	r19, r1
    30f8:	2c f4       	brge	.+10     	; 0x3104 <LCD_moveCursor+0x3a>
    30fa:	8c 81       	ldd	r24, Y+4	; 0x04
    30fc:	9d 81       	ldd	r25, Y+5	; 0x05
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	61 f0       	breq	.+24     	; 0x311a <LCD_moveCursor+0x50>
    3102:	19 c0       	rjmp	.+50     	; 0x3136 <LCD_moveCursor+0x6c>
    3104:	2c 81       	ldd	r18, Y+4	; 0x04
    3106:	3d 81       	ldd	r19, Y+5	; 0x05
    3108:	22 30       	cpi	r18, 0x02	; 2
    310a:	31 05       	cpc	r19, r1
    310c:	69 f0       	breq	.+26     	; 0x3128 <LCD_moveCursor+0x5e>
    310e:	8c 81       	ldd	r24, Y+4	; 0x04
    3110:	9d 81       	ldd	r25, Y+5	; 0x05
    3112:	83 30       	cpi	r24, 0x03	; 3
    3114:	91 05       	cpc	r25, r1
    3116:	61 f0       	breq	.+24     	; 0x3130 <LCD_moveCursor+0x66>
    3118:	0e c0       	rjmp	.+28     	; 0x3136 <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	0b c0       	rjmp	.+22     	; 0x3136 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	80 5c       	subi	r24, 0xC0	; 192
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	07 c0       	rjmp	.+14     	; 0x3136 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	80 5f       	subi	r24, 0xF0	; 240
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	80 5b       	subi	r24, 0xB0	; 176
    3134:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	80 68       	ori	r24, 0x80	; 128
    313a:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
}
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <LCD_displayStringRowColumn+0x6>
    3158:	00 d0       	rcall	.+0      	; 0x315a <LCD_displayStringRowColumn+0x8>
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	6a 83       	std	Y+2, r22	; 0x02
    3162:	5c 83       	std	Y+4, r21	; 0x04
    3164:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	6a 81       	ldd	r22, Y+2	; 0x02
    316a:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_moveCursor>
	LCD_displayString(string);
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
}
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	62 97       	sbiw	r28, 0x12	; 18
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	9a 8b       	std	Y+18, r25	; 0x12
    319a:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    319c:	89 89       	ldd	r24, Y+17	; 0x11
    319e:	9a 89       	ldd	r25, Y+18	; 0x12
    31a0:	9e 01       	movw	r18, r28
    31a2:	2f 5f       	subi	r18, 0xFF	; 255
    31a4:	3f 4f       	sbci	r19, 0xFF	; 255
    31a6:	b9 01       	movw	r22, r18
    31a8:	4a e0       	ldi	r20, 0x0A	; 10
    31aa:	50 e0       	ldi	r21, 0x00	; 0
    31ac:	0e 94 66 1b 	call	0x36cc	; 0x36cc <itoa>
	LCD_displayString(buffer);
    31b0:	ce 01       	movw	r24, r28
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	0e 94 32 18 	call	0x3064	; 0x3064 <LCD_displayString>
}
    31b8:	62 96       	adiw	r28, 0x12	; 18
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <KEYPAD_getPressedKey>:
/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/

uint8 KEYPAD_getPressedKey()
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <KEYPAD_getPressedKey+0x6>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	61 e0       	ldi	r22, 0x01	; 1
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	63 e0       	ldi	r22, 0x03	; 3
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	64 e0       	ldi	r22, 0x04	; 4
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	65 e0       	ldi	r22, 0x05	; 5
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	66 e0       	ldi	r22, 0x06	; 6
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	67 e0       	ldi	r22, 0x07	; 7
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    3224:	19 82       	std	Y+1, r1	; 0x01
    3226:	35 c0       	rjmp	.+106    	; 0x3292 <KEYPAD_getPressedKey+0xc8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	69 81       	ldd	r22, Y+1	; 0x01
    322c:	41 e0       	ldi	r20, 0x01	; 1
    322e:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	69 81       	ldd	r22, Y+1	; 0x01
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_writePin>

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    323c:	1a 82       	std	Y+2, r1	; 0x02
    323e:	1e c0       	rjmp	.+60     	; 0x327c <KEYPAD_getPressedKey+0xb2>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	98 2f       	mov	r25, r24
    3244:	9c 5f       	subi	r25, 0xFC	; 252
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	69 2f       	mov	r22, r25
    324a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <GPIO_readPin>
    324e:	88 23       	and	r24, r24
    3250:	91 f4       	brne	.+36     	; 0x3276 <KEYPAD_getPressedKey+0xac>
				{
					#if (STANDARD_KEYPAD == FALSE)
						#if (KEYPAD_NUM_COLS == 3)
							return KEYPAD_4x3_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
						#elif (KEYPAD_NUM_COLS == 4)
							return KEYPAD_4x4_adjustKeyNumber( (row*KEYPAD_NUM_COLS)+col+1 );
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	88 2f       	mov	r24, r24
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	98 2f       	mov	r25, r24
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	89 0f       	add	r24, r25
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	0e 94 4d 19 	call	0x329a	; 0x329a <KEYPAD_4x4_adjustKeyNumber>
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
		}
	}
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++)
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	8a 83       	std	Y+2, r24	; 0x02
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	84 30       	cpi	r24, 0x04	; 4
    3280:	f8 f2       	brcs	.-66     	; 0x3240 <KEYPAD_getPressedKey+0x76>
						return ((row*KEYPAD_NUM_COLS)+col+1);
					#endif /* ---> STANDARD_KEYPAD */
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	69 81       	ldd	r22, Y+1	; 0x01
    3286:	40 e0       	ldi	r20, 0x00	; 0
    3288:	0e 94 23 08 	call	0x1046	; 0x1046 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	8f 5f       	subi	r24, 0xFF	; 255
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	84 30       	cpi	r24, 0x04	; 4
    3296:	40 f2       	brcs	.-112    	; 0x3228 <KEYPAD_getPressedKey+0x5e>
    3298:	c5 cf       	rjmp	.-118    	; 0x3224 <KEYPAD_getPressedKey+0x5a>

0000329a <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    32a8:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	3c 83       	std	Y+4, r19	; 0x04
    32b2:	2b 83       	std	Y+3, r18	; 0x03
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	9c 81       	ldd	r25, Y+4	; 0x04
    32b8:	88 30       	cpi	r24, 0x08	; 8
    32ba:	91 05       	cpc	r25, r1
    32bc:	09 f4       	brne	.+2      	; 0x32c0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    32be:	70 c0       	rjmp	.+224    	; 0x33a0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    32c0:	2b 81       	ldd	r18, Y+3	; 0x03
    32c2:	3c 81       	ldd	r19, Y+4	; 0x04
    32c4:	29 30       	cpi	r18, 0x09	; 9
    32c6:	31 05       	cpc	r19, r1
    32c8:	5c f5       	brge	.+86     	; 0x3320 <KEYPAD_4x4_adjustKeyNumber+0x86>
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	84 30       	cpi	r24, 0x04	; 4
    32d0:	91 05       	cpc	r25, r1
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    32d4:	59 c0       	rjmp	.+178    	; 0x3388 <KEYPAD_4x4_adjustKeyNumber+0xee>
    32d6:	2b 81       	ldd	r18, Y+3	; 0x03
    32d8:	3c 81       	ldd	r19, Y+4	; 0x04
    32da:	25 30       	cpi	r18, 0x05	; 5
    32dc:	31 05       	cpc	r19, r1
    32de:	9c f4       	brge	.+38     	; 0x3306 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	82 30       	cpi	r24, 0x02	; 2
    32e6:	91 05       	cpc	r25, r1
    32e8:	09 f4       	brne	.+2      	; 0x32ec <KEYPAD_4x4_adjustKeyNumber+0x52>
    32ea:	48 c0       	rjmp	.+144    	; 0x337c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    32ec:	2b 81       	ldd	r18, Y+3	; 0x03
    32ee:	3c 81       	ldd	r19, Y+4	; 0x04
    32f0:	23 30       	cpi	r18, 0x03	; 3
    32f2:	31 05       	cpc	r19, r1
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    32f6:	45 c0       	rjmp	.+138    	; 0x3382 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	81 30       	cpi	r24, 0x01	; 1
    32fe:	91 05       	cpc	r25, r1
    3300:	09 f4       	brne	.+2      	; 0x3304 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3302:	39 c0       	rjmp	.+114    	; 0x3376 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3304:	67 c0       	rjmp	.+206    	; 0x33d4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3306:	2b 81       	ldd	r18, Y+3	; 0x03
    3308:	3c 81       	ldd	r19, Y+4	; 0x04
    330a:	26 30       	cpi	r18, 0x06	; 6
    330c:	31 05       	cpc	r19, r1
    330e:	09 f4       	brne	.+2      	; 0x3312 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3310:	41 c0       	rjmp	.+130    	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	87 30       	cpi	r24, 0x07	; 7
    3318:	91 05       	cpc	r25, r1
    331a:	0c f0       	brlt	.+2      	; 0x331e <KEYPAD_4x4_adjustKeyNumber+0x84>
    331c:	3e c0       	rjmp	.+124    	; 0x339a <KEYPAD_4x4_adjustKeyNumber+0x100>
    331e:	37 c0       	rjmp	.+110    	; 0x338e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3320:	2b 81       	ldd	r18, Y+3	; 0x03
    3322:	3c 81       	ldd	r19, Y+4	; 0x04
    3324:	2c 30       	cpi	r18, 0x0C	; 12
    3326:	31 05       	cpc	r19, r1
    3328:	09 f4       	brne	.+2      	; 0x332c <KEYPAD_4x4_adjustKeyNumber+0x92>
    332a:	46 c0       	rjmp	.+140    	; 0x33b8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	8d 30       	cpi	r24, 0x0D	; 13
    3332:	91 05       	cpc	r25, r1
    3334:	5c f4       	brge	.+22     	; 0x334c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3336:	2b 81       	ldd	r18, Y+3	; 0x03
    3338:	3c 81       	ldd	r19, Y+4	; 0x04
    333a:	2a 30       	cpi	r18, 0x0A	; 10
    333c:	31 05       	cpc	r19, r1
    333e:	b1 f1       	breq	.+108    	; 0x33ac <KEYPAD_4x4_adjustKeyNumber+0x112>
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	9c 81       	ldd	r25, Y+4	; 0x04
    3344:	8b 30       	cpi	r24, 0x0B	; 11
    3346:	91 05       	cpc	r25, r1
    3348:	a4 f5       	brge	.+104    	; 0x33b2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    334a:	2d c0       	rjmp	.+90     	; 0x33a6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    334c:	2b 81       	ldd	r18, Y+3	; 0x03
    334e:	3c 81       	ldd	r19, Y+4	; 0x04
    3350:	2e 30       	cpi	r18, 0x0E	; 14
    3352:	31 05       	cpc	r19, r1
    3354:	b9 f1       	breq	.+110    	; 0x33c4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3356:	8b 81       	ldd	r24, Y+3	; 0x03
    3358:	9c 81       	ldd	r25, Y+4	; 0x04
    335a:	8e 30       	cpi	r24, 0x0E	; 14
    335c:	91 05       	cpc	r25, r1
    335e:	7c f1       	brlt	.+94     	; 0x33be <KEYPAD_4x4_adjustKeyNumber+0x124>
    3360:	2b 81       	ldd	r18, Y+3	; 0x03
    3362:	3c 81       	ldd	r19, Y+4	; 0x04
    3364:	2f 30       	cpi	r18, 0x0F	; 15
    3366:	31 05       	cpc	r19, r1
    3368:	79 f1       	breq	.+94     	; 0x33c8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	80 31       	cpi	r24, 0x10	; 16
    3370:	91 05       	cpc	r25, r1
    3372:	69 f1       	breq	.+90     	; 0x33ce <KEYPAD_4x4_adjustKeyNumber+0x134>
    3374:	2f c0       	rjmp	.+94     	; 0x33d4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    3376:	87 e0       	ldi	r24, 0x07	; 7
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	2e c0       	rjmp	.+92     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    337c:	88 e0       	ldi	r24, 0x08	; 8
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	2b c0       	rjmp	.+86     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    3382:	89 e0       	ldi	r24, 0x09	; 9
    3384:	89 83       	std	Y+1, r24	; 0x01
    3386:	28 c0       	rjmp	.+80     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';
    3388:	85 e2       	ldi	r24, 0x25	; 37
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	25 c0       	rjmp	.+74     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    338e:	84 e0       	ldi	r24, 0x04	; 4
    3390:	89 83       	std	Y+1, r24	; 0x01
    3392:	22 c0       	rjmp	.+68     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    3394:	85 e0       	ldi	r24, 0x05	; 5
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	1f c0       	rjmp	.+62     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    339a:	86 e0       	ldi	r24, 0x06	; 6
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	1c c0       	rjmp	.+56     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';
    33a0:	8a e2       	ldi	r24, 0x2A	; 42
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	19 c0       	rjmp	.+50     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	16 c0       	rjmp	.+44     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    33ac:	82 e0       	ldi	r24, 0x02	; 2
    33ae:	89 83       	std	Y+1, r24	; 0x01
    33b0:	13 c0       	rjmp	.+38     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	10 c0       	rjmp	.+32     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    33b8:	8d e2       	ldi	r24, 0x2D	; 45
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	0d c0       	rjmp	.+26     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;
    33be:	8d e0       	ldi	r24, 0x0D	; 13
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	0a c0       	rjmp	.+20     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    33c4:	19 82       	std	Y+1, r1	; 0x01
    33c6:	08 c0       	rjmp	.+16     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';
    33c8:	8d e3       	ldi	r24, 0x3D	; 61
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	05 c0       	rjmp	.+10     	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';
    33ce:	8b e2       	ldi	r24, 0x2B	; 43
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <main>:
#include "HAL/KEYPAD/keypad.h"
#include "HAL/SEVEN_SEGMENT/sevenseg.h"
#include "util/delay.h"

int main(void)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	6e 97       	sbiw	r28, 0x1e	; 30
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
	SEVEN_SEGMENT_init();
    33fc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <SEVEN_SEGMENT_init>
	SEVEN_SEGMENT_enable();
    3400:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <SEVEN_SEGMENT_enable>

	while(1)
	{
		SEVEN_SEGMENT_enable();
    3404:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <SEVEN_SEGMENT_enable>
		for(unsigned int i = 0 ; i < 10 ; i++)
    3408:	1e 8e       	std	Y+30, r1	; 0x1e
    340a:	1d 8e       	std	Y+29, r1	; 0x1d
    340c:	7a c0       	rjmp	.+244    	; 0x3502 <main+0x11a>
		{
			SEVEN_SEGMENT_displayNumber(i);
    340e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3410:	0e 94 00 0c 	call	0x1800	; 0x1800 <SEVEN_SEGMENT_displayNumber>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	aa ef       	ldi	r26, 0xFA	; 250
    341a:	b3 e4       	ldi	r27, 0x43	; 67
    341c:	89 8f       	std	Y+25, r24	; 0x19
    341e:	9a 8f       	std	Y+26, r25	; 0x1a
    3420:	ab 8f       	std	Y+27, r26	; 0x1b
    3422:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3424:	69 8d       	ldd	r22, Y+25	; 0x19
    3426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a e7       	ldi	r20, 0x7A	; 122
    3432:	55 e4       	ldi	r21, 0x45	; 69
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8d 8b       	std	Y+21, r24	; 0x15
    343e:	9e 8b       	std	Y+22, r25	; 0x16
    3440:	af 8b       	std	Y+23, r26	; 0x17
    3442:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3444:	6d 89       	ldd	r22, Y+21	; 0x15
    3446:	7e 89       	ldd	r23, Y+22	; 0x16
    3448:	8f 89       	ldd	r24, Y+23	; 0x17
    344a:	98 8d       	ldd	r25, Y+24	; 0x18
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	2c f4       	brge	.+10     	; 0x3466 <main+0x7e>
		__ticks = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9c 8b       	std	Y+20, r25	; 0x14
    3462:	8b 8b       	std	Y+19, r24	; 0x13
    3464:	3f c0       	rjmp	.+126    	; 0x34e4 <main+0xfc>
	else if (__tmp > 65535)
    3466:	6d 89       	ldd	r22, Y+21	; 0x15
    3468:	7e 89       	ldd	r23, Y+22	; 0x16
    346a:	8f 89       	ldd	r24, Y+23	; 0x17
    346c:	98 8d       	ldd	r25, Y+24	; 0x18
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	3f ef       	ldi	r19, 0xFF	; 255
    3472:	4f e7       	ldi	r20, 0x7F	; 127
    3474:	57 e4       	ldi	r21, 0x47	; 71
    3476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    347a:	18 16       	cp	r1, r24
    347c:	4c f5       	brge	.+82     	; 0x34d0 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347e:	69 8d       	ldd	r22, Y+25	; 0x19
    3480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e2       	ldi	r20, 0x20	; 32
    348c:	51 e4       	ldi	r21, 0x41	; 65
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9c 8b       	std	Y+20, r25	; 0x14
    34a4:	8b 8b       	std	Y+19, r24	; 0x13
    34a6:	0f c0       	rjmp	.+30     	; 0x34c6 <main+0xde>
    34a8:	80 e9       	ldi	r24, 0x90	; 144
    34aa:	91 e0       	ldi	r25, 0x01	; 1
    34ac:	9a 8b       	std	Y+18, r25	; 0x12
    34ae:	89 8b       	std	Y+17, r24	; 0x11
    34b0:	89 89       	ldd	r24, Y+17	; 0x11
    34b2:	9a 89       	ldd	r25, Y+18	; 0x12
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <main+0xcc>
    34b8:	9a 8b       	std	Y+18, r25	; 0x12
    34ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	9c 8b       	std	Y+20, r25	; 0x14
    34c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c6:	8b 89       	ldd	r24, Y+19	; 0x13
    34c8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	69 f7       	brne	.-38     	; 0x34a8 <main+0xc0>
    34ce:	14 c0       	rjmp	.+40     	; 0x34f8 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d0:	6d 89       	ldd	r22, Y+21	; 0x15
    34d2:	7e 89       	ldd	r23, Y+22	; 0x16
    34d4:	8f 89       	ldd	r24, Y+23	; 0x17
    34d6:	98 8d       	ldd	r25, Y+24	; 0x18
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9c 8b       	std	Y+20, r25	; 0x14
    34e2:	8b 8b       	std	Y+19, r24	; 0x13
    34e4:	8b 89       	ldd	r24, Y+19	; 0x13
    34e6:	9c 89       	ldd	r25, Y+20	; 0x14
    34e8:	98 8b       	std	Y+16, r25	; 0x10
    34ea:	8f 87       	std	Y+15, r24	; 0x0f
    34ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ee:	98 89       	ldd	r25, Y+16	; 0x10
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <main+0x108>
    34f4:	98 8b       	std	Y+16, r25	; 0x10
    34f6:	8f 87       	std	Y+15, r24	; 0x0f
	SEVEN_SEGMENT_enable();

	while(1)
	{
		SEVEN_SEGMENT_enable();
		for(unsigned int i = 0 ; i < 10 ; i++)
    34f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3500:	8d 8f       	std	Y+29, r24	; 0x1d
    3502:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3504:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3506:	8a 30       	cpi	r24, 0x0A	; 10
    3508:	91 05       	cpc	r25, r1
    350a:	08 f4       	brcc	.+2      	; 0x350e <main+0x126>
    350c:	80 cf       	rjmp	.-256    	; 0x340e <main+0x26>
		{
			SEVEN_SEGMENT_displayNumber(i);
			_delay_ms(500);
		}
		SEVEN_SEGMENT_disable();
    350e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <SEVEN_SEGMENT_disable>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	aa ef       	ldi	r26, 0xFA	; 250
    3518:	b3 e4       	ldi	r27, 0x43	; 67
    351a:	8b 87       	std	Y+11, r24	; 0x0b
    351c:	9c 87       	std	Y+12, r25	; 0x0c
    351e:	ad 87       	std	Y+13, r26	; 0x0d
    3520:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3522:	6b 85       	ldd	r22, Y+11	; 0x0b
    3524:	7c 85       	ldd	r23, Y+12	; 0x0c
    3526:	8d 85       	ldd	r24, Y+13	; 0x0d
    3528:	9e 85       	ldd	r25, Y+14	; 0x0e
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	4a e7       	ldi	r20, 0x7A	; 122
    3530:	55 e4       	ldi	r21, 0x45	; 69
    3532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	8f 83       	std	Y+7, r24	; 0x07
    353c:	98 87       	std	Y+8, r25	; 0x08
    353e:	a9 87       	std	Y+9, r26	; 0x09
    3540:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3542:	6f 81       	ldd	r22, Y+7	; 0x07
    3544:	78 85       	ldd	r23, Y+8	; 0x08
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	9a 85       	ldd	r25, Y+10	; 0x0a
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e8       	ldi	r20, 0x80	; 128
    3550:	5f e3       	ldi	r21, 0x3F	; 63
    3552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3556:	88 23       	and	r24, r24
    3558:	2c f4       	brge	.+10     	; 0x3564 <main+0x17c>
		__ticks = 1;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	9e 83       	std	Y+6, r25	; 0x06
    3560:	8d 83       	std	Y+5, r24	; 0x05
    3562:	3f c0       	rjmp	.+126    	; 0x35e2 <main+0x1fa>
	else if (__tmp > 65535)
    3564:	6f 81       	ldd	r22, Y+7	; 0x07
    3566:	78 85       	ldd	r23, Y+8	; 0x08
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	3f ef       	ldi	r19, 0xFF	; 255
    3570:	4f e7       	ldi	r20, 0x7F	; 127
    3572:	57 e4       	ldi	r21, 0x47	; 71
    3574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3578:	18 16       	cp	r1, r24
    357a:	4c f5       	brge	.+82     	; 0x35ce <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357c:	6b 85       	ldd	r22, Y+11	; 0x0b
    357e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3580:	8d 85       	ldd	r24, Y+13	; 0x0d
    3582:	9e 85       	ldd	r25, Y+14	; 0x0e
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e2       	ldi	r20, 0x20	; 32
    358a:	51 e4       	ldi	r21, 0x41	; 65
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	bc 01       	movw	r22, r24
    3596:	cd 01       	movw	r24, r26
    3598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9e 83       	std	Y+6, r25	; 0x06
    35a2:	8d 83       	std	Y+5, r24	; 0x05
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <main+0x1dc>
    35a6:	80 e9       	ldi	r24, 0x90	; 144
    35a8:	91 e0       	ldi	r25, 0x01	; 1
    35aa:	9c 83       	std	Y+4, r25	; 0x04
    35ac:	8b 83       	std	Y+3, r24	; 0x03
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	9c 81       	ldd	r25, Y+4	; 0x04
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0x1ca>
    35b6:	9c 83       	std	Y+4, r25	; 0x04
    35b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ba:	8d 81       	ldd	r24, Y+5	; 0x05
    35bc:	9e 81       	ldd	r25, Y+6	; 0x06
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	69 f7       	brne	.-38     	; 0x35a6 <main+0x1be>
    35cc:	1b cf       	rjmp	.-458    	; 0x3404 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ce:	6f 81       	ldd	r22, Y+7	; 0x07
    35d0:	78 85       	ldd	r23, Y+8	; 0x08
    35d2:	89 85       	ldd	r24, Y+9	; 0x09
    35d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	9a 83       	std	Y+2, r25	; 0x02
    35e8:	89 83       	std	Y+1, r24	; 0x01
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	9a 81       	ldd	r25, Y+2	; 0x02
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <main+0x206>
    35f2:	9a 83       	std	Y+2, r25	; 0x02
    35f4:	89 83       	std	Y+1, r24	; 0x01
    35f6:	06 cf       	rjmp	.-500    	; 0x3404 <main+0x1c>

000035f8 <__mulsi3>:
    35f8:	62 9f       	mul	r22, r18
    35fa:	d0 01       	movw	r26, r0
    35fc:	73 9f       	mul	r23, r19
    35fe:	f0 01       	movw	r30, r0
    3600:	82 9f       	mul	r24, r18
    3602:	e0 0d       	add	r30, r0
    3604:	f1 1d       	adc	r31, r1
    3606:	64 9f       	mul	r22, r20
    3608:	e0 0d       	add	r30, r0
    360a:	f1 1d       	adc	r31, r1
    360c:	92 9f       	mul	r25, r18
    360e:	f0 0d       	add	r31, r0
    3610:	83 9f       	mul	r24, r19
    3612:	f0 0d       	add	r31, r0
    3614:	74 9f       	mul	r23, r20
    3616:	f0 0d       	add	r31, r0
    3618:	65 9f       	mul	r22, r21
    361a:	f0 0d       	add	r31, r0
    361c:	99 27       	eor	r25, r25
    361e:	72 9f       	mul	r23, r18
    3620:	b0 0d       	add	r27, r0
    3622:	e1 1d       	adc	r30, r1
    3624:	f9 1f       	adc	r31, r25
    3626:	63 9f       	mul	r22, r19
    3628:	b0 0d       	add	r27, r0
    362a:	e1 1d       	adc	r30, r1
    362c:	f9 1f       	adc	r31, r25
    362e:	bd 01       	movw	r22, r26
    3630:	cf 01       	movw	r24, r30
    3632:	11 24       	eor	r1, r1
    3634:	08 95       	ret

00003636 <__udivmodhi4>:
    3636:	aa 1b       	sub	r26, r26
    3638:	bb 1b       	sub	r27, r27
    363a:	51 e1       	ldi	r21, 0x11	; 17
    363c:	07 c0       	rjmp	.+14     	; 0x364c <__udivmodhi4_ep>

0000363e <__udivmodhi4_loop>:
    363e:	aa 1f       	adc	r26, r26
    3640:	bb 1f       	adc	r27, r27
    3642:	a6 17       	cp	r26, r22
    3644:	b7 07       	cpc	r27, r23
    3646:	10 f0       	brcs	.+4      	; 0x364c <__udivmodhi4_ep>
    3648:	a6 1b       	sub	r26, r22
    364a:	b7 0b       	sbc	r27, r23

0000364c <__udivmodhi4_ep>:
    364c:	88 1f       	adc	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	5a 95       	dec	r21
    3652:	a9 f7       	brne	.-22     	; 0x363e <__udivmodhi4_loop>
    3654:	80 95       	com	r24
    3656:	90 95       	com	r25
    3658:	bc 01       	movw	r22, r24
    365a:	cd 01       	movw	r24, r26
    365c:	08 95       	ret

0000365e <__prologue_saves__>:
    365e:	2f 92       	push	r2
    3660:	3f 92       	push	r3
    3662:	4f 92       	push	r4
    3664:	5f 92       	push	r5
    3666:	6f 92       	push	r6
    3668:	7f 92       	push	r7
    366a:	8f 92       	push	r8
    366c:	9f 92       	push	r9
    366e:	af 92       	push	r10
    3670:	bf 92       	push	r11
    3672:	cf 92       	push	r12
    3674:	df 92       	push	r13
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	ca 1b       	sub	r28, r26
    3688:	db 0b       	sbc	r29, r27
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	09 94       	ijmp

00003696 <__epilogue_restores__>:
    3696:	2a 88       	ldd	r2, Y+18	; 0x12
    3698:	39 88       	ldd	r3, Y+17	; 0x11
    369a:	48 88       	ldd	r4, Y+16	; 0x10
    369c:	5f 84       	ldd	r5, Y+15	; 0x0f
    369e:	6e 84       	ldd	r6, Y+14	; 0x0e
    36a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    36a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    36a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    36a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a8:	b9 84       	ldd	r11, Y+9	; 0x09
    36aa:	c8 84       	ldd	r12, Y+8	; 0x08
    36ac:	df 80       	ldd	r13, Y+7	; 0x07
    36ae:	ee 80       	ldd	r14, Y+6	; 0x06
    36b0:	fd 80       	ldd	r15, Y+5	; 0x05
    36b2:	0c 81       	ldd	r16, Y+4	; 0x04
    36b4:	1b 81       	ldd	r17, Y+3	; 0x03
    36b6:	aa 81       	ldd	r26, Y+2	; 0x02
    36b8:	b9 81       	ldd	r27, Y+1	; 0x01
    36ba:	ce 0f       	add	r28, r30
    36bc:	d1 1d       	adc	r29, r1
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	ed 01       	movw	r28, r26
    36ca:	08 95       	ret

000036cc <itoa>:
    36cc:	fb 01       	movw	r30, r22
    36ce:	9f 01       	movw	r18, r30
    36d0:	e8 94       	clt
    36d2:	42 30       	cpi	r20, 0x02	; 2
    36d4:	c4 f0       	brlt	.+48     	; 0x3706 <itoa+0x3a>
    36d6:	45 32       	cpi	r20, 0x25	; 37
    36d8:	b4 f4       	brge	.+44     	; 0x3706 <itoa+0x3a>
    36da:	4a 30       	cpi	r20, 0x0A	; 10
    36dc:	29 f4       	brne	.+10     	; 0x36e8 <itoa+0x1c>
    36de:	97 fb       	bst	r25, 7
    36e0:	1e f4       	brtc	.+6      	; 0x36e8 <itoa+0x1c>
    36e2:	90 95       	com	r25
    36e4:	81 95       	neg	r24
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	64 2f       	mov	r22, r20
    36ea:	77 27       	eor	r23, r23
    36ec:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__udivmodhi4>
    36f0:	80 5d       	subi	r24, 0xD0	; 208
    36f2:	8a 33       	cpi	r24, 0x3A	; 58
    36f4:	0c f0       	brlt	.+2      	; 0x36f8 <itoa+0x2c>
    36f6:	89 5d       	subi	r24, 0xD9	; 217
    36f8:	81 93       	st	Z+, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	a1 f7       	brne	.-24     	; 0x36e8 <itoa+0x1c>
    3700:	16 f4       	brtc	.+4      	; 0x3706 <itoa+0x3a>
    3702:	5d e2       	ldi	r21, 0x2D	; 45
    3704:	51 93       	st	Z+, r21
    3706:	10 82       	st	Z, r1
    3708:	c9 01       	movw	r24, r18
    370a:	0c 94 87 1b 	jmp	0x370e	; 0x370e <strrev>

0000370e <strrev>:
    370e:	dc 01       	movw	r26, r24
    3710:	fc 01       	movw	r30, r24
    3712:	67 2f       	mov	r22, r23
    3714:	71 91       	ld	r23, Z+
    3716:	77 23       	and	r23, r23
    3718:	e1 f7       	brne	.-8      	; 0x3712 <strrev+0x4>
    371a:	32 97       	sbiw	r30, 0x02	; 2
    371c:	04 c0       	rjmp	.+8      	; 0x3726 <strrev+0x18>
    371e:	7c 91       	ld	r23, X
    3720:	6d 93       	st	X+, r22
    3722:	70 83       	st	Z, r23
    3724:	62 91       	ld	r22, -Z
    3726:	ae 17       	cp	r26, r30
    3728:	bf 07       	cpc	r27, r31
    372a:	c8 f3       	brcs	.-14     	; 0x371e <strrev+0x10>
    372c:	08 95       	ret

0000372e <_exit>:
    372e:	f8 94       	cli

00003730 <__stop_program>:
    3730:	ff cf       	rjmp	.-2      	; 0x3730 <__stop_program>
